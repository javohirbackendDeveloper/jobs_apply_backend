
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model ProjectsOfUser
 * 
 */
export type ProjectsOfUser = $Result.DefaultSelection<Prisma.$ProjectsOfUserPayload>
/**
 * Model SoftSkills
 * 
 */
export type SoftSkills = $Result.DefaultSelection<Prisma.$SoftSkillsPayload>
/**
 * Model HardSkills
 * 
 */
export type HardSkills = $Result.DefaultSelection<Prisma.$HardSkillsPayload>
/**
 * Model Certificates
 * 
 */
export type Certificates = $Result.DefaultSelection<Prisma.$CertificatesPayload>
/**
 * Model Language
 * 
 */
export type Language = $Result.DefaultSelection<Prisma.$LanguagePayload>
/**
 * Model SocialMedia
 * 
 */
export type SocialMedia = $Result.DefaultSelection<Prisma.$SocialMediaPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model SocialNetworks
 * 
 */
export type SocialNetworks = $Result.DefaultSelection<Prisma.$SocialNetworksPayload>
/**
 * Model Vacansies
 * 
 */
export type Vacansies = $Result.DefaultSelection<Prisma.$VacansiesPayload>
/**
 * Model Projects
 * 
 */
export type Projects = $Result.DefaultSelection<Prisma.$ProjectsPayload>
/**
 * Model Partners
 * 
 */
export type Partners = $Result.DefaultSelection<Prisma.$PartnersPayload>
/**
 * Model hardSkillTests
 * 
 */
export type hardSkillTests = $Result.DefaultSelection<Prisma.$hardSkillTestsPayload>
/**
 * Model TestItem
 * 
 */
export type TestItem = $Result.DefaultSelection<Prisma.$TestItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  User: 'User',
  Company: 'Company',
  Admin: 'Admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const UserLevel: {
  Junior: 'Junior',
  Middle: 'Middle',
  Senior: 'Senior'
};

export type UserLevel = (typeof UserLevel)[keyof typeof UserLevel]


export const LanguageLevel: {
  beginner: 'beginner',
  pre_intermediate: 'pre_intermediate',
  intermediate: 'intermediate',
  upper_intermediate: 'upper_intermediate',
  advanced: 'advanced',
  proficient: 'proficient',
  native: 'native'
};

export type LanguageLevel = (typeof LanguageLevel)[keyof typeof LanguageLevel]


export const Level: {
  Junior: 'Junior',
  Middle: 'Middle',
  Senior: 'Senior'
};

export type Level = (typeof Level)[keyof typeof Level]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type UserLevel = $Enums.UserLevel

export const UserLevel: typeof $Enums.UserLevel

export type LanguageLevel = $Enums.LanguageLevel

export const LanguageLevel: typeof $Enums.LanguageLevel

export type Level = $Enums.Level

export const Level: typeof $Enums.Level

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectsOfUser`: Exposes CRUD operations for the **ProjectsOfUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectsOfUsers
    * const projectsOfUsers = await prisma.projectsOfUser.findMany()
    * ```
    */
  get projectsOfUser(): Prisma.ProjectsOfUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.softSkills`: Exposes CRUD operations for the **SoftSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoftSkills
    * const softSkills = await prisma.softSkills.findMany()
    * ```
    */
  get softSkills(): Prisma.SoftSkillsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hardSkills`: Exposes CRUD operations for the **HardSkills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HardSkills
    * const hardSkills = await prisma.hardSkills.findMany()
    * ```
    */
  get hardSkills(): Prisma.HardSkillsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificates`: Exposes CRUD operations for the **Certificates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificates.findMany()
    * ```
    */
  get certificates(): Prisma.CertificatesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): Prisma.LanguageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.socialMedia`: Exposes CRUD operations for the **SocialMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialMedias
    * const socialMedias = await prisma.socialMedia.findMany()
    * ```
    */
  get socialMedia(): Prisma.SocialMediaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.socialNetworks`: Exposes CRUD operations for the **SocialNetworks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialNetworks
    * const socialNetworks = await prisma.socialNetworks.findMany()
    * ```
    */
  get socialNetworks(): Prisma.SocialNetworksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vacansies`: Exposes CRUD operations for the **Vacansies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vacansies
    * const vacansies = await prisma.vacansies.findMany()
    * ```
    */
  get vacansies(): Prisma.VacansiesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **Projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.ProjectsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partners`: Exposes CRUD operations for the **Partners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partners.findMany()
    * ```
    */
  get partners(): Prisma.PartnersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hardSkillTests`: Exposes CRUD operations for the **hardSkillTests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HardSkillTests
    * const hardSkillTests = await prisma.hardSkillTests.findMany()
    * ```
    */
  get hardSkillTests(): Prisma.hardSkillTestsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testItem`: Exposes CRUD operations for the **TestItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestItems
    * const testItems = await prisma.testItem.findMany()
    * ```
    */
  get testItem(): Prisma.TestItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Message: 'Message',
    Education: 'Education',
    ProjectsOfUser: 'ProjectsOfUser',
    SoftSkills: 'SoftSkills',
    HardSkills: 'HardSkills',
    Certificates: 'Certificates',
    Language: 'Language',
    SocialMedia: 'SocialMedia',
    Company: 'Company',
    SocialNetworks: 'SocialNetworks',
    Vacansies: 'Vacansies',
    Projects: 'Projects',
    Partners: 'Partners',
    hardSkillTests: 'hardSkillTests',
    TestItem: 'TestItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "message" | "education" | "projectsOfUser" | "softSkills" | "hardSkills" | "certificates" | "language" | "socialMedia" | "company" | "socialNetworks" | "vacansies" | "projects" | "partners" | "hardSkillTests" | "testItem"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MessageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MessageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.EducationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.EducationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      ProjectsOfUser: {
        payload: Prisma.$ProjectsOfUserPayload<ExtArgs>
        fields: Prisma.ProjectsOfUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectsOfUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectsOfUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>
          }
          findFirst: {
            args: Prisma.ProjectsOfUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectsOfUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>
          }
          findMany: {
            args: Prisma.ProjectsOfUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>[]
          }
          create: {
            args: Prisma.ProjectsOfUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>
          }
          createMany: {
            args: Prisma.ProjectsOfUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectsOfUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>
          }
          update: {
            args: Prisma.ProjectsOfUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>
          }
          deleteMany: {
            args: Prisma.ProjectsOfUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectsOfUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectsOfUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsOfUserPayload>
          }
          aggregate: {
            args: Prisma.ProjectsOfUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectsOfUser>
          }
          groupBy: {
            args: Prisma.ProjectsOfUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectsOfUserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProjectsOfUserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProjectsOfUserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProjectsOfUserCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectsOfUserCountAggregateOutputType> | number
          }
        }
      }
      SoftSkills: {
        payload: Prisma.$SoftSkillsPayload<ExtArgs>
        fields: Prisma.SoftSkillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftSkillsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftSkillsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>
          }
          findFirst: {
            args: Prisma.SoftSkillsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftSkillsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>
          }
          findMany: {
            args: Prisma.SoftSkillsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>[]
          }
          create: {
            args: Prisma.SoftSkillsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>
          }
          createMany: {
            args: Prisma.SoftSkillsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoftSkillsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>
          }
          update: {
            args: Prisma.SoftSkillsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>
          }
          deleteMany: {
            args: Prisma.SoftSkillsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftSkillsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftSkillsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftSkillsPayload>
          }
          aggregate: {
            args: Prisma.SoftSkillsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftSkills>
          }
          groupBy: {
            args: Prisma.SoftSkillsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftSkillsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SoftSkillsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SoftSkillsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SoftSkillsCountArgs<ExtArgs>
            result: $Utils.Optional<SoftSkillsCountAggregateOutputType> | number
          }
        }
      }
      HardSkills: {
        payload: Prisma.$HardSkillsPayload<ExtArgs>
        fields: Prisma.HardSkillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HardSkillsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HardSkillsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>
          }
          findFirst: {
            args: Prisma.HardSkillsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HardSkillsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>
          }
          findMany: {
            args: Prisma.HardSkillsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>[]
          }
          create: {
            args: Prisma.HardSkillsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>
          }
          createMany: {
            args: Prisma.HardSkillsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HardSkillsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>
          }
          update: {
            args: Prisma.HardSkillsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>
          }
          deleteMany: {
            args: Prisma.HardSkillsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HardSkillsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HardSkillsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardSkillsPayload>
          }
          aggregate: {
            args: Prisma.HardSkillsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHardSkills>
          }
          groupBy: {
            args: Prisma.HardSkillsGroupByArgs<ExtArgs>
            result: $Utils.Optional<HardSkillsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.HardSkillsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.HardSkillsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.HardSkillsCountArgs<ExtArgs>
            result: $Utils.Optional<HardSkillsCountAggregateOutputType> | number
          }
        }
      }
      Certificates: {
        payload: Prisma.$CertificatesPayload<ExtArgs>
        fields: Prisma.CertificatesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificatesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificatesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>
          }
          findFirst: {
            args: Prisma.CertificatesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificatesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>
          }
          findMany: {
            args: Prisma.CertificatesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>[]
          }
          create: {
            args: Prisma.CertificatesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>
          }
          createMany: {
            args: Prisma.CertificatesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CertificatesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>
          }
          update: {
            args: Prisma.CertificatesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>
          }
          deleteMany: {
            args: Prisma.CertificatesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificatesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CertificatesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatesPayload>
          }
          aggregate: {
            args: Prisma.CertificatesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificates>
          }
          groupBy: {
            args: Prisma.CertificatesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificatesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CertificatesFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CertificatesAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CertificatesCountArgs<ExtArgs>
            result: $Utils.Optional<CertificatesCountAggregateOutputType> | number
          }
        }
      }
      Language: {
        payload: Prisma.$LanguagePayload<ExtArgs>
        fields: Prisma.LanguageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findFirst: {
            args: Prisma.LanguageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findMany: {
            args: Prisma.LanguageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>[]
          }
          create: {
            args: Prisma.LanguageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          createMany: {
            args: Prisma.LanguageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LanguageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          update: {
            args: Prisma.LanguageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          deleteMany: {
            args: Prisma.LanguageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LanguageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          aggregate: {
            args: Prisma.LanguageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguage>
          }
          groupBy: {
            args: Prisma.LanguageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LanguageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.LanguageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.LanguageCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageCountAggregateOutputType> | number
          }
        }
      }
      SocialMedia: {
        payload: Prisma.$SocialMediaPayload<ExtArgs>
        fields: Prisma.SocialMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialMediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialMediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>
          }
          findFirst: {
            args: Prisma.SocialMediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialMediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>
          }
          findMany: {
            args: Prisma.SocialMediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>[]
          }
          create: {
            args: Prisma.SocialMediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>
          }
          createMany: {
            args: Prisma.SocialMediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SocialMediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>
          }
          update: {
            args: Prisma.SocialMediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>
          }
          deleteMany: {
            args: Prisma.SocialMediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SocialMediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SocialMediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaPayload>
          }
          aggregate: {
            args: Prisma.SocialMediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocialMedia>
          }
          groupBy: {
            args: Prisma.SocialMediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<SocialMediaGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SocialMediaFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SocialMediaAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SocialMediaCountArgs<ExtArgs>
            result: $Utils.Optional<SocialMediaCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CompanyFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CompanyAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      SocialNetworks: {
        payload: Prisma.$SocialNetworksPayload<ExtArgs>
        fields: Prisma.SocialNetworksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialNetworksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialNetworksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>
          }
          findFirst: {
            args: Prisma.SocialNetworksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialNetworksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>
          }
          findMany: {
            args: Prisma.SocialNetworksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>[]
          }
          create: {
            args: Prisma.SocialNetworksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>
          }
          createMany: {
            args: Prisma.SocialNetworksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SocialNetworksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>
          }
          update: {
            args: Prisma.SocialNetworksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>
          }
          deleteMany: {
            args: Prisma.SocialNetworksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SocialNetworksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SocialNetworksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialNetworksPayload>
          }
          aggregate: {
            args: Prisma.SocialNetworksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocialNetworks>
          }
          groupBy: {
            args: Prisma.SocialNetworksGroupByArgs<ExtArgs>
            result: $Utils.Optional<SocialNetworksGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SocialNetworksFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SocialNetworksAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SocialNetworksCountArgs<ExtArgs>
            result: $Utils.Optional<SocialNetworksCountAggregateOutputType> | number
          }
        }
      }
      Vacansies: {
        payload: Prisma.$VacansiesPayload<ExtArgs>
        fields: Prisma.VacansiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VacansiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VacansiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>
          }
          findFirst: {
            args: Prisma.VacansiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VacansiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>
          }
          findMany: {
            args: Prisma.VacansiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>[]
          }
          create: {
            args: Prisma.VacansiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>
          }
          createMany: {
            args: Prisma.VacansiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VacansiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>
          }
          update: {
            args: Prisma.VacansiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>
          }
          deleteMany: {
            args: Prisma.VacansiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VacansiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VacansiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VacansiesPayload>
          }
          aggregate: {
            args: Prisma.VacansiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVacansies>
          }
          groupBy: {
            args: Prisma.VacansiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<VacansiesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.VacansiesFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.VacansiesAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.VacansiesCountArgs<ExtArgs>
            result: $Utils.Optional<VacansiesCountAggregateOutputType> | number
          }
        }
      }
      Projects: {
        payload: Prisma.$ProjectsPayload<ExtArgs>
        fields: Prisma.ProjectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          findFirst: {
            args: Prisma.ProjectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          findMany: {
            args: Prisma.ProjectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>[]
          }
          create: {
            args: Prisma.ProjectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          createMany: {
            args: Prisma.ProjectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          update: {
            args: Prisma.ProjectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          deleteMany: {
            args: Prisma.ProjectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          aggregate: {
            args: Prisma.ProjectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjects>
          }
          groupBy: {
            args: Prisma.ProjectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProjectsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProjectsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProjectsCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectsCountAggregateOutputType> | number
          }
        }
      }
      Partners: {
        payload: Prisma.$PartnersPayload<ExtArgs>
        fields: Prisma.PartnersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          findFirst: {
            args: Prisma.PartnersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          findMany: {
            args: Prisma.PartnersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          create: {
            args: Prisma.PartnersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          createMany: {
            args: Prisma.PartnersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PartnersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          update: {
            args: Prisma.PartnersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          deleteMany: {
            args: Prisma.PartnersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartnersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          aggregate: {
            args: Prisma.PartnersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartners>
          }
          groupBy: {
            args: Prisma.PartnersGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnersGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PartnersFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.PartnersAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.PartnersCountArgs<ExtArgs>
            result: $Utils.Optional<PartnersCountAggregateOutputType> | number
          }
        }
      }
      hardSkillTests: {
        payload: Prisma.$hardSkillTestsPayload<ExtArgs>
        fields: Prisma.hardSkillTestsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.hardSkillTestsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.hardSkillTestsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>
          }
          findFirst: {
            args: Prisma.hardSkillTestsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.hardSkillTestsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>
          }
          findMany: {
            args: Prisma.hardSkillTestsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>[]
          }
          create: {
            args: Prisma.hardSkillTestsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>
          }
          createMany: {
            args: Prisma.hardSkillTestsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.hardSkillTestsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>
          }
          update: {
            args: Prisma.hardSkillTestsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>
          }
          deleteMany: {
            args: Prisma.hardSkillTestsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.hardSkillTestsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.hardSkillTestsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hardSkillTestsPayload>
          }
          aggregate: {
            args: Prisma.HardSkillTestsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHardSkillTests>
          }
          groupBy: {
            args: Prisma.hardSkillTestsGroupByArgs<ExtArgs>
            result: $Utils.Optional<HardSkillTestsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.hardSkillTestsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.hardSkillTestsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.hardSkillTestsCountArgs<ExtArgs>
            result: $Utils.Optional<HardSkillTestsCountAggregateOutputType> | number
          }
        }
      }
      TestItem: {
        payload: Prisma.$TestItemPayload<ExtArgs>
        fields: Prisma.TestItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>
          }
          findFirst: {
            args: Prisma.TestItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>
          }
          findMany: {
            args: Prisma.TestItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>[]
          }
          create: {
            args: Prisma.TestItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>
          }
          createMany: {
            args: Prisma.TestItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TestItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>
          }
          update: {
            args: Prisma.TestItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>
          }
          deleteMany: {
            args: Prisma.TestItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestItemPayload>
          }
          aggregate: {
            args: Prisma.TestItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestItem>
          }
          groupBy: {
            args: Prisma.TestItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestItemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TestItemFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TestItemAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TestItemCountArgs<ExtArgs>
            result: $Utils.Optional<TestItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    message?: MessageOmit
    education?: EducationOmit
    projectsOfUser?: ProjectsOfUserOmit
    softSkills?: SoftSkillsOmit
    hardSkills?: HardSkillsOmit
    certificates?: CertificatesOmit
    language?: LanguageOmit
    socialMedia?: SocialMediaOmit
    company?: CompanyOmit
    socialNetworks?: SocialNetworksOmit
    vacansies?: VacansiesOmit
    projects?: ProjectsOmit
    partners?: PartnersOmit
    hardSkillTests?: hardSkillTestsOmit
    testItem?: TestItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HardSkillTestsCountOutputType
   */

  export type HardSkillTestsCountOutputType = {
    tests: number
  }

  export type HardSkillTestsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tests?: boolean | HardSkillTestsCountOutputTypeCountTestsArgs
  }

  // Custom InputTypes
  /**
   * HardSkillTestsCountOutputType without action
   */
  export type HardSkillTestsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkillTestsCountOutputType
     */
    select?: HardSkillTestsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HardSkillTestsCountOutputType without action
   */
  export type HardSkillTestsCountOutputTypeCountTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    experience: number | null
  }

  export type UserSumAggregateOutputType = {
    experience: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    password: string | null
    profile_img: string | null
    position: string | null
    about: string | null
    location: string | null
    experience: number | null
    role: $Enums.Role | null
    level: $Enums.UserLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    password: string | null
    profile_img: string | null
    position: string | null
    about: string | null
    location: string | null
    experience: number | null
    role: $Enums.Role | null
    level: $Enums.UserLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    profile_img: number
    hard_skills: number
    soft_skills: number
    position: number
    about: number
    location: number
    experience: number
    role: number
    level: number
    education: number
    projects: number
    certificates: number
    languages: number
    social_medias: number
    messages: number
    submitted_vacancies: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    experience?: true
  }

  export type UserSumAggregateInputType = {
    experience?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profile_img?: true
    position?: true
    about?: true
    location?: true
    experience?: true
    role?: true
    level?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profile_img?: true
    position?: true
    about?: true
    location?: true
    experience?: true
    role?: true
    level?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profile_img?: true
    hard_skills?: true
    soft_skills?: true
    position?: true
    about?: true
    location?: true
    experience?: true
    role?: true
    level?: true
    education?: true
    projects?: true
    certificates?: true
    languages?: true
    social_medias?: true
    messages?: true
    submitted_vacancies?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    fullName: string
    email: string
    password: string
    profile_img: string | null
    hard_skills: string[]
    soft_skills: string[]
    position: string
    about: string | null
    location: string | null
    experience: number | null
    role: $Enums.Role
    level: $Enums.UserLevel
    education: string[]
    projects: string[]
    certificates: string[]
    languages: string[]
    social_medias: string[]
    messages: string[]
    submitted_vacancies: string[]
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profile_img?: boolean
    hard_skills?: boolean
    soft_skills?: boolean
    position?: boolean
    about?: boolean
    location?: boolean
    experience?: boolean
    role?: boolean
    level?: boolean
    education?: boolean
    projects?: boolean
    certificates?: boolean
    languages?: boolean
    social_medias?: boolean
    messages?: boolean
    submitted_vacancies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profile_img?: boolean
    hard_skills?: boolean
    soft_skills?: boolean
    position?: boolean
    about?: boolean
    location?: boolean
    experience?: boolean
    role?: boolean
    level?: boolean
    education?: boolean
    projects?: boolean
    certificates?: boolean
    languages?: boolean
    social_medias?: boolean
    messages?: boolean
    submitted_vacancies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "email" | "password" | "profile_img" | "hard_skills" | "soft_skills" | "position" | "about" | "location" | "experience" | "role" | "level" | "education" | "projects" | "certificates" | "languages" | "social_medias" | "messages" | "submitted_vacancies" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      email: string
      password: string
      profile_img: string | null
      hard_skills: string[]
      soft_skills: string[]
      position: string
      about: string | null
      location: string | null
      experience: number | null
      role: $Enums.Role
      level: $Enums.UserLevel
      education: string[]
      projects: string[]
      certificates: string[]
      languages: string[]
      social_medias: string[]
      messages: string[]
      submitted_vacancies: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly profile_img: FieldRef<"User", 'String'>
    readonly hard_skills: FieldRef<"User", 'String[]'>
    readonly soft_skills: FieldRef<"User", 'String[]'>
    readonly position: FieldRef<"User", 'String'>
    readonly about: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly experience: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'Role'>
    readonly level: FieldRef<"User", 'UserLevel'>
    readonly education: FieldRef<"User", 'String[]'>
    readonly projects: FieldRef<"User", 'String[]'>
    readonly certificates: FieldRef<"User", 'String[]'>
    readonly languages: FieldRef<"User", 'String[]'>
    readonly social_medias: FieldRef<"User", 'String[]'>
    readonly messages: FieldRef<"User", 'String[]'>
    readonly submitted_vacancies: FieldRef<"User", 'String[]'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    messageText: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    messageText: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    messageText: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    messageText?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    messageText?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    messageText?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string
    messageText: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    messageText?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["message"]>



  export type MessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    messageText?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "receiverId" | "messageText" | "imageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["message"]>

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      receiverId: string
      messageText: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * @param {MessageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const message = await prisma.message.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: MessageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Message.
     * @param {MessageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const message = await prisma.message.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MessageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly receiverId: FieldRef<"Message", 'String'>
    readonly messageText: FieldRef<"Message", 'String'>
    readonly imageUrl: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message findRaw
   */
  export type MessageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Message aggregateRaw
   */
  export type MessageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
  }


  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    degree: string | null
    field_of_study: string | null
    institution: string | null
    description: string | null
    startDate: string | null
    type_of_education: string | null
    endDate: string | null
  }

  export type EducationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    degree: string | null
    field_of_study: string | null
    institution: string | null
    description: string | null
    startDate: string | null
    type_of_education: string | null
    endDate: string | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    userId: number
    degree: number
    field_of_study: number
    institution: number
    description: number
    startDate: number
    type_of_education: number
    endDate: number
    _all: number
  }


  export type EducationMinAggregateInputType = {
    id?: true
    userId?: true
    degree?: true
    field_of_study?: true
    institution?: true
    description?: true
    startDate?: true
    type_of_education?: true
    endDate?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    userId?: true
    degree?: true
    field_of_study?: true
    institution?: true
    description?: true
    startDate?: true
    type_of_education?: true
    endDate?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    userId?: true
    degree?: true
    field_of_study?: true
    institution?: true
    description?: true
    startDate?: true
    type_of_education?: true
    endDate?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    id: string
    userId: string
    degree: string
    field_of_study: string
    institution: string
    description: string | null
    startDate: string
    type_of_education: string | null
    endDate: string | null
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    degree?: boolean
    field_of_study?: boolean
    institution?: boolean
    description?: boolean
    startDate?: boolean
    type_of_education?: boolean
    endDate?: boolean
  }, ExtArgs["result"]["education"]>



  export type EducationSelectScalar = {
    id?: boolean
    userId?: boolean
    degree?: boolean
    field_of_study?: boolean
    institution?: boolean
    description?: boolean
    startDate?: boolean
    type_of_education?: boolean
    endDate?: boolean
  }

  export type EducationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "degree" | "field_of_study" | "institution" | "description" | "startDate" | "type_of_education" | "endDate", ExtArgs["result"]["education"]>

  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      degree: string
      field_of_study: string
      institution: string
      description: string | null
      startDate: string
      type_of_education: string | null
      endDate: string | null
    }, ExtArgs["result"]["education"]>
    composites: {}
  }

  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationFindUniqueArgs>(args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Education that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationFindFirstArgs>(args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EducationFindManyArgs>(args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
     */
    create<T extends EducationCreateArgs>(args: SelectSubset<T, EducationCreateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Educations.
     * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationCreateManyArgs>(args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
     */
    delete<T extends EducationDeleteArgs>(args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationUpdateArgs>(args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationDeleteManyArgs>(args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationUpdateManyArgs>(args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
     */
    upsert<T extends EducationUpsertArgs>(args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Educations that matches the filter.
     * @param {EducationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const education = await prisma.education.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: EducationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Education.
     * @param {EducationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const education = await prisma.education.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: EducationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Education model
   */
  interface EducationFieldRefs {
    readonly id: FieldRef<"Education", 'String'>
    readonly userId: FieldRef<"Education", 'String'>
    readonly degree: FieldRef<"Education", 'String'>
    readonly field_of_study: FieldRef<"Education", 'String'>
    readonly institution: FieldRef<"Education", 'String'>
    readonly description: FieldRef<"Education", 'String'>
    readonly startDate: FieldRef<"Education", 'String'>
    readonly type_of_education: FieldRef<"Education", 'String'>
    readonly endDate: FieldRef<"Education", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }

  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
  }

  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to update.
     */
    limit?: number
  }

  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }

  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to delete.
     */
    limit?: number
  }

  /**
   * Education findRaw
   */
  export type EducationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Education aggregateRaw
   */
  export type EducationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
  }


  /**
   * Model ProjectsOfUser
   */

  export type AggregateProjectsOfUser = {
    _count: ProjectsOfUserCountAggregateOutputType | null
    _min: ProjectsOfUserMinAggregateOutputType | null
    _max: ProjectsOfUserMaxAggregateOutputType | null
  }

  export type ProjectsOfUserMinAggregateOutputType = {
    id: string | null
    userId: string | null
    project_title: string | null
    description: string | null
  }

  export type ProjectsOfUserMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    project_title: string | null
    description: string | null
  }

  export type ProjectsOfUserCountAggregateOutputType = {
    id: number
    userId: number
    project_title: number
    description: number
    used_technologies: number
    _all: number
  }


  export type ProjectsOfUserMinAggregateInputType = {
    id?: true
    userId?: true
    project_title?: true
    description?: true
  }

  export type ProjectsOfUserMaxAggregateInputType = {
    id?: true
    userId?: true
    project_title?: true
    description?: true
  }

  export type ProjectsOfUserCountAggregateInputType = {
    id?: true
    userId?: true
    project_title?: true
    description?: true
    used_technologies?: true
    _all?: true
  }

  export type ProjectsOfUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectsOfUser to aggregate.
     */
    where?: ProjectsOfUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectsOfUsers to fetch.
     */
    orderBy?: ProjectsOfUserOrderByWithRelationInput | ProjectsOfUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectsOfUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectsOfUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectsOfUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectsOfUsers
    **/
    _count?: true | ProjectsOfUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsOfUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsOfUserMaxAggregateInputType
  }

  export type GetProjectsOfUserAggregateType<T extends ProjectsOfUserAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectsOfUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectsOfUser[P]>
      : GetScalarType<T[P], AggregateProjectsOfUser[P]>
  }




  export type ProjectsOfUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsOfUserWhereInput
    orderBy?: ProjectsOfUserOrderByWithAggregationInput | ProjectsOfUserOrderByWithAggregationInput[]
    by: ProjectsOfUserScalarFieldEnum[] | ProjectsOfUserScalarFieldEnum
    having?: ProjectsOfUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsOfUserCountAggregateInputType | true
    _min?: ProjectsOfUserMinAggregateInputType
    _max?: ProjectsOfUserMaxAggregateInputType
  }

  export type ProjectsOfUserGroupByOutputType = {
    id: string
    userId: string
    project_title: string
    description: string
    used_technologies: string[]
    _count: ProjectsOfUserCountAggregateOutputType | null
    _min: ProjectsOfUserMinAggregateOutputType | null
    _max: ProjectsOfUserMaxAggregateOutputType | null
  }

  type GetProjectsOfUserGroupByPayload<T extends ProjectsOfUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectsOfUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsOfUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsOfUserGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsOfUserGroupByOutputType[P]>
        }
      >
    >


  export type ProjectsOfUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    project_title?: boolean
    description?: boolean
    used_technologies?: boolean
  }, ExtArgs["result"]["projectsOfUser"]>



  export type ProjectsOfUserSelectScalar = {
    id?: boolean
    userId?: boolean
    project_title?: boolean
    description?: boolean
    used_technologies?: boolean
  }

  export type ProjectsOfUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "project_title" | "description" | "used_technologies", ExtArgs["result"]["projectsOfUser"]>

  export type $ProjectsOfUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectsOfUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      project_title: string
      description: string
      used_technologies: string[]
    }, ExtArgs["result"]["projectsOfUser"]>
    composites: {}
  }

  type ProjectsOfUserGetPayload<S extends boolean | null | undefined | ProjectsOfUserDefaultArgs> = $Result.GetResult<Prisma.$ProjectsOfUserPayload, S>

  type ProjectsOfUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectsOfUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectsOfUserCountAggregateInputType | true
    }

  export interface ProjectsOfUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectsOfUser'], meta: { name: 'ProjectsOfUser' } }
    /**
     * Find zero or one ProjectsOfUser that matches the filter.
     * @param {ProjectsOfUserFindUniqueArgs} args - Arguments to find a ProjectsOfUser
     * @example
     * // Get one ProjectsOfUser
     * const projectsOfUser = await prisma.projectsOfUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectsOfUserFindUniqueArgs>(args: SelectSubset<T, ProjectsOfUserFindUniqueArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectsOfUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectsOfUserFindUniqueOrThrowArgs} args - Arguments to find a ProjectsOfUser
     * @example
     * // Get one ProjectsOfUser
     * const projectsOfUser = await prisma.projectsOfUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectsOfUserFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectsOfUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectsOfUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserFindFirstArgs} args - Arguments to find a ProjectsOfUser
     * @example
     * // Get one ProjectsOfUser
     * const projectsOfUser = await prisma.projectsOfUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectsOfUserFindFirstArgs>(args?: SelectSubset<T, ProjectsOfUserFindFirstArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectsOfUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserFindFirstOrThrowArgs} args - Arguments to find a ProjectsOfUser
     * @example
     * // Get one ProjectsOfUser
     * const projectsOfUser = await prisma.projectsOfUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectsOfUserFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectsOfUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectsOfUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectsOfUsers
     * const projectsOfUsers = await prisma.projectsOfUser.findMany()
     * 
     * // Get first 10 ProjectsOfUsers
     * const projectsOfUsers = await prisma.projectsOfUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsOfUserWithIdOnly = await prisma.projectsOfUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectsOfUserFindManyArgs>(args?: SelectSubset<T, ProjectsOfUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectsOfUser.
     * @param {ProjectsOfUserCreateArgs} args - Arguments to create a ProjectsOfUser.
     * @example
     * // Create one ProjectsOfUser
     * const ProjectsOfUser = await prisma.projectsOfUser.create({
     *   data: {
     *     // ... data to create a ProjectsOfUser
     *   }
     * })
     * 
     */
    create<T extends ProjectsOfUserCreateArgs>(args: SelectSubset<T, ProjectsOfUserCreateArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectsOfUsers.
     * @param {ProjectsOfUserCreateManyArgs} args - Arguments to create many ProjectsOfUsers.
     * @example
     * // Create many ProjectsOfUsers
     * const projectsOfUser = await prisma.projectsOfUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectsOfUserCreateManyArgs>(args?: SelectSubset<T, ProjectsOfUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProjectsOfUser.
     * @param {ProjectsOfUserDeleteArgs} args - Arguments to delete one ProjectsOfUser.
     * @example
     * // Delete one ProjectsOfUser
     * const ProjectsOfUser = await prisma.projectsOfUser.delete({
     *   where: {
     *     // ... filter to delete one ProjectsOfUser
     *   }
     * })
     * 
     */
    delete<T extends ProjectsOfUserDeleteArgs>(args: SelectSubset<T, ProjectsOfUserDeleteArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectsOfUser.
     * @param {ProjectsOfUserUpdateArgs} args - Arguments to update one ProjectsOfUser.
     * @example
     * // Update one ProjectsOfUser
     * const projectsOfUser = await prisma.projectsOfUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectsOfUserUpdateArgs>(args: SelectSubset<T, ProjectsOfUserUpdateArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectsOfUsers.
     * @param {ProjectsOfUserDeleteManyArgs} args - Arguments to filter ProjectsOfUsers to delete.
     * @example
     * // Delete a few ProjectsOfUsers
     * const { count } = await prisma.projectsOfUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectsOfUserDeleteManyArgs>(args?: SelectSubset<T, ProjectsOfUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectsOfUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectsOfUsers
     * const projectsOfUser = await prisma.projectsOfUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectsOfUserUpdateManyArgs>(args: SelectSubset<T, ProjectsOfUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectsOfUser.
     * @param {ProjectsOfUserUpsertArgs} args - Arguments to update or create a ProjectsOfUser.
     * @example
     * // Update or create a ProjectsOfUser
     * const projectsOfUser = await prisma.projectsOfUser.upsert({
     *   create: {
     *     // ... data to create a ProjectsOfUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectsOfUser we want to update
     *   }
     * })
     */
    upsert<T extends ProjectsOfUserUpsertArgs>(args: SelectSubset<T, ProjectsOfUserUpsertArgs<ExtArgs>>): Prisma__ProjectsOfUserClient<$Result.GetResult<Prisma.$ProjectsOfUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectsOfUsers that matches the filter.
     * @param {ProjectsOfUserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const projectsOfUser = await prisma.projectsOfUser.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProjectsOfUserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProjectsOfUser.
     * @param {ProjectsOfUserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const projectsOfUser = await prisma.projectsOfUser.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProjectsOfUserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProjectsOfUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserCountArgs} args - Arguments to filter ProjectsOfUsers to count.
     * @example
     * // Count the number of ProjectsOfUsers
     * const count = await prisma.projectsOfUser.count({
     *   where: {
     *     // ... the filter for the ProjectsOfUsers we want to count
     *   }
     * })
    **/
    count<T extends ProjectsOfUserCountArgs>(
      args?: Subset<T, ProjectsOfUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsOfUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectsOfUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsOfUserAggregateArgs>(args: Subset<T, ProjectsOfUserAggregateArgs>): Prisma.PrismaPromise<GetProjectsOfUserAggregateType<T>>

    /**
     * Group by ProjectsOfUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsOfUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectsOfUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectsOfUserGroupByArgs['orderBy'] }
        : { orderBy?: ProjectsOfUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectsOfUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsOfUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectsOfUser model
   */
  readonly fields: ProjectsOfUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectsOfUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectsOfUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectsOfUser model
   */
  interface ProjectsOfUserFieldRefs {
    readonly id: FieldRef<"ProjectsOfUser", 'String'>
    readonly userId: FieldRef<"ProjectsOfUser", 'String'>
    readonly project_title: FieldRef<"ProjectsOfUser", 'String'>
    readonly description: FieldRef<"ProjectsOfUser", 'String'>
    readonly used_technologies: FieldRef<"ProjectsOfUser", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * ProjectsOfUser findUnique
   */
  export type ProjectsOfUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * Filter, which ProjectsOfUser to fetch.
     */
    where: ProjectsOfUserWhereUniqueInput
  }

  /**
   * ProjectsOfUser findUniqueOrThrow
   */
  export type ProjectsOfUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * Filter, which ProjectsOfUser to fetch.
     */
    where: ProjectsOfUserWhereUniqueInput
  }

  /**
   * ProjectsOfUser findFirst
   */
  export type ProjectsOfUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * Filter, which ProjectsOfUser to fetch.
     */
    where?: ProjectsOfUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectsOfUsers to fetch.
     */
    orderBy?: ProjectsOfUserOrderByWithRelationInput | ProjectsOfUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectsOfUsers.
     */
    cursor?: ProjectsOfUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectsOfUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectsOfUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectsOfUsers.
     */
    distinct?: ProjectsOfUserScalarFieldEnum | ProjectsOfUserScalarFieldEnum[]
  }

  /**
   * ProjectsOfUser findFirstOrThrow
   */
  export type ProjectsOfUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * Filter, which ProjectsOfUser to fetch.
     */
    where?: ProjectsOfUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectsOfUsers to fetch.
     */
    orderBy?: ProjectsOfUserOrderByWithRelationInput | ProjectsOfUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectsOfUsers.
     */
    cursor?: ProjectsOfUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectsOfUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectsOfUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectsOfUsers.
     */
    distinct?: ProjectsOfUserScalarFieldEnum | ProjectsOfUserScalarFieldEnum[]
  }

  /**
   * ProjectsOfUser findMany
   */
  export type ProjectsOfUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * Filter, which ProjectsOfUsers to fetch.
     */
    where?: ProjectsOfUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectsOfUsers to fetch.
     */
    orderBy?: ProjectsOfUserOrderByWithRelationInput | ProjectsOfUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectsOfUsers.
     */
    cursor?: ProjectsOfUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectsOfUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectsOfUsers.
     */
    skip?: number
    distinct?: ProjectsOfUserScalarFieldEnum | ProjectsOfUserScalarFieldEnum[]
  }

  /**
   * ProjectsOfUser create
   */
  export type ProjectsOfUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * The data needed to create a ProjectsOfUser.
     */
    data: XOR<ProjectsOfUserCreateInput, ProjectsOfUserUncheckedCreateInput>
  }

  /**
   * ProjectsOfUser createMany
   */
  export type ProjectsOfUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectsOfUsers.
     */
    data: ProjectsOfUserCreateManyInput | ProjectsOfUserCreateManyInput[]
  }

  /**
   * ProjectsOfUser update
   */
  export type ProjectsOfUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * The data needed to update a ProjectsOfUser.
     */
    data: XOR<ProjectsOfUserUpdateInput, ProjectsOfUserUncheckedUpdateInput>
    /**
     * Choose, which ProjectsOfUser to update.
     */
    where: ProjectsOfUserWhereUniqueInput
  }

  /**
   * ProjectsOfUser updateMany
   */
  export type ProjectsOfUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectsOfUsers.
     */
    data: XOR<ProjectsOfUserUpdateManyMutationInput, ProjectsOfUserUncheckedUpdateManyInput>
    /**
     * Filter which ProjectsOfUsers to update
     */
    where?: ProjectsOfUserWhereInput
    /**
     * Limit how many ProjectsOfUsers to update.
     */
    limit?: number
  }

  /**
   * ProjectsOfUser upsert
   */
  export type ProjectsOfUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * The filter to search for the ProjectsOfUser to update in case it exists.
     */
    where: ProjectsOfUserWhereUniqueInput
    /**
     * In case the ProjectsOfUser found by the `where` argument doesn't exist, create a new ProjectsOfUser with this data.
     */
    create: XOR<ProjectsOfUserCreateInput, ProjectsOfUserUncheckedCreateInput>
    /**
     * In case the ProjectsOfUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectsOfUserUpdateInput, ProjectsOfUserUncheckedUpdateInput>
  }

  /**
   * ProjectsOfUser delete
   */
  export type ProjectsOfUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
    /**
     * Filter which ProjectsOfUser to delete.
     */
    where: ProjectsOfUserWhereUniqueInput
  }

  /**
   * ProjectsOfUser deleteMany
   */
  export type ProjectsOfUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectsOfUsers to delete
     */
    where?: ProjectsOfUserWhereInput
    /**
     * Limit how many ProjectsOfUsers to delete.
     */
    limit?: number
  }

  /**
   * ProjectsOfUser findRaw
   */
  export type ProjectsOfUserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProjectsOfUser aggregateRaw
   */
  export type ProjectsOfUserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProjectsOfUser without action
   */
  export type ProjectsOfUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsOfUser
     */
    select?: ProjectsOfUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectsOfUser
     */
    omit?: ProjectsOfUserOmit<ExtArgs> | null
  }


  /**
   * Model SoftSkills
   */

  export type AggregateSoftSkills = {
    _count: SoftSkillsCountAggregateOutputType | null
    _min: SoftSkillsMinAggregateOutputType | null
    _max: SoftSkillsMaxAggregateOutputType | null
  }

  export type SoftSkillsMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type SoftSkillsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type SoftSkillsCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    _all: number
  }


  export type SoftSkillsMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SoftSkillsMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SoftSkillsCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    _all?: true
  }

  export type SoftSkillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftSkills to aggregate.
     */
    where?: SoftSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftSkills to fetch.
     */
    orderBy?: SoftSkillsOrderByWithRelationInput | SoftSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoftSkills
    **/
    _count?: true | SoftSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftSkillsMaxAggregateInputType
  }

  export type GetSoftSkillsAggregateType<T extends SoftSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftSkills[P]>
      : GetScalarType<T[P], AggregateSoftSkills[P]>
  }




  export type SoftSkillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftSkillsWhereInput
    orderBy?: SoftSkillsOrderByWithAggregationInput | SoftSkillsOrderByWithAggregationInput[]
    by: SoftSkillsScalarFieldEnum[] | SoftSkillsScalarFieldEnum
    having?: SoftSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftSkillsCountAggregateInputType | true
    _min?: SoftSkillsMinAggregateInputType
    _max?: SoftSkillsMaxAggregateInputType
  }

  export type SoftSkillsGroupByOutputType = {
    id: string
    userId: string
    type: string[]
    _count: SoftSkillsCountAggregateOutputType | null
    _min: SoftSkillsMinAggregateOutputType | null
    _max: SoftSkillsMaxAggregateOutputType | null
  }

  type GetSoftSkillsGroupByPayload<T extends SoftSkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], SoftSkillsGroupByOutputType[P]>
        }
      >
    >


  export type SoftSkillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
  }, ExtArgs["result"]["softSkills"]>



  export type SoftSkillsSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
  }

  export type SoftSkillsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type", ExtArgs["result"]["softSkills"]>

  export type $SoftSkillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoftSkills"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string[]
    }, ExtArgs["result"]["softSkills"]>
    composites: {}
  }

  type SoftSkillsGetPayload<S extends boolean | null | undefined | SoftSkillsDefaultArgs> = $Result.GetResult<Prisma.$SoftSkillsPayload, S>

  type SoftSkillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SoftSkillsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SoftSkillsCountAggregateInputType | true
    }

  export interface SoftSkillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoftSkills'], meta: { name: 'SoftSkills' } }
    /**
     * Find zero or one SoftSkills that matches the filter.
     * @param {SoftSkillsFindUniqueArgs} args - Arguments to find a SoftSkills
     * @example
     * // Get one SoftSkills
     * const softSkills = await prisma.softSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftSkillsFindUniqueArgs>(args: SelectSubset<T, SoftSkillsFindUniqueArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SoftSkills that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SoftSkillsFindUniqueOrThrowArgs} args - Arguments to find a SoftSkills
     * @example
     * // Get one SoftSkills
     * const softSkills = await prisma.softSkills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftSkillsFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftSkillsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SoftSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsFindFirstArgs} args - Arguments to find a SoftSkills
     * @example
     * // Get one SoftSkills
     * const softSkills = await prisma.softSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftSkillsFindFirstArgs>(args?: SelectSubset<T, SoftSkillsFindFirstArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SoftSkills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsFindFirstOrThrowArgs} args - Arguments to find a SoftSkills
     * @example
     * // Get one SoftSkills
     * const softSkills = await prisma.softSkills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftSkillsFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftSkillsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SoftSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoftSkills
     * const softSkills = await prisma.softSkills.findMany()
     * 
     * // Get first 10 SoftSkills
     * const softSkills = await prisma.softSkills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const softSkillsWithIdOnly = await prisma.softSkills.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoftSkillsFindManyArgs>(args?: SelectSubset<T, SoftSkillsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SoftSkills.
     * @param {SoftSkillsCreateArgs} args - Arguments to create a SoftSkills.
     * @example
     * // Create one SoftSkills
     * const SoftSkills = await prisma.softSkills.create({
     *   data: {
     *     // ... data to create a SoftSkills
     *   }
     * })
     * 
     */
    create<T extends SoftSkillsCreateArgs>(args: SelectSubset<T, SoftSkillsCreateArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SoftSkills.
     * @param {SoftSkillsCreateManyArgs} args - Arguments to create many SoftSkills.
     * @example
     * // Create many SoftSkills
     * const softSkills = await prisma.softSkills.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftSkillsCreateManyArgs>(args?: SelectSubset<T, SoftSkillsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SoftSkills.
     * @param {SoftSkillsDeleteArgs} args - Arguments to delete one SoftSkills.
     * @example
     * // Delete one SoftSkills
     * const SoftSkills = await prisma.softSkills.delete({
     *   where: {
     *     // ... filter to delete one SoftSkills
     *   }
     * })
     * 
     */
    delete<T extends SoftSkillsDeleteArgs>(args: SelectSubset<T, SoftSkillsDeleteArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SoftSkills.
     * @param {SoftSkillsUpdateArgs} args - Arguments to update one SoftSkills.
     * @example
     * // Update one SoftSkills
     * const softSkills = await prisma.softSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftSkillsUpdateArgs>(args: SelectSubset<T, SoftSkillsUpdateArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SoftSkills.
     * @param {SoftSkillsDeleteManyArgs} args - Arguments to filter SoftSkills to delete.
     * @example
     * // Delete a few SoftSkills
     * const { count } = await prisma.softSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftSkillsDeleteManyArgs>(args?: SelectSubset<T, SoftSkillsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoftSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoftSkills
     * const softSkills = await prisma.softSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftSkillsUpdateManyArgs>(args: SelectSubset<T, SoftSkillsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SoftSkills.
     * @param {SoftSkillsUpsertArgs} args - Arguments to update or create a SoftSkills.
     * @example
     * // Update or create a SoftSkills
     * const softSkills = await prisma.softSkills.upsert({
     *   create: {
     *     // ... data to create a SoftSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoftSkills we want to update
     *   }
     * })
     */
    upsert<T extends SoftSkillsUpsertArgs>(args: SelectSubset<T, SoftSkillsUpsertArgs<ExtArgs>>): Prisma__SoftSkillsClient<$Result.GetResult<Prisma.$SoftSkillsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SoftSkills that matches the filter.
     * @param {SoftSkillsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const softSkills = await prisma.softSkills.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SoftSkillsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SoftSkills.
     * @param {SoftSkillsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const softSkills = await prisma.softSkills.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SoftSkillsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SoftSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsCountArgs} args - Arguments to filter SoftSkills to count.
     * @example
     * // Count the number of SoftSkills
     * const count = await prisma.softSkills.count({
     *   where: {
     *     // ... the filter for the SoftSkills we want to count
     *   }
     * })
    **/
    count<T extends SoftSkillsCountArgs>(
      args?: Subset<T, SoftSkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoftSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftSkillsAggregateArgs>(args: Subset<T, SoftSkillsAggregateArgs>): Prisma.PrismaPromise<GetSoftSkillsAggregateType<T>>

    /**
     * Group by SoftSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftSkillsGroupByArgs['orderBy'] }
        : { orderBy?: SoftSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoftSkills model
   */
  readonly fields: SoftSkillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoftSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftSkillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoftSkills model
   */
  interface SoftSkillsFieldRefs {
    readonly id: FieldRef<"SoftSkills", 'String'>
    readonly userId: FieldRef<"SoftSkills", 'String'>
    readonly type: FieldRef<"SoftSkills", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * SoftSkills findUnique
   */
  export type SoftSkillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * Filter, which SoftSkills to fetch.
     */
    where: SoftSkillsWhereUniqueInput
  }

  /**
   * SoftSkills findUniqueOrThrow
   */
  export type SoftSkillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * Filter, which SoftSkills to fetch.
     */
    where: SoftSkillsWhereUniqueInput
  }

  /**
   * SoftSkills findFirst
   */
  export type SoftSkillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * Filter, which SoftSkills to fetch.
     */
    where?: SoftSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftSkills to fetch.
     */
    orderBy?: SoftSkillsOrderByWithRelationInput | SoftSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftSkills.
     */
    cursor?: SoftSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftSkills.
     */
    distinct?: SoftSkillsScalarFieldEnum | SoftSkillsScalarFieldEnum[]
  }

  /**
   * SoftSkills findFirstOrThrow
   */
  export type SoftSkillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * Filter, which SoftSkills to fetch.
     */
    where?: SoftSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftSkills to fetch.
     */
    orderBy?: SoftSkillsOrderByWithRelationInput | SoftSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftSkills.
     */
    cursor?: SoftSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftSkills.
     */
    distinct?: SoftSkillsScalarFieldEnum | SoftSkillsScalarFieldEnum[]
  }

  /**
   * SoftSkills findMany
   */
  export type SoftSkillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * Filter, which SoftSkills to fetch.
     */
    where?: SoftSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftSkills to fetch.
     */
    orderBy?: SoftSkillsOrderByWithRelationInput | SoftSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoftSkills.
     */
    cursor?: SoftSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftSkills.
     */
    skip?: number
    distinct?: SoftSkillsScalarFieldEnum | SoftSkillsScalarFieldEnum[]
  }

  /**
   * SoftSkills create
   */
  export type SoftSkillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * The data needed to create a SoftSkills.
     */
    data: XOR<SoftSkillsCreateInput, SoftSkillsUncheckedCreateInput>
  }

  /**
   * SoftSkills createMany
   */
  export type SoftSkillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoftSkills.
     */
    data: SoftSkillsCreateManyInput | SoftSkillsCreateManyInput[]
  }

  /**
   * SoftSkills update
   */
  export type SoftSkillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * The data needed to update a SoftSkills.
     */
    data: XOR<SoftSkillsUpdateInput, SoftSkillsUncheckedUpdateInput>
    /**
     * Choose, which SoftSkills to update.
     */
    where: SoftSkillsWhereUniqueInput
  }

  /**
   * SoftSkills updateMany
   */
  export type SoftSkillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoftSkills.
     */
    data: XOR<SoftSkillsUpdateManyMutationInput, SoftSkillsUncheckedUpdateManyInput>
    /**
     * Filter which SoftSkills to update
     */
    where?: SoftSkillsWhereInput
    /**
     * Limit how many SoftSkills to update.
     */
    limit?: number
  }

  /**
   * SoftSkills upsert
   */
  export type SoftSkillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * The filter to search for the SoftSkills to update in case it exists.
     */
    where: SoftSkillsWhereUniqueInput
    /**
     * In case the SoftSkills found by the `where` argument doesn't exist, create a new SoftSkills with this data.
     */
    create: XOR<SoftSkillsCreateInput, SoftSkillsUncheckedCreateInput>
    /**
     * In case the SoftSkills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftSkillsUpdateInput, SoftSkillsUncheckedUpdateInput>
  }

  /**
   * SoftSkills delete
   */
  export type SoftSkillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
    /**
     * Filter which SoftSkills to delete.
     */
    where: SoftSkillsWhereUniqueInput
  }

  /**
   * SoftSkills deleteMany
   */
  export type SoftSkillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftSkills to delete
     */
    where?: SoftSkillsWhereInput
    /**
     * Limit how many SoftSkills to delete.
     */
    limit?: number
  }

  /**
   * SoftSkills findRaw
   */
  export type SoftSkillsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SoftSkills aggregateRaw
   */
  export type SoftSkillsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SoftSkills without action
   */
  export type SoftSkillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftSkills
     */
    select?: SoftSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoftSkills
     */
    omit?: SoftSkillsOmit<ExtArgs> | null
  }


  /**
   * Model HardSkills
   */

  export type AggregateHardSkills = {
    _count: HardSkillsCountAggregateOutputType | null
    _min: HardSkillsMinAggregateOutputType | null
    _max: HardSkillsMaxAggregateOutputType | null
  }

  export type HardSkillsMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HardSkillsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HardSkillsCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    _all: number
  }


  export type HardSkillsMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HardSkillsMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HardSkillsCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    _all?: true
  }

  export type HardSkillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HardSkills to aggregate.
     */
    where?: HardSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardSkills to fetch.
     */
    orderBy?: HardSkillsOrderByWithRelationInput | HardSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HardSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HardSkills
    **/
    _count?: true | HardSkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HardSkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HardSkillsMaxAggregateInputType
  }

  export type GetHardSkillsAggregateType<T extends HardSkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateHardSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHardSkills[P]>
      : GetScalarType<T[P], AggregateHardSkills[P]>
  }




  export type HardSkillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardSkillsWhereInput
    orderBy?: HardSkillsOrderByWithAggregationInput | HardSkillsOrderByWithAggregationInput[]
    by: HardSkillsScalarFieldEnum[] | HardSkillsScalarFieldEnum
    having?: HardSkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HardSkillsCountAggregateInputType | true
    _min?: HardSkillsMinAggregateInputType
    _max?: HardSkillsMaxAggregateInputType
  }

  export type HardSkillsGroupByOutputType = {
    id: string
    userId: string
    type: string[]
    _count: HardSkillsCountAggregateOutputType | null
    _min: HardSkillsMinAggregateOutputType | null
    _max: HardSkillsMaxAggregateOutputType | null
  }

  type GetHardSkillsGroupByPayload<T extends HardSkillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HardSkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HardSkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HardSkillsGroupByOutputType[P]>
            : GetScalarType<T[P], HardSkillsGroupByOutputType[P]>
        }
      >
    >


  export type HardSkillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
  }, ExtArgs["result"]["hardSkills"]>



  export type HardSkillsSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
  }

  export type HardSkillsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type", ExtArgs["result"]["hardSkills"]>

  export type $HardSkillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HardSkills"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string[]
    }, ExtArgs["result"]["hardSkills"]>
    composites: {}
  }

  type HardSkillsGetPayload<S extends boolean | null | undefined | HardSkillsDefaultArgs> = $Result.GetResult<Prisma.$HardSkillsPayload, S>

  type HardSkillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HardSkillsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HardSkillsCountAggregateInputType | true
    }

  export interface HardSkillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HardSkills'], meta: { name: 'HardSkills' } }
    /**
     * Find zero or one HardSkills that matches the filter.
     * @param {HardSkillsFindUniqueArgs} args - Arguments to find a HardSkills
     * @example
     * // Get one HardSkills
     * const hardSkills = await prisma.hardSkills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HardSkillsFindUniqueArgs>(args: SelectSubset<T, HardSkillsFindUniqueArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HardSkills that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HardSkillsFindUniqueOrThrowArgs} args - Arguments to find a HardSkills
     * @example
     * // Get one HardSkills
     * const hardSkills = await prisma.hardSkills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HardSkillsFindUniqueOrThrowArgs>(args: SelectSubset<T, HardSkillsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HardSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsFindFirstArgs} args - Arguments to find a HardSkills
     * @example
     * // Get one HardSkills
     * const hardSkills = await prisma.hardSkills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HardSkillsFindFirstArgs>(args?: SelectSubset<T, HardSkillsFindFirstArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HardSkills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsFindFirstOrThrowArgs} args - Arguments to find a HardSkills
     * @example
     * // Get one HardSkills
     * const hardSkills = await prisma.hardSkills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HardSkillsFindFirstOrThrowArgs>(args?: SelectSubset<T, HardSkillsFindFirstOrThrowArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HardSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HardSkills
     * const hardSkills = await prisma.hardSkills.findMany()
     * 
     * // Get first 10 HardSkills
     * const hardSkills = await prisma.hardSkills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hardSkillsWithIdOnly = await prisma.hardSkills.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HardSkillsFindManyArgs>(args?: SelectSubset<T, HardSkillsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HardSkills.
     * @param {HardSkillsCreateArgs} args - Arguments to create a HardSkills.
     * @example
     * // Create one HardSkills
     * const HardSkills = await prisma.hardSkills.create({
     *   data: {
     *     // ... data to create a HardSkills
     *   }
     * })
     * 
     */
    create<T extends HardSkillsCreateArgs>(args: SelectSubset<T, HardSkillsCreateArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HardSkills.
     * @param {HardSkillsCreateManyArgs} args - Arguments to create many HardSkills.
     * @example
     * // Create many HardSkills
     * const hardSkills = await prisma.hardSkills.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HardSkillsCreateManyArgs>(args?: SelectSubset<T, HardSkillsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HardSkills.
     * @param {HardSkillsDeleteArgs} args - Arguments to delete one HardSkills.
     * @example
     * // Delete one HardSkills
     * const HardSkills = await prisma.hardSkills.delete({
     *   where: {
     *     // ... filter to delete one HardSkills
     *   }
     * })
     * 
     */
    delete<T extends HardSkillsDeleteArgs>(args: SelectSubset<T, HardSkillsDeleteArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HardSkills.
     * @param {HardSkillsUpdateArgs} args - Arguments to update one HardSkills.
     * @example
     * // Update one HardSkills
     * const hardSkills = await prisma.hardSkills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HardSkillsUpdateArgs>(args: SelectSubset<T, HardSkillsUpdateArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HardSkills.
     * @param {HardSkillsDeleteManyArgs} args - Arguments to filter HardSkills to delete.
     * @example
     * // Delete a few HardSkills
     * const { count } = await prisma.hardSkills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HardSkillsDeleteManyArgs>(args?: SelectSubset<T, HardSkillsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HardSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HardSkills
     * const hardSkills = await prisma.hardSkills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HardSkillsUpdateManyArgs>(args: SelectSubset<T, HardSkillsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HardSkills.
     * @param {HardSkillsUpsertArgs} args - Arguments to update or create a HardSkills.
     * @example
     * // Update or create a HardSkills
     * const hardSkills = await prisma.hardSkills.upsert({
     *   create: {
     *     // ... data to create a HardSkills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HardSkills we want to update
     *   }
     * })
     */
    upsert<T extends HardSkillsUpsertArgs>(args: SelectSubset<T, HardSkillsUpsertArgs<ExtArgs>>): Prisma__HardSkillsClient<$Result.GetResult<Prisma.$HardSkillsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HardSkills that matches the filter.
     * @param {HardSkillsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const hardSkills = await prisma.hardSkills.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: HardSkillsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a HardSkills.
     * @param {HardSkillsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const hardSkills = await prisma.hardSkills.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: HardSkillsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of HardSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsCountArgs} args - Arguments to filter HardSkills to count.
     * @example
     * // Count the number of HardSkills
     * const count = await prisma.hardSkills.count({
     *   where: {
     *     // ... the filter for the HardSkills we want to count
     *   }
     * })
    **/
    count<T extends HardSkillsCountArgs>(
      args?: Subset<T, HardSkillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HardSkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HardSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HardSkillsAggregateArgs>(args: Subset<T, HardSkillsAggregateArgs>): Prisma.PrismaPromise<GetHardSkillsAggregateType<T>>

    /**
     * Group by HardSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HardSkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HardSkillsGroupByArgs['orderBy'] }
        : { orderBy?: HardSkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HardSkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHardSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HardSkills model
   */
  readonly fields: HardSkillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HardSkills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HardSkillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HardSkills model
   */
  interface HardSkillsFieldRefs {
    readonly id: FieldRef<"HardSkills", 'String'>
    readonly userId: FieldRef<"HardSkills", 'String'>
    readonly type: FieldRef<"HardSkills", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * HardSkills findUnique
   */
  export type HardSkillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * Filter, which HardSkills to fetch.
     */
    where: HardSkillsWhereUniqueInput
  }

  /**
   * HardSkills findUniqueOrThrow
   */
  export type HardSkillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * Filter, which HardSkills to fetch.
     */
    where: HardSkillsWhereUniqueInput
  }

  /**
   * HardSkills findFirst
   */
  export type HardSkillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * Filter, which HardSkills to fetch.
     */
    where?: HardSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardSkills to fetch.
     */
    orderBy?: HardSkillsOrderByWithRelationInput | HardSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HardSkills.
     */
    cursor?: HardSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HardSkills.
     */
    distinct?: HardSkillsScalarFieldEnum | HardSkillsScalarFieldEnum[]
  }

  /**
   * HardSkills findFirstOrThrow
   */
  export type HardSkillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * Filter, which HardSkills to fetch.
     */
    where?: HardSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardSkills to fetch.
     */
    orderBy?: HardSkillsOrderByWithRelationInput | HardSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HardSkills.
     */
    cursor?: HardSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HardSkills.
     */
    distinct?: HardSkillsScalarFieldEnum | HardSkillsScalarFieldEnum[]
  }

  /**
   * HardSkills findMany
   */
  export type HardSkillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * Filter, which HardSkills to fetch.
     */
    where?: HardSkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardSkills to fetch.
     */
    orderBy?: HardSkillsOrderByWithRelationInput | HardSkillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HardSkills.
     */
    cursor?: HardSkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardSkills.
     */
    skip?: number
    distinct?: HardSkillsScalarFieldEnum | HardSkillsScalarFieldEnum[]
  }

  /**
   * HardSkills create
   */
  export type HardSkillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * The data needed to create a HardSkills.
     */
    data: XOR<HardSkillsCreateInput, HardSkillsUncheckedCreateInput>
  }

  /**
   * HardSkills createMany
   */
  export type HardSkillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HardSkills.
     */
    data: HardSkillsCreateManyInput | HardSkillsCreateManyInput[]
  }

  /**
   * HardSkills update
   */
  export type HardSkillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * The data needed to update a HardSkills.
     */
    data: XOR<HardSkillsUpdateInput, HardSkillsUncheckedUpdateInput>
    /**
     * Choose, which HardSkills to update.
     */
    where: HardSkillsWhereUniqueInput
  }

  /**
   * HardSkills updateMany
   */
  export type HardSkillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HardSkills.
     */
    data: XOR<HardSkillsUpdateManyMutationInput, HardSkillsUncheckedUpdateManyInput>
    /**
     * Filter which HardSkills to update
     */
    where?: HardSkillsWhereInput
    /**
     * Limit how many HardSkills to update.
     */
    limit?: number
  }

  /**
   * HardSkills upsert
   */
  export type HardSkillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * The filter to search for the HardSkills to update in case it exists.
     */
    where: HardSkillsWhereUniqueInput
    /**
     * In case the HardSkills found by the `where` argument doesn't exist, create a new HardSkills with this data.
     */
    create: XOR<HardSkillsCreateInput, HardSkillsUncheckedCreateInput>
    /**
     * In case the HardSkills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HardSkillsUpdateInput, HardSkillsUncheckedUpdateInput>
  }

  /**
   * HardSkills delete
   */
  export type HardSkillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
    /**
     * Filter which HardSkills to delete.
     */
    where: HardSkillsWhereUniqueInput
  }

  /**
   * HardSkills deleteMany
   */
  export type HardSkillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HardSkills to delete
     */
    where?: HardSkillsWhereInput
    /**
     * Limit how many HardSkills to delete.
     */
    limit?: number
  }

  /**
   * HardSkills findRaw
   */
  export type HardSkillsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * HardSkills aggregateRaw
   */
  export type HardSkillsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * HardSkills without action
   */
  export type HardSkillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardSkills
     */
    select?: HardSkillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HardSkills
     */
    omit?: HardSkillsOmit<ExtArgs> | null
  }


  /**
   * Model Certificates
   */

  export type AggregateCertificates = {
    _count: CertificatesCountAggregateOutputType | null
    _min: CertificatesMinAggregateOutputType | null
    _max: CertificatesMaxAggregateOutputType | null
  }

  export type CertificatesMinAggregateOutputType = {
    id: string | null
    userId: string | null
    certificate_title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type CertificatesMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    certificate_title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type CertificatesCountAggregateOutputType = {
    id: number
    userId: number
    certificate_title: number
    description: number
    startDate: number
    endDate: number
    _all: number
  }


  export type CertificatesMinAggregateInputType = {
    id?: true
    userId?: true
    certificate_title?: true
    description?: true
    startDate?: true
    endDate?: true
  }

  export type CertificatesMaxAggregateInputType = {
    id?: true
    userId?: true
    certificate_title?: true
    description?: true
    startDate?: true
    endDate?: true
  }

  export type CertificatesCountAggregateInputType = {
    id?: true
    userId?: true
    certificate_title?: true
    description?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type CertificatesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to aggregate.
     */
    where?: CertificatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificatesOrderByWithRelationInput | CertificatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificatesMaxAggregateInputType
  }

  export type GetCertificatesAggregateType<T extends CertificatesAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificates[P]>
      : GetScalarType<T[P], AggregateCertificates[P]>
  }




  export type CertificatesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificatesWhereInput
    orderBy?: CertificatesOrderByWithAggregationInput | CertificatesOrderByWithAggregationInput[]
    by: CertificatesScalarFieldEnum[] | CertificatesScalarFieldEnum
    having?: CertificatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificatesCountAggregateInputType | true
    _min?: CertificatesMinAggregateInputType
    _max?: CertificatesMaxAggregateInputType
  }

  export type CertificatesGroupByOutputType = {
    id: string
    userId: string
    certificate_title: string
    description: string | null
    startDate: Date
    endDate: Date | null
    _count: CertificatesCountAggregateOutputType | null
    _min: CertificatesMinAggregateOutputType | null
    _max: CertificatesMaxAggregateOutputType | null
  }

  type GetCertificatesGroupByPayload<T extends CertificatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificatesGroupByOutputType[P]>
            : GetScalarType<T[P], CertificatesGroupByOutputType[P]>
        }
      >
    >


  export type CertificatesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    certificate_title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
  }, ExtArgs["result"]["certificates"]>



  export type CertificatesSelectScalar = {
    id?: boolean
    userId?: boolean
    certificate_title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type CertificatesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "certificate_title" | "description" | "startDate" | "endDate", ExtArgs["result"]["certificates"]>

  export type $CertificatesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certificates"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      certificate_title: string
      description: string | null
      startDate: Date
      endDate: Date | null
    }, ExtArgs["result"]["certificates"]>
    composites: {}
  }

  type CertificatesGetPayload<S extends boolean | null | undefined | CertificatesDefaultArgs> = $Result.GetResult<Prisma.$CertificatesPayload, S>

  type CertificatesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificatesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificatesCountAggregateInputType | true
    }

  export interface CertificatesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificates'], meta: { name: 'Certificates' } }
    /**
     * Find zero or one Certificates that matches the filter.
     * @param {CertificatesFindUniqueArgs} args - Arguments to find a Certificates
     * @example
     * // Get one Certificates
     * const certificates = await prisma.certificates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificatesFindUniqueArgs>(args: SelectSubset<T, CertificatesFindUniqueArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Certificates that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificatesFindUniqueOrThrowArgs} args - Arguments to find a Certificates
     * @example
     * // Get one Certificates
     * const certificates = await prisma.certificates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificatesFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificatesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesFindFirstArgs} args - Arguments to find a Certificates
     * @example
     * // Get one Certificates
     * const certificates = await prisma.certificates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificatesFindFirstArgs>(args?: SelectSubset<T, CertificatesFindFirstArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificates that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesFindFirstOrThrowArgs} args - Arguments to find a Certificates
     * @example
     * // Get one Certificates
     * const certificates = await prisma.certificates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificatesFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificatesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificates.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificatesWithIdOnly = await prisma.certificates.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificatesFindManyArgs>(args?: SelectSubset<T, CertificatesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Certificates.
     * @param {CertificatesCreateArgs} args - Arguments to create a Certificates.
     * @example
     * // Create one Certificates
     * const Certificates = await prisma.certificates.create({
     *   data: {
     *     // ... data to create a Certificates
     *   }
     * })
     * 
     */
    create<T extends CertificatesCreateArgs>(args: SelectSubset<T, CertificatesCreateArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Certificates.
     * @param {CertificatesCreateManyArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificates = await prisma.certificates.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificatesCreateManyArgs>(args?: SelectSubset<T, CertificatesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Certificates.
     * @param {CertificatesDeleteArgs} args - Arguments to delete one Certificates.
     * @example
     * // Delete one Certificates
     * const Certificates = await prisma.certificates.delete({
     *   where: {
     *     // ... filter to delete one Certificates
     *   }
     * })
     * 
     */
    delete<T extends CertificatesDeleteArgs>(args: SelectSubset<T, CertificatesDeleteArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Certificates.
     * @param {CertificatesUpdateArgs} args - Arguments to update one Certificates.
     * @example
     * // Update one Certificates
     * const certificates = await prisma.certificates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificatesUpdateArgs>(args: SelectSubset<T, CertificatesUpdateArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Certificates.
     * @param {CertificatesDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificatesDeleteManyArgs>(args?: SelectSubset<T, CertificatesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificates = await prisma.certificates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificatesUpdateManyArgs>(args: SelectSubset<T, CertificatesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Certificates.
     * @param {CertificatesUpsertArgs} args - Arguments to update or create a Certificates.
     * @example
     * // Update or create a Certificates
     * const certificates = await prisma.certificates.upsert({
     *   create: {
     *     // ... data to create a Certificates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificates we want to update
     *   }
     * })
     */
    upsert<T extends CertificatesUpsertArgs>(args: SelectSubset<T, CertificatesUpsertArgs<ExtArgs>>): Prisma__CertificatesClient<$Result.GetResult<Prisma.$CertificatesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * @param {CertificatesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const certificates = await prisma.certificates.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: CertificatesFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Certificates.
     * @param {CertificatesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const certificates = await prisma.certificates.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CertificatesAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificates.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificatesCountArgs>(
      args?: Subset<T, CertificatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificatesAggregateArgs>(args: Subset<T, CertificatesAggregateArgs>): Prisma.PrismaPromise<GetCertificatesAggregateType<T>>

    /**
     * Group by Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificatesGroupByArgs['orderBy'] }
        : { orderBy?: CertificatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certificates model
   */
  readonly fields: CertificatesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificatesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certificates model
   */
  interface CertificatesFieldRefs {
    readonly id: FieldRef<"Certificates", 'String'>
    readonly userId: FieldRef<"Certificates", 'String'>
    readonly certificate_title: FieldRef<"Certificates", 'String'>
    readonly description: FieldRef<"Certificates", 'String'>
    readonly startDate: FieldRef<"Certificates", 'DateTime'>
    readonly endDate: FieldRef<"Certificates", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Certificates findUnique
   */
  export type CertificatesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where: CertificatesWhereUniqueInput
  }

  /**
   * Certificates findUniqueOrThrow
   */
  export type CertificatesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where: CertificatesWhereUniqueInput
  }

  /**
   * Certificates findFirst
   */
  export type CertificatesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificatesOrderByWithRelationInput | CertificatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificatesScalarFieldEnum | CertificatesScalarFieldEnum[]
  }

  /**
   * Certificates findFirstOrThrow
   */
  export type CertificatesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificatesOrderByWithRelationInput | CertificatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificatesScalarFieldEnum | CertificatesScalarFieldEnum[]
  }

  /**
   * Certificates findMany
   */
  export type CertificatesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificatesOrderByWithRelationInput | CertificatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     */
    cursor?: CertificatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    distinct?: CertificatesScalarFieldEnum | CertificatesScalarFieldEnum[]
  }

  /**
   * Certificates create
   */
  export type CertificatesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * The data needed to create a Certificates.
     */
    data: XOR<CertificatesCreateInput, CertificatesUncheckedCreateInput>
  }

  /**
   * Certificates createMany
   */
  export type CertificatesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certificates.
     */
    data: CertificatesCreateManyInput | CertificatesCreateManyInput[]
  }

  /**
   * Certificates update
   */
  export type CertificatesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * The data needed to update a Certificates.
     */
    data: XOR<CertificatesUpdateInput, CertificatesUncheckedUpdateInput>
    /**
     * Choose, which Certificates to update.
     */
    where: CertificatesWhereUniqueInput
  }

  /**
   * Certificates updateMany
   */
  export type CertificatesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificatesUpdateManyMutationInput, CertificatesUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificatesWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
  }

  /**
   * Certificates upsert
   */
  export type CertificatesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * The filter to search for the Certificates to update in case it exists.
     */
    where: CertificatesWhereUniqueInput
    /**
     * In case the Certificates found by the `where` argument doesn't exist, create a new Certificates with this data.
     */
    create: XOR<CertificatesCreateInput, CertificatesUncheckedCreateInput>
    /**
     * In case the Certificates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificatesUpdateInput, CertificatesUncheckedUpdateInput>
  }

  /**
   * Certificates delete
   */
  export type CertificatesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
    /**
     * Filter which Certificates to delete.
     */
    where: CertificatesWhereUniqueInput
  }

  /**
   * Certificates deleteMany
   */
  export type CertificatesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to delete
     */
    where?: CertificatesWhereInput
    /**
     * Limit how many Certificates to delete.
     */
    limit?: number
  }

  /**
   * Certificates findRaw
   */
  export type CertificatesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Certificates aggregateRaw
   */
  export type CertificatesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Certificates without action
   */
  export type CertificatesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificates
     */
    select?: CertificatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificates
     */
    omit?: CertificatesOmit<ExtArgs> | null
  }


  /**
   * Model Language
   */

  export type AggregateLanguage = {
    _count: LanguageCountAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  export type LanguageMinAggregateOutputType = {
    id: string | null
    userId: string | null
    level: string | null
    language: string | null
  }

  export type LanguageMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    level: string | null
    language: string | null
  }

  export type LanguageCountAggregateOutputType = {
    id: number
    userId: number
    level: number
    language: number
    _all: number
  }


  export type LanguageMinAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    language?: true
  }

  export type LanguageMaxAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    language?: true
  }

  export type LanguageCountAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    language?: true
    _all?: true
  }

  export type LanguageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Language to aggregate.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageMaxAggregateInputType
  }

  export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguage[P]>
      : GetScalarType<T[P], AggregateLanguage[P]>
  }




  export type LanguageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithAggregationInput | LanguageOrderByWithAggregationInput[]
    by: LanguageScalarFieldEnum[] | LanguageScalarFieldEnum
    having?: LanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageCountAggregateInputType | true
    _min?: LanguageMinAggregateInputType
    _max?: LanguageMaxAggregateInputType
  }

  export type LanguageGroupByOutputType = {
    id: string
    userId: string
    level: string
    language: string
    _count: LanguageCountAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  type GetLanguageGroupByPayload<T extends LanguageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageGroupByOutputType[P]>
        }
      >
    >


  export type LanguageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    language?: boolean
  }, ExtArgs["result"]["language"]>



  export type LanguageSelectScalar = {
    id?: boolean
    userId?: boolean
    level?: boolean
    language?: boolean
  }

  export type LanguageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "level" | "language", ExtArgs["result"]["language"]>

  export type $LanguagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Language"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      level: string
      language: string
    }, ExtArgs["result"]["language"]>
    composites: {}
  }

  type LanguageGetPayload<S extends boolean | null | undefined | LanguageDefaultArgs> = $Result.GetResult<Prisma.$LanguagePayload, S>

  type LanguageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageCountAggregateInputType | true
    }

  export interface LanguageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Language'], meta: { name: 'Language' } }
    /**
     * Find zero or one Language that matches the filter.
     * @param {LanguageFindUniqueArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageFindUniqueArgs>(args: SelectSubset<T, LanguageFindUniqueArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Language that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageFindUniqueOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageFindFirstArgs>(args?: SelectSubset<T, LanguageFindFirstArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.language.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.language.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageFindManyArgs>(args?: SelectSubset<T, LanguageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Language.
     * @param {LanguageCreateArgs} args - Arguments to create a Language.
     * @example
     * // Create one Language
     * const Language = await prisma.language.create({
     *   data: {
     *     // ... data to create a Language
     *   }
     * })
     * 
     */
    create<T extends LanguageCreateArgs>(args: SelectSubset<T, LanguageCreateArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Languages.
     * @param {LanguageCreateManyArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const language = await prisma.language.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageCreateManyArgs>(args?: SelectSubset<T, LanguageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Language.
     * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
     * @example
     * // Delete one Language
     * const Language = await prisma.language.delete({
     *   where: {
     *     // ... filter to delete one Language
     *   }
     * })
     * 
     */
    delete<T extends LanguageDeleteArgs>(args: SelectSubset<T, LanguageDeleteArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Language.
     * @param {LanguageUpdateArgs} args - Arguments to update one Language.
     * @example
     * // Update one Language
     * const language = await prisma.language.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageUpdateArgs>(args: SelectSubset<T, LanguageUpdateArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Languages.
     * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.language.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageDeleteManyArgs>(args?: SelectSubset<T, LanguageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageUpdateManyArgs>(args: SelectSubset<T, LanguageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Language.
     * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
     * @example
     * // Update or create a Language
     * const language = await prisma.language.upsert({
     *   create: {
     *     // ... data to create a Language
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Language we want to update
     *   }
     * })
     */
    upsert<T extends LanguageUpsertArgs>(args: SelectSubset<T, LanguageUpsertArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Languages that matches the filter.
     * @param {LanguageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const language = await prisma.language.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: LanguageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Language.
     * @param {LanguageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const language = await prisma.language.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: LanguageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.language.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguageCountArgs>(
      args?: Subset<T, LanguageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAggregateArgs>(args: Subset<T, LanguageAggregateArgs>): Prisma.PrismaPromise<GetLanguageAggregateType<T>>

    /**
     * Group by Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageGroupByArgs['orderBy'] }
        : { orderBy?: LanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Language model
   */
  readonly fields: LanguageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Language.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Language model
   */
  interface LanguageFieldRefs {
    readonly id: FieldRef<"Language", 'String'>
    readonly userId: FieldRef<"Language", 'String'>
    readonly level: FieldRef<"Language", 'String'>
    readonly language: FieldRef<"Language", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Language findUnique
   */
  export type LanguageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language findUniqueOrThrow
   */
  export type LanguageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language findFirst
   */
  export type LanguageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language findFirstOrThrow
   */
  export type LanguageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language findMany
   */
  export type LanguageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language create
   */
  export type LanguageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * The data needed to create a Language.
     */
    data: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
  }

  /**
   * Language createMany
   */
  export type LanguageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguageCreateManyInput | LanguageCreateManyInput[]
  }

  /**
   * Language update
   */
  export type LanguageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * The data needed to update a Language.
     */
    data: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
    /**
     * Choose, which Language to update.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language updateMany
   */
  export type LanguageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to update.
     */
    limit?: number
  }

  /**
   * Language upsert
   */
  export type LanguageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * The filter to search for the Language to update in case it exists.
     */
    where: LanguageWhereUniqueInput
    /**
     * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
     */
    create: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
    /**
     * In case the Language was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
  }

  /**
   * Language delete
   */
  export type LanguageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Filter which Language to delete.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language deleteMany
   */
  export type LanguageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to delete.
     */
    limit?: number
  }

  /**
   * Language findRaw
   */
  export type LanguageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Language aggregateRaw
   */
  export type LanguageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Language without action
   */
  export type LanguageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
  }


  /**
   * Model SocialMedia
   */

  export type AggregateSocialMedia = {
    _count: SocialMediaCountAggregateOutputType | null
    _min: SocialMediaMinAggregateOutputType | null
    _max: SocialMediaMaxAggregateOutputType | null
  }

  export type SocialMediaMinAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    profile_link: string | null
  }

  export type SocialMediaMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    profile_link: string | null
  }

  export type SocialMediaCountAggregateOutputType = {
    id: number
    userId: number
    platform: number
    profile_link: number
    _all: number
  }


  export type SocialMediaMinAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    profile_link?: true
  }

  export type SocialMediaMaxAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    profile_link?: true
  }

  export type SocialMediaCountAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    profile_link?: true
    _all?: true
  }

  export type SocialMediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialMedia to aggregate.
     */
    where?: SocialMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediaOrderByWithRelationInput | SocialMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialMedias
    **/
    _count?: true | SocialMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialMediaMaxAggregateInputType
  }

  export type GetSocialMediaAggregateType<T extends SocialMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialMedia[P]>
      : GetScalarType<T[P], AggregateSocialMedia[P]>
  }




  export type SocialMediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialMediaWhereInput
    orderBy?: SocialMediaOrderByWithAggregationInput | SocialMediaOrderByWithAggregationInput[]
    by: SocialMediaScalarFieldEnum[] | SocialMediaScalarFieldEnum
    having?: SocialMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialMediaCountAggregateInputType | true
    _min?: SocialMediaMinAggregateInputType
    _max?: SocialMediaMaxAggregateInputType
  }

  export type SocialMediaGroupByOutputType = {
    id: string
    userId: string
    platform: string
    profile_link: string
    _count: SocialMediaCountAggregateOutputType | null
    _min: SocialMediaMinAggregateOutputType | null
    _max: SocialMediaMaxAggregateOutputType | null
  }

  type GetSocialMediaGroupByPayload<T extends SocialMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialMediaGroupByOutputType[P]>
            : GetScalarType<T[P], SocialMediaGroupByOutputType[P]>
        }
      >
    >


  export type SocialMediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    profile_link?: boolean
  }, ExtArgs["result"]["socialMedia"]>



  export type SocialMediaSelectScalar = {
    id?: boolean
    userId?: boolean
    platform?: boolean
    profile_link?: boolean
  }

  export type SocialMediaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "platform" | "profile_link", ExtArgs["result"]["socialMedia"]>

  export type $SocialMediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialMedia"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      platform: string
      profile_link: string
    }, ExtArgs["result"]["socialMedia"]>
    composites: {}
  }

  type SocialMediaGetPayload<S extends boolean | null | undefined | SocialMediaDefaultArgs> = $Result.GetResult<Prisma.$SocialMediaPayload, S>

  type SocialMediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SocialMediaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SocialMediaCountAggregateInputType | true
    }

  export interface SocialMediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialMedia'], meta: { name: 'SocialMedia' } }
    /**
     * Find zero or one SocialMedia that matches the filter.
     * @param {SocialMediaFindUniqueArgs} args - Arguments to find a SocialMedia
     * @example
     * // Get one SocialMedia
     * const socialMedia = await prisma.socialMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SocialMediaFindUniqueArgs>(args: SelectSubset<T, SocialMediaFindUniqueArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SocialMedia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SocialMediaFindUniqueOrThrowArgs} args - Arguments to find a SocialMedia
     * @example
     * // Get one SocialMedia
     * const socialMedia = await prisma.socialMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SocialMediaFindUniqueOrThrowArgs>(args: SelectSubset<T, SocialMediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SocialMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaFindFirstArgs} args - Arguments to find a SocialMedia
     * @example
     * // Get one SocialMedia
     * const socialMedia = await prisma.socialMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SocialMediaFindFirstArgs>(args?: SelectSubset<T, SocialMediaFindFirstArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SocialMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaFindFirstOrThrowArgs} args - Arguments to find a SocialMedia
     * @example
     * // Get one SocialMedia
     * const socialMedia = await prisma.socialMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SocialMediaFindFirstOrThrowArgs>(args?: SelectSubset<T, SocialMediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SocialMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialMedias
     * const socialMedias = await prisma.socialMedia.findMany()
     * 
     * // Get first 10 SocialMedias
     * const socialMedias = await prisma.socialMedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialMediaWithIdOnly = await prisma.socialMedia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SocialMediaFindManyArgs>(args?: SelectSubset<T, SocialMediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SocialMedia.
     * @param {SocialMediaCreateArgs} args - Arguments to create a SocialMedia.
     * @example
     * // Create one SocialMedia
     * const SocialMedia = await prisma.socialMedia.create({
     *   data: {
     *     // ... data to create a SocialMedia
     *   }
     * })
     * 
     */
    create<T extends SocialMediaCreateArgs>(args: SelectSubset<T, SocialMediaCreateArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SocialMedias.
     * @param {SocialMediaCreateManyArgs} args - Arguments to create many SocialMedias.
     * @example
     * // Create many SocialMedias
     * const socialMedia = await prisma.socialMedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SocialMediaCreateManyArgs>(args?: SelectSubset<T, SocialMediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SocialMedia.
     * @param {SocialMediaDeleteArgs} args - Arguments to delete one SocialMedia.
     * @example
     * // Delete one SocialMedia
     * const SocialMedia = await prisma.socialMedia.delete({
     *   where: {
     *     // ... filter to delete one SocialMedia
     *   }
     * })
     * 
     */
    delete<T extends SocialMediaDeleteArgs>(args: SelectSubset<T, SocialMediaDeleteArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SocialMedia.
     * @param {SocialMediaUpdateArgs} args - Arguments to update one SocialMedia.
     * @example
     * // Update one SocialMedia
     * const socialMedia = await prisma.socialMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SocialMediaUpdateArgs>(args: SelectSubset<T, SocialMediaUpdateArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SocialMedias.
     * @param {SocialMediaDeleteManyArgs} args - Arguments to filter SocialMedias to delete.
     * @example
     * // Delete a few SocialMedias
     * const { count } = await prisma.socialMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SocialMediaDeleteManyArgs>(args?: SelectSubset<T, SocialMediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialMedias
     * const socialMedia = await prisma.socialMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SocialMediaUpdateManyArgs>(args: SelectSubset<T, SocialMediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialMedia.
     * @param {SocialMediaUpsertArgs} args - Arguments to update or create a SocialMedia.
     * @example
     * // Update or create a SocialMedia
     * const socialMedia = await prisma.socialMedia.upsert({
     *   create: {
     *     // ... data to create a SocialMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialMedia we want to update
     *   }
     * })
     */
    upsert<T extends SocialMediaUpsertArgs>(args: SelectSubset<T, SocialMediaUpsertArgs<ExtArgs>>): Prisma__SocialMediaClient<$Result.GetResult<Prisma.$SocialMediaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SocialMedias that matches the filter.
     * @param {SocialMediaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const socialMedia = await prisma.socialMedia.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SocialMediaFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SocialMedia.
     * @param {SocialMediaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const socialMedia = await prisma.socialMedia.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SocialMediaAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SocialMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaCountArgs} args - Arguments to filter SocialMedias to count.
     * @example
     * // Count the number of SocialMedias
     * const count = await prisma.socialMedia.count({
     *   where: {
     *     // ... the filter for the SocialMedias we want to count
     *   }
     * })
    **/
    count<T extends SocialMediaCountArgs>(
      args?: Subset<T, SocialMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialMediaAggregateArgs>(args: Subset<T, SocialMediaAggregateArgs>): Prisma.PrismaPromise<GetSocialMediaAggregateType<T>>

    /**
     * Group by SocialMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialMediaGroupByArgs['orderBy'] }
        : { orderBy?: SocialMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialMedia model
   */
  readonly fields: SocialMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialMediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SocialMedia model
   */
  interface SocialMediaFieldRefs {
    readonly id: FieldRef<"SocialMedia", 'String'>
    readonly userId: FieldRef<"SocialMedia", 'String'>
    readonly platform: FieldRef<"SocialMedia", 'String'>
    readonly profile_link: FieldRef<"SocialMedia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SocialMedia findUnique
   */
  export type SocialMediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * Filter, which SocialMedia to fetch.
     */
    where: SocialMediaWhereUniqueInput
  }

  /**
   * SocialMedia findUniqueOrThrow
   */
  export type SocialMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * Filter, which SocialMedia to fetch.
     */
    where: SocialMediaWhereUniqueInput
  }

  /**
   * SocialMedia findFirst
   */
  export type SocialMediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * Filter, which SocialMedia to fetch.
     */
    where?: SocialMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediaOrderByWithRelationInput | SocialMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialMedias.
     */
    cursor?: SocialMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialMedias.
     */
    distinct?: SocialMediaScalarFieldEnum | SocialMediaScalarFieldEnum[]
  }

  /**
   * SocialMedia findFirstOrThrow
   */
  export type SocialMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * Filter, which SocialMedia to fetch.
     */
    where?: SocialMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediaOrderByWithRelationInput | SocialMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialMedias.
     */
    cursor?: SocialMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialMedias.
     */
    distinct?: SocialMediaScalarFieldEnum | SocialMediaScalarFieldEnum[]
  }

  /**
   * SocialMedia findMany
   */
  export type SocialMediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * Filter, which SocialMedias to fetch.
     */
    where?: SocialMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediaOrderByWithRelationInput | SocialMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialMedias.
     */
    cursor?: SocialMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    distinct?: SocialMediaScalarFieldEnum | SocialMediaScalarFieldEnum[]
  }

  /**
   * SocialMedia create
   */
  export type SocialMediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * The data needed to create a SocialMedia.
     */
    data: XOR<SocialMediaCreateInput, SocialMediaUncheckedCreateInput>
  }

  /**
   * SocialMedia createMany
   */
  export type SocialMediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialMedias.
     */
    data: SocialMediaCreateManyInput | SocialMediaCreateManyInput[]
  }

  /**
   * SocialMedia update
   */
  export type SocialMediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * The data needed to update a SocialMedia.
     */
    data: XOR<SocialMediaUpdateInput, SocialMediaUncheckedUpdateInput>
    /**
     * Choose, which SocialMedia to update.
     */
    where: SocialMediaWhereUniqueInput
  }

  /**
   * SocialMedia updateMany
   */
  export type SocialMediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialMedias.
     */
    data: XOR<SocialMediaUpdateManyMutationInput, SocialMediaUncheckedUpdateManyInput>
    /**
     * Filter which SocialMedias to update
     */
    where?: SocialMediaWhereInput
    /**
     * Limit how many SocialMedias to update.
     */
    limit?: number
  }

  /**
   * SocialMedia upsert
   */
  export type SocialMediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * The filter to search for the SocialMedia to update in case it exists.
     */
    where: SocialMediaWhereUniqueInput
    /**
     * In case the SocialMedia found by the `where` argument doesn't exist, create a new SocialMedia with this data.
     */
    create: XOR<SocialMediaCreateInput, SocialMediaUncheckedCreateInput>
    /**
     * In case the SocialMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialMediaUpdateInput, SocialMediaUncheckedUpdateInput>
  }

  /**
   * SocialMedia delete
   */
  export type SocialMediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
    /**
     * Filter which SocialMedia to delete.
     */
    where: SocialMediaWhereUniqueInput
  }

  /**
   * SocialMedia deleteMany
   */
  export type SocialMediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialMedias to delete
     */
    where?: SocialMediaWhereInput
    /**
     * Limit how many SocialMedias to delete.
     */
    limit?: number
  }

  /**
   * SocialMedia findRaw
   */
  export type SocialMediaFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SocialMedia aggregateRaw
   */
  export type SocialMediaAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SocialMedia without action
   */
  export type SocialMediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedia
     */
    select?: SocialMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialMedia
     */
    omit?: SocialMediaOmit<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    workers_number: number | null
    organized_year: number | null
  }

  export type CompanySumAggregateOutputType = {
    workers_number: number | null
    organized_year: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    location: string | null
    company_name: string | null
    role: $Enums.Role | null
    workers_number: number | null
    organized_year: number | null
    company_description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    location: string | null
    company_name: string | null
    role: $Enums.Role | null
    workers_number: number | null
    organized_year: number | null
    company_description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    email: number
    password: number
    phone_number: number
    location: number
    company_name: number
    role: number
    company_logo: number
    workers_number: number
    organized_year: number
    social_networks: number
    vacancies: number
    projects: number
    partners: number
    messages: number
    hard_skill_tests: number
    company_description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    workers_number?: true
    organized_year?: true
  }

  export type CompanySumAggregateInputType = {
    workers_number?: true
    organized_year?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone_number?: true
    location?: true
    company_name?: true
    role?: true
    workers_number?: true
    organized_year?: true
    company_description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone_number?: true
    location?: true
    company_name?: true
    role?: true
    workers_number?: true
    organized_year?: true
    company_description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone_number?: true
    location?: true
    company_name?: true
    role?: true
    company_logo?: true
    workers_number?: true
    organized_year?: true
    social_networks?: true
    vacancies?: true
    projects?: true
    partners?: true
    messages?: true
    hard_skill_tests?: true
    company_description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    email: string
    password: string
    phone_number: string
    location: string
    company_name: string
    role: $Enums.Role
    company_logo: string[]
    workers_number: number | null
    organized_year: number | null
    social_networks: string[]
    vacancies: string[]
    projects: string[]
    partners: string[]
    messages: string[]
    hard_skill_tests: string[]
    company_description: string | null
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    location?: boolean
    company_name?: boolean
    role?: boolean
    company_logo?: boolean
    workers_number?: boolean
    organized_year?: boolean
    social_networks?: boolean
    vacancies?: boolean
    projects?: boolean
    partners?: boolean
    messages?: boolean
    hard_skill_tests?: boolean
    company_description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["company"]>



  export type CompanySelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    location?: boolean
    company_name?: boolean
    role?: boolean
    company_logo?: boolean
    workers_number?: boolean
    organized_year?: boolean
    social_networks?: boolean
    vacancies?: boolean
    projects?: boolean
    partners?: boolean
    messages?: boolean
    hard_skill_tests?: boolean
    company_description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "phone_number" | "location" | "company_name" | "role" | "company_logo" | "workers_number" | "organized_year" | "social_networks" | "vacancies" | "projects" | "partners" | "messages" | "hard_skill_tests" | "company_description" | "createdAt" | "updatedAt", ExtArgs["result"]["company"]>

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      phone_number: string
      location: string
      company_name: string
      role: $Enums.Role
      company_logo: string[]
      workers_number: number | null
      organized_year: number | null
      social_networks: string[]
      vacancies: string[]
      projects: string[]
      partners: string[]
      messages: string[]
      hard_skill_tests: string[]
      company_description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * @param {CompanyFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const company = await prisma.company.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: CompanyFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Company.
     * @param {CompanyAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const company = await prisma.company.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CompanyAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly password: FieldRef<"Company", 'String'>
    readonly phone_number: FieldRef<"Company", 'String'>
    readonly location: FieldRef<"Company", 'String'>
    readonly company_name: FieldRef<"Company", 'String'>
    readonly role: FieldRef<"Company", 'Role'>
    readonly company_logo: FieldRef<"Company", 'String[]'>
    readonly workers_number: FieldRef<"Company", 'Int'>
    readonly organized_year: FieldRef<"Company", 'Int'>
    readonly social_networks: FieldRef<"Company", 'String[]'>
    readonly vacancies: FieldRef<"Company", 'String[]'>
    readonly projects: FieldRef<"Company", 'String[]'>
    readonly partners: FieldRef<"Company", 'String[]'>
    readonly messages: FieldRef<"Company", 'String[]'>
    readonly hard_skill_tests: FieldRef<"Company", 'String[]'>
    readonly company_description: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company findRaw
   */
  export type CompanyFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Company aggregateRaw
   */
  export type CompanyAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
  }


  /**
   * Model SocialNetworks
   */

  export type AggregateSocialNetworks = {
    _count: SocialNetworksCountAggregateOutputType | null
    _min: SocialNetworksMinAggregateOutputType | null
    _max: SocialNetworksMaxAggregateOutputType | null
  }

  export type SocialNetworksMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    platform: string | null
    profile_link: string | null
  }

  export type SocialNetworksMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    platform: string | null
    profile_link: string | null
  }

  export type SocialNetworksCountAggregateOutputType = {
    id: number
    company_id: number
    platform: number
    profile_link: number
    _all: number
  }


  export type SocialNetworksMinAggregateInputType = {
    id?: true
    company_id?: true
    platform?: true
    profile_link?: true
  }

  export type SocialNetworksMaxAggregateInputType = {
    id?: true
    company_id?: true
    platform?: true
    profile_link?: true
  }

  export type SocialNetworksCountAggregateInputType = {
    id?: true
    company_id?: true
    platform?: true
    profile_link?: true
    _all?: true
  }

  export type SocialNetworksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialNetworks to aggregate.
     */
    where?: SocialNetworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialNetworks to fetch.
     */
    orderBy?: SocialNetworksOrderByWithRelationInput | SocialNetworksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialNetworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialNetworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialNetworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialNetworks
    **/
    _count?: true | SocialNetworksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialNetworksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialNetworksMaxAggregateInputType
  }

  export type GetSocialNetworksAggregateType<T extends SocialNetworksAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialNetworks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialNetworks[P]>
      : GetScalarType<T[P], AggregateSocialNetworks[P]>
  }




  export type SocialNetworksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialNetworksWhereInput
    orderBy?: SocialNetworksOrderByWithAggregationInput | SocialNetworksOrderByWithAggregationInput[]
    by: SocialNetworksScalarFieldEnum[] | SocialNetworksScalarFieldEnum
    having?: SocialNetworksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialNetworksCountAggregateInputType | true
    _min?: SocialNetworksMinAggregateInputType
    _max?: SocialNetworksMaxAggregateInputType
  }

  export type SocialNetworksGroupByOutputType = {
    id: string
    company_id: string
    platform: string | null
    profile_link: string
    _count: SocialNetworksCountAggregateOutputType | null
    _min: SocialNetworksMinAggregateOutputType | null
    _max: SocialNetworksMaxAggregateOutputType | null
  }

  type GetSocialNetworksGroupByPayload<T extends SocialNetworksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialNetworksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialNetworksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialNetworksGroupByOutputType[P]>
            : GetScalarType<T[P], SocialNetworksGroupByOutputType[P]>
        }
      >
    >


  export type SocialNetworksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    platform?: boolean
    profile_link?: boolean
  }, ExtArgs["result"]["socialNetworks"]>



  export type SocialNetworksSelectScalar = {
    id?: boolean
    company_id?: boolean
    platform?: boolean
    profile_link?: boolean
  }

  export type SocialNetworksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "platform" | "profile_link", ExtArgs["result"]["socialNetworks"]>

  export type $SocialNetworksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialNetworks"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      platform: string | null
      profile_link: string
    }, ExtArgs["result"]["socialNetworks"]>
    composites: {}
  }

  type SocialNetworksGetPayload<S extends boolean | null | undefined | SocialNetworksDefaultArgs> = $Result.GetResult<Prisma.$SocialNetworksPayload, S>

  type SocialNetworksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SocialNetworksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SocialNetworksCountAggregateInputType | true
    }

  export interface SocialNetworksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialNetworks'], meta: { name: 'SocialNetworks' } }
    /**
     * Find zero or one SocialNetworks that matches the filter.
     * @param {SocialNetworksFindUniqueArgs} args - Arguments to find a SocialNetworks
     * @example
     * // Get one SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SocialNetworksFindUniqueArgs>(args: SelectSubset<T, SocialNetworksFindUniqueArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SocialNetworks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SocialNetworksFindUniqueOrThrowArgs} args - Arguments to find a SocialNetworks
     * @example
     * // Get one SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SocialNetworksFindUniqueOrThrowArgs>(args: SelectSubset<T, SocialNetworksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SocialNetworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksFindFirstArgs} args - Arguments to find a SocialNetworks
     * @example
     * // Get one SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SocialNetworksFindFirstArgs>(args?: SelectSubset<T, SocialNetworksFindFirstArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SocialNetworks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksFindFirstOrThrowArgs} args - Arguments to find a SocialNetworks
     * @example
     * // Get one SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SocialNetworksFindFirstOrThrowArgs>(args?: SelectSubset<T, SocialNetworksFindFirstOrThrowArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SocialNetworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.findMany()
     * 
     * // Get first 10 SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialNetworksWithIdOnly = await prisma.socialNetworks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SocialNetworksFindManyArgs>(args?: SelectSubset<T, SocialNetworksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SocialNetworks.
     * @param {SocialNetworksCreateArgs} args - Arguments to create a SocialNetworks.
     * @example
     * // Create one SocialNetworks
     * const SocialNetworks = await prisma.socialNetworks.create({
     *   data: {
     *     // ... data to create a SocialNetworks
     *   }
     * })
     * 
     */
    create<T extends SocialNetworksCreateArgs>(args: SelectSubset<T, SocialNetworksCreateArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SocialNetworks.
     * @param {SocialNetworksCreateManyArgs} args - Arguments to create many SocialNetworks.
     * @example
     * // Create many SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SocialNetworksCreateManyArgs>(args?: SelectSubset<T, SocialNetworksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SocialNetworks.
     * @param {SocialNetworksDeleteArgs} args - Arguments to delete one SocialNetworks.
     * @example
     * // Delete one SocialNetworks
     * const SocialNetworks = await prisma.socialNetworks.delete({
     *   where: {
     *     // ... filter to delete one SocialNetworks
     *   }
     * })
     * 
     */
    delete<T extends SocialNetworksDeleteArgs>(args: SelectSubset<T, SocialNetworksDeleteArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SocialNetworks.
     * @param {SocialNetworksUpdateArgs} args - Arguments to update one SocialNetworks.
     * @example
     * // Update one SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SocialNetworksUpdateArgs>(args: SelectSubset<T, SocialNetworksUpdateArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SocialNetworks.
     * @param {SocialNetworksDeleteManyArgs} args - Arguments to filter SocialNetworks to delete.
     * @example
     * // Delete a few SocialNetworks
     * const { count } = await prisma.socialNetworks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SocialNetworksDeleteManyArgs>(args?: SelectSubset<T, SocialNetworksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialNetworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SocialNetworksUpdateManyArgs>(args: SelectSubset<T, SocialNetworksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialNetworks.
     * @param {SocialNetworksUpsertArgs} args - Arguments to update or create a SocialNetworks.
     * @example
     * // Update or create a SocialNetworks
     * const socialNetworks = await prisma.socialNetworks.upsert({
     *   create: {
     *     // ... data to create a SocialNetworks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialNetworks we want to update
     *   }
     * })
     */
    upsert<T extends SocialNetworksUpsertArgs>(args: SelectSubset<T, SocialNetworksUpsertArgs<ExtArgs>>): Prisma__SocialNetworksClient<$Result.GetResult<Prisma.$SocialNetworksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SocialNetworks that matches the filter.
     * @param {SocialNetworksFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const socialNetworks = await prisma.socialNetworks.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SocialNetworksFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SocialNetworks.
     * @param {SocialNetworksAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const socialNetworks = await prisma.socialNetworks.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SocialNetworksAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SocialNetworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksCountArgs} args - Arguments to filter SocialNetworks to count.
     * @example
     * // Count the number of SocialNetworks
     * const count = await prisma.socialNetworks.count({
     *   where: {
     *     // ... the filter for the SocialNetworks we want to count
     *   }
     * })
    **/
    count<T extends SocialNetworksCountArgs>(
      args?: Subset<T, SocialNetworksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialNetworksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialNetworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialNetworksAggregateArgs>(args: Subset<T, SocialNetworksAggregateArgs>): Prisma.PrismaPromise<GetSocialNetworksAggregateType<T>>

    /**
     * Group by SocialNetworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialNetworksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialNetworksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialNetworksGroupByArgs['orderBy'] }
        : { orderBy?: SocialNetworksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialNetworksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialNetworksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialNetworks model
   */
  readonly fields: SocialNetworksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialNetworks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialNetworksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SocialNetworks model
   */
  interface SocialNetworksFieldRefs {
    readonly id: FieldRef<"SocialNetworks", 'String'>
    readonly company_id: FieldRef<"SocialNetworks", 'String'>
    readonly platform: FieldRef<"SocialNetworks", 'String'>
    readonly profile_link: FieldRef<"SocialNetworks", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SocialNetworks findUnique
   */
  export type SocialNetworksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * Filter, which SocialNetworks to fetch.
     */
    where: SocialNetworksWhereUniqueInput
  }

  /**
   * SocialNetworks findUniqueOrThrow
   */
  export type SocialNetworksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * Filter, which SocialNetworks to fetch.
     */
    where: SocialNetworksWhereUniqueInput
  }

  /**
   * SocialNetworks findFirst
   */
  export type SocialNetworksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * Filter, which SocialNetworks to fetch.
     */
    where?: SocialNetworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialNetworks to fetch.
     */
    orderBy?: SocialNetworksOrderByWithRelationInput | SocialNetworksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialNetworks.
     */
    cursor?: SocialNetworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialNetworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialNetworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialNetworks.
     */
    distinct?: SocialNetworksScalarFieldEnum | SocialNetworksScalarFieldEnum[]
  }

  /**
   * SocialNetworks findFirstOrThrow
   */
  export type SocialNetworksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * Filter, which SocialNetworks to fetch.
     */
    where?: SocialNetworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialNetworks to fetch.
     */
    orderBy?: SocialNetworksOrderByWithRelationInput | SocialNetworksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialNetworks.
     */
    cursor?: SocialNetworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialNetworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialNetworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialNetworks.
     */
    distinct?: SocialNetworksScalarFieldEnum | SocialNetworksScalarFieldEnum[]
  }

  /**
   * SocialNetworks findMany
   */
  export type SocialNetworksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * Filter, which SocialNetworks to fetch.
     */
    where?: SocialNetworksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialNetworks to fetch.
     */
    orderBy?: SocialNetworksOrderByWithRelationInput | SocialNetworksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialNetworks.
     */
    cursor?: SocialNetworksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialNetworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialNetworks.
     */
    skip?: number
    distinct?: SocialNetworksScalarFieldEnum | SocialNetworksScalarFieldEnum[]
  }

  /**
   * SocialNetworks create
   */
  export type SocialNetworksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * The data needed to create a SocialNetworks.
     */
    data: XOR<SocialNetworksCreateInput, SocialNetworksUncheckedCreateInput>
  }

  /**
   * SocialNetworks createMany
   */
  export type SocialNetworksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialNetworks.
     */
    data: SocialNetworksCreateManyInput | SocialNetworksCreateManyInput[]
  }

  /**
   * SocialNetworks update
   */
  export type SocialNetworksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * The data needed to update a SocialNetworks.
     */
    data: XOR<SocialNetworksUpdateInput, SocialNetworksUncheckedUpdateInput>
    /**
     * Choose, which SocialNetworks to update.
     */
    where: SocialNetworksWhereUniqueInput
  }

  /**
   * SocialNetworks updateMany
   */
  export type SocialNetworksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialNetworks.
     */
    data: XOR<SocialNetworksUpdateManyMutationInput, SocialNetworksUncheckedUpdateManyInput>
    /**
     * Filter which SocialNetworks to update
     */
    where?: SocialNetworksWhereInput
    /**
     * Limit how many SocialNetworks to update.
     */
    limit?: number
  }

  /**
   * SocialNetworks upsert
   */
  export type SocialNetworksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * The filter to search for the SocialNetworks to update in case it exists.
     */
    where: SocialNetworksWhereUniqueInput
    /**
     * In case the SocialNetworks found by the `where` argument doesn't exist, create a new SocialNetworks with this data.
     */
    create: XOR<SocialNetworksCreateInput, SocialNetworksUncheckedCreateInput>
    /**
     * In case the SocialNetworks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialNetworksUpdateInput, SocialNetworksUncheckedUpdateInput>
  }

  /**
   * SocialNetworks delete
   */
  export type SocialNetworksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
    /**
     * Filter which SocialNetworks to delete.
     */
    where: SocialNetworksWhereUniqueInput
  }

  /**
   * SocialNetworks deleteMany
   */
  export type SocialNetworksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialNetworks to delete
     */
    where?: SocialNetworksWhereInput
    /**
     * Limit how many SocialNetworks to delete.
     */
    limit?: number
  }

  /**
   * SocialNetworks findRaw
   */
  export type SocialNetworksFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SocialNetworks aggregateRaw
   */
  export type SocialNetworksAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SocialNetworks without action
   */
  export type SocialNetworksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialNetworks
     */
    select?: SocialNetworksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialNetworks
     */
    omit?: SocialNetworksOmit<ExtArgs> | null
  }


  /**
   * Model Vacansies
   */

  export type AggregateVacansies = {
    _count: VacansiesCountAggregateOutputType | null
    _avg: VacansiesAvgAggregateOutputType | null
    _sum: VacansiesSumAggregateOutputType | null
    _min: VacansiesMinAggregateOutputType | null
    _max: VacansiesMaxAggregateOutputType | null
  }

  export type VacansiesAvgAggregateOutputType = {
    hard_skill_tests: number | null
  }

  export type VacansiesSumAggregateOutputType = {
    hard_skill_tests: number | null
  }

  export type VacansiesMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    position: string | null
    level: $Enums.Level | null
    work_start_hour: string | null
    work_end_hour: string | null
    description: string | null
    hard_skill_tests: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VacansiesMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    position: string | null
    level: $Enums.Level | null
    work_start_hour: string | null
    work_end_hour: string | null
    description: string | null
    hard_skill_tests: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VacansiesCountAggregateOutputType = {
    id: number
    company_id: number
    position: number
    level: number
    submitted_candidates: number
    passedToHardSkills: number
    passedToSoftSkills: number
    hard_requirements: number
    soft_requirements: number
    work_start_hour: number
    work_end_hour: number
    description: number
    language_requirements: number
    hard_skill_tests: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VacansiesAvgAggregateInputType = {
    hard_skill_tests?: true
  }

  export type VacansiesSumAggregateInputType = {
    hard_skill_tests?: true
  }

  export type VacansiesMinAggregateInputType = {
    id?: true
    company_id?: true
    position?: true
    level?: true
    work_start_hour?: true
    work_end_hour?: true
    description?: true
    hard_skill_tests?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VacansiesMaxAggregateInputType = {
    id?: true
    company_id?: true
    position?: true
    level?: true
    work_start_hour?: true
    work_end_hour?: true
    description?: true
    hard_skill_tests?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VacansiesCountAggregateInputType = {
    id?: true
    company_id?: true
    position?: true
    level?: true
    submitted_candidates?: true
    passedToHardSkills?: true
    passedToSoftSkills?: true
    hard_requirements?: true
    soft_requirements?: true
    work_start_hour?: true
    work_end_hour?: true
    description?: true
    language_requirements?: true
    hard_skill_tests?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VacansiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vacansies to aggregate.
     */
    where?: VacansiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacansies to fetch.
     */
    orderBy?: VacansiesOrderByWithRelationInput | VacansiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VacansiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacansies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacansies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vacansies
    **/
    _count?: true | VacansiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VacansiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VacansiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VacansiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VacansiesMaxAggregateInputType
  }

  export type GetVacansiesAggregateType<T extends VacansiesAggregateArgs> = {
        [P in keyof T & keyof AggregateVacansies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVacansies[P]>
      : GetScalarType<T[P], AggregateVacansies[P]>
  }




  export type VacansiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VacansiesWhereInput
    orderBy?: VacansiesOrderByWithAggregationInput | VacansiesOrderByWithAggregationInput[]
    by: VacansiesScalarFieldEnum[] | VacansiesScalarFieldEnum
    having?: VacansiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VacansiesCountAggregateInputType | true
    _avg?: VacansiesAvgAggregateInputType
    _sum?: VacansiesSumAggregateInputType
    _min?: VacansiesMinAggregateInputType
    _max?: VacansiesMaxAggregateInputType
  }

  export type VacansiesGroupByOutputType = {
    id: string
    company_id: string
    position: string
    level: $Enums.Level | null
    submitted_candidates: string[]
    passedToHardSkills: string[]
    passedToSoftSkills: string[]
    hard_requirements: string[]
    soft_requirements: string[]
    work_start_hour: string
    work_end_hour: string
    description: string | null
    language_requirements: string[]
    hard_skill_tests: number
    createdAt: Date
    updatedAt: Date
    _count: VacansiesCountAggregateOutputType | null
    _avg: VacansiesAvgAggregateOutputType | null
    _sum: VacansiesSumAggregateOutputType | null
    _min: VacansiesMinAggregateOutputType | null
    _max: VacansiesMaxAggregateOutputType | null
  }

  type GetVacansiesGroupByPayload<T extends VacansiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VacansiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VacansiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VacansiesGroupByOutputType[P]>
            : GetScalarType<T[P], VacansiesGroupByOutputType[P]>
        }
      >
    >


  export type VacansiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    position?: boolean
    level?: boolean
    submitted_candidates?: boolean
    passedToHardSkills?: boolean
    passedToSoftSkills?: boolean
    hard_requirements?: boolean
    soft_requirements?: boolean
    work_start_hour?: boolean
    work_end_hour?: boolean
    description?: boolean
    language_requirements?: boolean
    hard_skill_tests?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["vacansies"]>



  export type VacansiesSelectScalar = {
    id?: boolean
    company_id?: boolean
    position?: boolean
    level?: boolean
    submitted_candidates?: boolean
    passedToHardSkills?: boolean
    passedToSoftSkills?: boolean
    hard_requirements?: boolean
    soft_requirements?: boolean
    work_start_hour?: boolean
    work_end_hour?: boolean
    description?: boolean
    language_requirements?: boolean
    hard_skill_tests?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VacansiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "position" | "level" | "submitted_candidates" | "passedToHardSkills" | "passedToSoftSkills" | "hard_requirements" | "soft_requirements" | "work_start_hour" | "work_end_hour" | "description" | "language_requirements" | "hard_skill_tests" | "createdAt" | "updatedAt", ExtArgs["result"]["vacansies"]>

  export type $VacansiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vacansies"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      position: string
      level: $Enums.Level | null
      submitted_candidates: string[]
      passedToHardSkills: string[]
      passedToSoftSkills: string[]
      hard_requirements: string[]
      soft_requirements: string[]
      work_start_hour: string
      work_end_hour: string
      description: string | null
      language_requirements: string[]
      hard_skill_tests: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vacansies"]>
    composites: {}
  }

  type VacansiesGetPayload<S extends boolean | null | undefined | VacansiesDefaultArgs> = $Result.GetResult<Prisma.$VacansiesPayload, S>

  type VacansiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VacansiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VacansiesCountAggregateInputType | true
    }

  export interface VacansiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vacansies'], meta: { name: 'Vacansies' } }
    /**
     * Find zero or one Vacansies that matches the filter.
     * @param {VacansiesFindUniqueArgs} args - Arguments to find a Vacansies
     * @example
     * // Get one Vacansies
     * const vacansies = await prisma.vacansies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VacansiesFindUniqueArgs>(args: SelectSubset<T, VacansiesFindUniqueArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vacansies that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VacansiesFindUniqueOrThrowArgs} args - Arguments to find a Vacansies
     * @example
     * // Get one Vacansies
     * const vacansies = await prisma.vacansies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VacansiesFindUniqueOrThrowArgs>(args: SelectSubset<T, VacansiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vacansies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesFindFirstArgs} args - Arguments to find a Vacansies
     * @example
     * // Get one Vacansies
     * const vacansies = await prisma.vacansies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VacansiesFindFirstArgs>(args?: SelectSubset<T, VacansiesFindFirstArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vacansies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesFindFirstOrThrowArgs} args - Arguments to find a Vacansies
     * @example
     * // Get one Vacansies
     * const vacansies = await prisma.vacansies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VacansiesFindFirstOrThrowArgs>(args?: SelectSubset<T, VacansiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vacansies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vacansies
     * const vacansies = await prisma.vacansies.findMany()
     * 
     * // Get first 10 Vacansies
     * const vacansies = await prisma.vacansies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vacansiesWithIdOnly = await prisma.vacansies.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VacansiesFindManyArgs>(args?: SelectSubset<T, VacansiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vacansies.
     * @param {VacansiesCreateArgs} args - Arguments to create a Vacansies.
     * @example
     * // Create one Vacansies
     * const Vacansies = await prisma.vacansies.create({
     *   data: {
     *     // ... data to create a Vacansies
     *   }
     * })
     * 
     */
    create<T extends VacansiesCreateArgs>(args: SelectSubset<T, VacansiesCreateArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vacansies.
     * @param {VacansiesCreateManyArgs} args - Arguments to create many Vacansies.
     * @example
     * // Create many Vacansies
     * const vacansies = await prisma.vacansies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VacansiesCreateManyArgs>(args?: SelectSubset<T, VacansiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vacansies.
     * @param {VacansiesDeleteArgs} args - Arguments to delete one Vacansies.
     * @example
     * // Delete one Vacansies
     * const Vacansies = await prisma.vacansies.delete({
     *   where: {
     *     // ... filter to delete one Vacansies
     *   }
     * })
     * 
     */
    delete<T extends VacansiesDeleteArgs>(args: SelectSubset<T, VacansiesDeleteArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vacansies.
     * @param {VacansiesUpdateArgs} args - Arguments to update one Vacansies.
     * @example
     * // Update one Vacansies
     * const vacansies = await prisma.vacansies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VacansiesUpdateArgs>(args: SelectSubset<T, VacansiesUpdateArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vacansies.
     * @param {VacansiesDeleteManyArgs} args - Arguments to filter Vacansies to delete.
     * @example
     * // Delete a few Vacansies
     * const { count } = await prisma.vacansies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VacansiesDeleteManyArgs>(args?: SelectSubset<T, VacansiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vacansies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vacansies
     * const vacansies = await prisma.vacansies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VacansiesUpdateManyArgs>(args: SelectSubset<T, VacansiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vacansies.
     * @param {VacansiesUpsertArgs} args - Arguments to update or create a Vacansies.
     * @example
     * // Update or create a Vacansies
     * const vacansies = await prisma.vacansies.upsert({
     *   create: {
     *     // ... data to create a Vacansies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vacansies we want to update
     *   }
     * })
     */
    upsert<T extends VacansiesUpsertArgs>(args: SelectSubset<T, VacansiesUpsertArgs<ExtArgs>>): Prisma__VacansiesClient<$Result.GetResult<Prisma.$VacansiesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vacansies that matches the filter.
     * @param {VacansiesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const vacansies = await prisma.vacansies.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: VacansiesFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Vacansies.
     * @param {VacansiesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const vacansies = await prisma.vacansies.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: VacansiesAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Vacansies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesCountArgs} args - Arguments to filter Vacansies to count.
     * @example
     * // Count the number of Vacansies
     * const count = await prisma.vacansies.count({
     *   where: {
     *     // ... the filter for the Vacansies we want to count
     *   }
     * })
    **/
    count<T extends VacansiesCountArgs>(
      args?: Subset<T, VacansiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VacansiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vacansies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VacansiesAggregateArgs>(args: Subset<T, VacansiesAggregateArgs>): Prisma.PrismaPromise<GetVacansiesAggregateType<T>>

    /**
     * Group by Vacansies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacansiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VacansiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VacansiesGroupByArgs['orderBy'] }
        : { orderBy?: VacansiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VacansiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVacansiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vacansies model
   */
  readonly fields: VacansiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vacansies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VacansiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vacansies model
   */
  interface VacansiesFieldRefs {
    readonly id: FieldRef<"Vacansies", 'String'>
    readonly company_id: FieldRef<"Vacansies", 'String'>
    readonly position: FieldRef<"Vacansies", 'String'>
    readonly level: FieldRef<"Vacansies", 'Level'>
    readonly submitted_candidates: FieldRef<"Vacansies", 'String[]'>
    readonly passedToHardSkills: FieldRef<"Vacansies", 'String[]'>
    readonly passedToSoftSkills: FieldRef<"Vacansies", 'String[]'>
    readonly hard_requirements: FieldRef<"Vacansies", 'String[]'>
    readonly soft_requirements: FieldRef<"Vacansies", 'String[]'>
    readonly work_start_hour: FieldRef<"Vacansies", 'String'>
    readonly work_end_hour: FieldRef<"Vacansies", 'String'>
    readonly description: FieldRef<"Vacansies", 'String'>
    readonly language_requirements: FieldRef<"Vacansies", 'String[]'>
    readonly hard_skill_tests: FieldRef<"Vacansies", 'Int'>
    readonly createdAt: FieldRef<"Vacansies", 'DateTime'>
    readonly updatedAt: FieldRef<"Vacansies", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vacansies findUnique
   */
  export type VacansiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * Filter, which Vacansies to fetch.
     */
    where: VacansiesWhereUniqueInput
  }

  /**
   * Vacansies findUniqueOrThrow
   */
  export type VacansiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * Filter, which Vacansies to fetch.
     */
    where: VacansiesWhereUniqueInput
  }

  /**
   * Vacansies findFirst
   */
  export type VacansiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * Filter, which Vacansies to fetch.
     */
    where?: VacansiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacansies to fetch.
     */
    orderBy?: VacansiesOrderByWithRelationInput | VacansiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vacansies.
     */
    cursor?: VacansiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacansies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacansies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vacansies.
     */
    distinct?: VacansiesScalarFieldEnum | VacansiesScalarFieldEnum[]
  }

  /**
   * Vacansies findFirstOrThrow
   */
  export type VacansiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * Filter, which Vacansies to fetch.
     */
    where?: VacansiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacansies to fetch.
     */
    orderBy?: VacansiesOrderByWithRelationInput | VacansiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vacansies.
     */
    cursor?: VacansiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacansies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacansies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vacansies.
     */
    distinct?: VacansiesScalarFieldEnum | VacansiesScalarFieldEnum[]
  }

  /**
   * Vacansies findMany
   */
  export type VacansiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * Filter, which Vacansies to fetch.
     */
    where?: VacansiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacansies to fetch.
     */
    orderBy?: VacansiesOrderByWithRelationInput | VacansiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vacansies.
     */
    cursor?: VacansiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacansies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacansies.
     */
    skip?: number
    distinct?: VacansiesScalarFieldEnum | VacansiesScalarFieldEnum[]
  }

  /**
   * Vacansies create
   */
  export type VacansiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * The data needed to create a Vacansies.
     */
    data: XOR<VacansiesCreateInput, VacansiesUncheckedCreateInput>
  }

  /**
   * Vacansies createMany
   */
  export type VacansiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vacansies.
     */
    data: VacansiesCreateManyInput | VacansiesCreateManyInput[]
  }

  /**
   * Vacansies update
   */
  export type VacansiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * The data needed to update a Vacansies.
     */
    data: XOR<VacansiesUpdateInput, VacansiesUncheckedUpdateInput>
    /**
     * Choose, which Vacansies to update.
     */
    where: VacansiesWhereUniqueInput
  }

  /**
   * Vacansies updateMany
   */
  export type VacansiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vacansies.
     */
    data: XOR<VacansiesUpdateManyMutationInput, VacansiesUncheckedUpdateManyInput>
    /**
     * Filter which Vacansies to update
     */
    where?: VacansiesWhereInput
    /**
     * Limit how many Vacansies to update.
     */
    limit?: number
  }

  /**
   * Vacansies upsert
   */
  export type VacansiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * The filter to search for the Vacansies to update in case it exists.
     */
    where: VacansiesWhereUniqueInput
    /**
     * In case the Vacansies found by the `where` argument doesn't exist, create a new Vacansies with this data.
     */
    create: XOR<VacansiesCreateInput, VacansiesUncheckedCreateInput>
    /**
     * In case the Vacansies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VacansiesUpdateInput, VacansiesUncheckedUpdateInput>
  }

  /**
   * Vacansies delete
   */
  export type VacansiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
    /**
     * Filter which Vacansies to delete.
     */
    where: VacansiesWhereUniqueInput
  }

  /**
   * Vacansies deleteMany
   */
  export type VacansiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vacansies to delete
     */
    where?: VacansiesWhereInput
    /**
     * Limit how many Vacansies to delete.
     */
    limit?: number
  }

  /**
   * Vacansies findRaw
   */
  export type VacansiesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Vacansies aggregateRaw
   */
  export type VacansiesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Vacansies without action
   */
  export type VacansiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vacansies
     */
    select?: VacansiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vacansies
     */
    omit?: VacansiesOmit<ExtArgs> | null
  }


  /**
   * Model Projects
   */

  export type AggregateProjects = {
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    project_price: number | null
  }

  export type ProjectsSumAggregateOutputType = {
    project_price: number | null
  }

  export type ProjectsMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    project_title: string | null
    start_date: Date | null
    end_date: Date | null
    project_price: number | null
    project_link: string | null
    project_desc: string | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    project_title: string | null
    start_date: Date | null
    end_date: Date | null
    project_price: number | null
    project_link: string | null
    project_desc: string | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    company_id: number
    project_title: number
    start_date: number
    end_date: number
    project_price: number
    project_link: number
    project_desc: number
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    project_price?: true
  }

  export type ProjectsSumAggregateInputType = {
    project_price?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    company_id?: true
    project_title?: true
    start_date?: true
    end_date?: true
    project_price?: true
    project_link?: true
    project_desc?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    company_id?: true
    project_title?: true
    start_date?: true
    end_date?: true
    project_price?: true
    project_link?: true
    project_desc?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    company_id?: true
    project_title?: true
    start_date?: true
    end_date?: true
    project_price?: true
    project_link?: true
    project_desc?: true
    _all?: true
  }

  export type ProjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to aggregate.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends ProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects[P]>
      : GetScalarType<T[P], AggregateProjects[P]>
  }




  export type ProjectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithAggregationInput | ProjectsOrderByWithAggregationInput[]
    by: ProjectsScalarFieldEnum[] | ProjectsScalarFieldEnum
    having?: ProjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsCountAggregateInputType | true
    _avg?: ProjectsAvgAggregateInputType
    _sum?: ProjectsSumAggregateInputType
    _min?: ProjectsMinAggregateInputType
    _max?: ProjectsMaxAggregateInputType
  }

  export type ProjectsGroupByOutputType = {
    id: string
    company_id: string
    project_title: string
    start_date: Date
    end_date: Date
    project_price: number | null
    project_link: string | null
    project_desc: string | null
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  type GetProjectsGroupByPayload<T extends ProjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
        }
      >
    >


  export type ProjectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    project_title?: boolean
    start_date?: boolean
    end_date?: boolean
    project_price?: boolean
    project_link?: boolean
    project_desc?: boolean
  }, ExtArgs["result"]["projects"]>



  export type ProjectsSelectScalar = {
    id?: boolean
    company_id?: boolean
    project_title?: boolean
    start_date?: boolean
    end_date?: boolean
    project_price?: boolean
    project_link?: boolean
    project_desc?: boolean
  }

  export type ProjectsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "project_title" | "start_date" | "end_date" | "project_price" | "project_link" | "project_desc", ExtArgs["result"]["projects"]>

  export type $ProjectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Projects"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      project_title: string
      start_date: Date
      end_date: Date
      project_price: number | null
      project_link: string | null
      project_desc: string | null
    }, ExtArgs["result"]["projects"]>
    composites: {}
  }

  type ProjectsGetPayload<S extends boolean | null | undefined | ProjectsDefaultArgs> = $Result.GetResult<Prisma.$ProjectsPayload, S>

  type ProjectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectsCountAggregateInputType | true
    }

  export interface ProjectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Projects'], meta: { name: 'Projects' } }
    /**
     * Find zero or one Projects that matches the filter.
     * @param {ProjectsFindUniqueArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectsFindUniqueArgs>(args: SelectSubset<T, ProjectsFindUniqueArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Projects that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectsFindUniqueOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectsFindFirstArgs>(args?: SelectSubset<T, ProjectsFindFirstArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectsFindManyArgs>(args?: SelectSubset<T, ProjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Projects.
     * @param {ProjectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
     */
    create<T extends ProjectsCreateArgs>(args: SelectSubset<T, ProjectsCreateArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectsCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const projects = await prisma.projects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectsCreateManyArgs>(args?: SelectSubset<T, ProjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projects.
     * @param {ProjectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
     */
    delete<T extends ProjectsDeleteArgs>(args: SelectSubset<T, ProjectsDeleteArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Projects.
     * @param {ProjectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectsUpdateArgs>(args: SelectSubset<T, ProjectsUpdateArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectsDeleteManyArgs>(args?: SelectSubset<T, ProjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectsUpdateManyArgs>(args: SelectSubset<T, ProjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projects.
     * @param {ProjectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
     */
    upsert<T extends ProjectsUpsertArgs>(args: SelectSubset<T, ProjectsUpsertArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {ProjectsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const projects = await prisma.projects.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProjectsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Projects.
     * @param {ProjectsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const projects = await prisma.projects.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProjectsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectsCountArgs>(
      args?: Subset<T, ProjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsAggregateArgs>(args: Subset<T, ProjectsAggregateArgs>): Prisma.PrismaPromise<GetProjectsAggregateType<T>>

    /**
     * Group by Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectsGroupByArgs['orderBy'] }
        : { orderBy?: ProjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Projects model
   */
  readonly fields: ProjectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Projects model
   */
  interface ProjectsFieldRefs {
    readonly id: FieldRef<"Projects", 'String'>
    readonly company_id: FieldRef<"Projects", 'String'>
    readonly project_title: FieldRef<"Projects", 'String'>
    readonly start_date: FieldRef<"Projects", 'DateTime'>
    readonly end_date: FieldRef<"Projects", 'DateTime'>
    readonly project_price: FieldRef<"Projects", 'Float'>
    readonly project_link: FieldRef<"Projects", 'String'>
    readonly project_desc: FieldRef<"Projects", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Projects findUnique
   */
  export type ProjectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findUniqueOrThrow
   */
  export type ProjectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findFirst
   */
  export type ProjectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects findFirstOrThrow
   */
  export type ProjectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects findMany
   */
  export type ProjectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects create
   */
  export type ProjectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * The data needed to create a Projects.
     */
    data: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
  }

  /**
   * Projects createMany
   */
  export type ProjectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectsCreateManyInput | ProjectsCreateManyInput[]
  }

  /**
   * Projects update
   */
  export type ProjectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * The data needed to update a Projects.
     */
    data: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
    /**
     * Choose, which Projects to update.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects updateMany
   */
  export type ProjectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Projects upsert
   */
  export type ProjectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * The filter to search for the Projects to update in case it exists.
     */
    where: ProjectsWhereUniqueInput
    /**
     * In case the Projects found by the `where` argument doesn't exist, create a new Projects with this data.
     */
    create: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
    /**
     * In case the Projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
  }

  /**
   * Projects delete
   */
  export type ProjectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Filter which Projects to delete.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects deleteMany
   */
  export type ProjectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Projects findRaw
   */
  export type ProjectsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Projects aggregateRaw
   */
  export type ProjectsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Projects without action
   */
  export type ProjectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
  }


  /**
   * Model Partners
   */

  export type AggregatePartners = {
    _count: PartnersCountAggregateOutputType | null
    _min: PartnersMinAggregateOutputType | null
    _max: PartnersMaxAggregateOutputType | null
  }

  export type PartnersMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    partner_name: string | null
    description: string | null
  }

  export type PartnersMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    partner_name: string | null
    description: string | null
  }

  export type PartnersCountAggregateOutputType = {
    id: number
    company_id: number
    partner_name: number
    description: number
    _all: number
  }


  export type PartnersMinAggregateInputType = {
    id?: true
    company_id?: true
    partner_name?: true
    description?: true
  }

  export type PartnersMaxAggregateInputType = {
    id?: true
    company_id?: true
    partner_name?: true
    description?: true
  }

  export type PartnersCountAggregateInputType = {
    id?: true
    company_id?: true
    partner_name?: true
    description?: true
    _all?: true
  }

  export type PartnersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to aggregate.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnersMaxAggregateInputType
  }

  export type GetPartnersAggregateType<T extends PartnersAggregateArgs> = {
        [P in keyof T & keyof AggregatePartners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartners[P]>
      : GetScalarType<T[P], AggregatePartners[P]>
  }




  export type PartnersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnersWhereInput
    orderBy?: PartnersOrderByWithAggregationInput | PartnersOrderByWithAggregationInput[]
    by: PartnersScalarFieldEnum[] | PartnersScalarFieldEnum
    having?: PartnersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnersCountAggregateInputType | true
    _min?: PartnersMinAggregateInputType
    _max?: PartnersMaxAggregateInputType
  }

  export type PartnersGroupByOutputType = {
    id: string
    company_id: string
    partner_name: string
    description: string
    _count: PartnersCountAggregateOutputType | null
    _min: PartnersMinAggregateOutputType | null
    _max: PartnersMaxAggregateOutputType | null
  }

  type GetPartnersGroupByPayload<T extends PartnersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnersGroupByOutputType[P]>
            : GetScalarType<T[P], PartnersGroupByOutputType[P]>
        }
      >
    >


  export type PartnersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    partner_name?: boolean
    description?: boolean
  }, ExtArgs["result"]["partners"]>



  export type PartnersSelectScalar = {
    id?: boolean
    company_id?: boolean
    partner_name?: boolean
    description?: boolean
  }

  export type PartnersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "partner_name" | "description", ExtArgs["result"]["partners"]>

  export type $PartnersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partners"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      partner_name: string
      description: string
    }, ExtArgs["result"]["partners"]>
    composites: {}
  }

  type PartnersGetPayload<S extends boolean | null | undefined | PartnersDefaultArgs> = $Result.GetResult<Prisma.$PartnersPayload, S>

  type PartnersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartnersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartnersCountAggregateInputType | true
    }

  export interface PartnersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partners'], meta: { name: 'Partners' } }
    /**
     * Find zero or one Partners that matches the filter.
     * @param {PartnersFindUniqueArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnersFindUniqueArgs>(args: SelectSubset<T, PartnersFindUniqueArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partners that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartnersFindUniqueOrThrowArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnersFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindFirstArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnersFindFirstArgs>(args?: SelectSubset<T, PartnersFindFirstArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindFirstOrThrowArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnersFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnersFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partners.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnersWithIdOnly = await prisma.partners.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnersFindManyArgs>(args?: SelectSubset<T, PartnersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partners.
     * @param {PartnersCreateArgs} args - Arguments to create a Partners.
     * @example
     * // Create one Partners
     * const Partners = await prisma.partners.create({
     *   data: {
     *     // ... data to create a Partners
     *   }
     * })
     * 
     */
    create<T extends PartnersCreateArgs>(args: SelectSubset<T, PartnersCreateArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partners.
     * @param {PartnersCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partners = await prisma.partners.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnersCreateManyArgs>(args?: SelectSubset<T, PartnersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Partners.
     * @param {PartnersDeleteArgs} args - Arguments to delete one Partners.
     * @example
     * // Delete one Partners
     * const Partners = await prisma.partners.delete({
     *   where: {
     *     // ... filter to delete one Partners
     *   }
     * })
     * 
     */
    delete<T extends PartnersDeleteArgs>(args: SelectSubset<T, PartnersDeleteArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partners.
     * @param {PartnersUpdateArgs} args - Arguments to update one Partners.
     * @example
     * // Update one Partners
     * const partners = await prisma.partners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnersUpdateArgs>(args: SelectSubset<T, PartnersUpdateArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partners.
     * @param {PartnersDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnersDeleteManyArgs>(args?: SelectSubset<T, PartnersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partners = await prisma.partners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnersUpdateManyArgs>(args: SelectSubset<T, PartnersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partners.
     * @param {PartnersUpsertArgs} args - Arguments to update or create a Partners.
     * @example
     * // Update or create a Partners
     * const partners = await prisma.partners.upsert({
     *   create: {
     *     // ... data to create a Partners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partners we want to update
     *   }
     * })
     */
    upsert<T extends PartnersUpsertArgs>(args: SelectSubset<T, PartnersUpsertArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * @param {PartnersFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const partners = await prisma.partners.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: PartnersFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Partners.
     * @param {PartnersAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const partners = await prisma.partners.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: PartnersAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partners.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnersCountArgs>(
      args?: Subset<T, PartnersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnersAggregateArgs>(args: Subset<T, PartnersAggregateArgs>): Prisma.PrismaPromise<GetPartnersAggregateType<T>>

    /**
     * Group by Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnersGroupByArgs['orderBy'] }
        : { orderBy?: PartnersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partners model
   */
  readonly fields: PartnersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partners model
   */
  interface PartnersFieldRefs {
    readonly id: FieldRef<"Partners", 'String'>
    readonly company_id: FieldRef<"Partners", 'String'>
    readonly partner_name: FieldRef<"Partners", 'String'>
    readonly description: FieldRef<"Partners", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Partners findUnique
   */
  export type PartnersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners findUniqueOrThrow
   */
  export type PartnersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners findFirst
   */
  export type PartnersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners findFirstOrThrow
   */
  export type PartnersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners findMany
   */
  export type PartnersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners create
   */
  export type PartnersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data needed to create a Partners.
     */
    data: XOR<PartnersCreateInput, PartnersUncheckedCreateInput>
  }

  /**
   * Partners createMany
   */
  export type PartnersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnersCreateManyInput | PartnersCreateManyInput[]
  }

  /**
   * Partners update
   */
  export type PartnersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data needed to update a Partners.
     */
    data: XOR<PartnersUpdateInput, PartnersUncheckedUpdateInput>
    /**
     * Choose, which Partners to update.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners updateMany
   */
  export type PartnersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnersUpdateManyMutationInput, PartnersUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partners upsert
   */
  export type PartnersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The filter to search for the Partners to update in case it exists.
     */
    where: PartnersWhereUniqueInput
    /**
     * In case the Partners found by the `where` argument doesn't exist, create a new Partners with this data.
     */
    create: XOR<PartnersCreateInput, PartnersUncheckedCreateInput>
    /**
     * In case the Partners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnersUpdateInput, PartnersUncheckedUpdateInput>
  }

  /**
   * Partners delete
   */
  export type PartnersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter which Partners to delete.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners deleteMany
   */
  export type PartnersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to delete.
     */
    limit?: number
  }

  /**
   * Partners findRaw
   */
  export type PartnersFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Partners aggregateRaw
   */
  export type PartnersAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Partners without action
   */
  export type PartnersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
  }


  /**
   * Model hardSkillTests
   */

  export type AggregateHardSkillTests = {
    _count: HardSkillTestsCountAggregateOutputType | null
    _avg: HardSkillTestsAvgAggregateOutputType | null
    _sum: HardSkillTestsSumAggregateOutputType | null
    _min: HardSkillTestsMinAggregateOutputType | null
    _max: HardSkillTestsMaxAggregateOutputType | null
  }

  export type HardSkillTestsAvgAggregateOutputType = {
    hardSkillNumber: number | null
  }

  export type HardSkillTestsSumAggregateOutputType = {
    hardSkillNumber: number | null
  }

  export type HardSkillTestsMinAggregateOutputType = {
    id: string | null
    name: string | null
    hardSkillNumber: number | null
    company_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HardSkillTestsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    hardSkillNumber: number | null
    company_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HardSkillTestsCountAggregateOutputType = {
    id: number
    name: number
    hardSkillNumber: number
    company_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HardSkillTestsAvgAggregateInputType = {
    hardSkillNumber?: true
  }

  export type HardSkillTestsSumAggregateInputType = {
    hardSkillNumber?: true
  }

  export type HardSkillTestsMinAggregateInputType = {
    id?: true
    name?: true
    hardSkillNumber?: true
    company_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HardSkillTestsMaxAggregateInputType = {
    id?: true
    name?: true
    hardSkillNumber?: true
    company_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HardSkillTestsCountAggregateInputType = {
    id?: true
    name?: true
    hardSkillNumber?: true
    company_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HardSkillTestsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hardSkillTests to aggregate.
     */
    where?: hardSkillTestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hardSkillTests to fetch.
     */
    orderBy?: hardSkillTestsOrderByWithRelationInput | hardSkillTestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hardSkillTestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hardSkillTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hardSkillTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hardSkillTests
    **/
    _count?: true | HardSkillTestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HardSkillTestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HardSkillTestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HardSkillTestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HardSkillTestsMaxAggregateInputType
  }

  export type GetHardSkillTestsAggregateType<T extends HardSkillTestsAggregateArgs> = {
        [P in keyof T & keyof AggregateHardSkillTests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHardSkillTests[P]>
      : GetScalarType<T[P], AggregateHardSkillTests[P]>
  }




  export type hardSkillTestsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hardSkillTestsWhereInput
    orderBy?: hardSkillTestsOrderByWithAggregationInput | hardSkillTestsOrderByWithAggregationInput[]
    by: HardSkillTestsScalarFieldEnum[] | HardSkillTestsScalarFieldEnum
    having?: hardSkillTestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HardSkillTestsCountAggregateInputType | true
    _avg?: HardSkillTestsAvgAggregateInputType
    _sum?: HardSkillTestsSumAggregateInputType
    _min?: HardSkillTestsMinAggregateInputType
    _max?: HardSkillTestsMaxAggregateInputType
  }

  export type HardSkillTestsGroupByOutputType = {
    id: string
    name: string
    hardSkillNumber: number
    company_id: string
    createdAt: Date
    updatedAt: Date
    _count: HardSkillTestsCountAggregateOutputType | null
    _avg: HardSkillTestsAvgAggregateOutputType | null
    _sum: HardSkillTestsSumAggregateOutputType | null
    _min: HardSkillTestsMinAggregateOutputType | null
    _max: HardSkillTestsMaxAggregateOutputType | null
  }

  type GetHardSkillTestsGroupByPayload<T extends hardSkillTestsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HardSkillTestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HardSkillTestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HardSkillTestsGroupByOutputType[P]>
            : GetScalarType<T[P], HardSkillTestsGroupByOutputType[P]>
        }
      >
    >


  export type hardSkillTestsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    hardSkillNumber?: boolean
    company_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tests?: boolean | hardSkillTests$testsArgs<ExtArgs>
    _count?: boolean | HardSkillTestsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hardSkillTests"]>



  export type hardSkillTestsSelectScalar = {
    id?: boolean
    name?: boolean
    hardSkillNumber?: boolean
    company_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type hardSkillTestsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "hardSkillNumber" | "company_id" | "createdAt" | "updatedAt", ExtArgs["result"]["hardSkillTests"]>
  export type hardSkillTestsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tests?: boolean | hardSkillTests$testsArgs<ExtArgs>
    _count?: boolean | HardSkillTestsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $hardSkillTestsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "hardSkillTests"
    objects: {
      tests: Prisma.$TestItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      hardSkillNumber: number
      company_id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hardSkillTests"]>
    composites: {}
  }

  type hardSkillTestsGetPayload<S extends boolean | null | undefined | hardSkillTestsDefaultArgs> = $Result.GetResult<Prisma.$hardSkillTestsPayload, S>

  type hardSkillTestsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<hardSkillTestsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HardSkillTestsCountAggregateInputType | true
    }

  export interface hardSkillTestsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['hardSkillTests'], meta: { name: 'hardSkillTests' } }
    /**
     * Find zero or one HardSkillTests that matches the filter.
     * @param {hardSkillTestsFindUniqueArgs} args - Arguments to find a HardSkillTests
     * @example
     * // Get one HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends hardSkillTestsFindUniqueArgs>(args: SelectSubset<T, hardSkillTestsFindUniqueArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HardSkillTests that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {hardSkillTestsFindUniqueOrThrowArgs} args - Arguments to find a HardSkillTests
     * @example
     * // Get one HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends hardSkillTestsFindUniqueOrThrowArgs>(args: SelectSubset<T, hardSkillTestsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HardSkillTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hardSkillTestsFindFirstArgs} args - Arguments to find a HardSkillTests
     * @example
     * // Get one HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends hardSkillTestsFindFirstArgs>(args?: SelectSubset<T, hardSkillTestsFindFirstArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HardSkillTests that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hardSkillTestsFindFirstOrThrowArgs} args - Arguments to find a HardSkillTests
     * @example
     * // Get one HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends hardSkillTestsFindFirstOrThrowArgs>(args?: SelectSubset<T, hardSkillTestsFindFirstOrThrowArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HardSkillTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hardSkillTestsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.findMany()
     * 
     * // Get first 10 HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hardSkillTestsWithIdOnly = await prisma.hardSkillTests.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends hardSkillTestsFindManyArgs>(args?: SelectSubset<T, hardSkillTestsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HardSkillTests.
     * @param {hardSkillTestsCreateArgs} args - Arguments to create a HardSkillTests.
     * @example
     * // Create one HardSkillTests
     * const HardSkillTests = await prisma.hardSkillTests.create({
     *   data: {
     *     // ... data to create a HardSkillTests
     *   }
     * })
     * 
     */
    create<T extends hardSkillTestsCreateArgs>(args: SelectSubset<T, hardSkillTestsCreateArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HardSkillTests.
     * @param {hardSkillTestsCreateManyArgs} args - Arguments to create many HardSkillTests.
     * @example
     * // Create many HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends hardSkillTestsCreateManyArgs>(args?: SelectSubset<T, hardSkillTestsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HardSkillTests.
     * @param {hardSkillTestsDeleteArgs} args - Arguments to delete one HardSkillTests.
     * @example
     * // Delete one HardSkillTests
     * const HardSkillTests = await prisma.hardSkillTests.delete({
     *   where: {
     *     // ... filter to delete one HardSkillTests
     *   }
     * })
     * 
     */
    delete<T extends hardSkillTestsDeleteArgs>(args: SelectSubset<T, hardSkillTestsDeleteArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HardSkillTests.
     * @param {hardSkillTestsUpdateArgs} args - Arguments to update one HardSkillTests.
     * @example
     * // Update one HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends hardSkillTestsUpdateArgs>(args: SelectSubset<T, hardSkillTestsUpdateArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HardSkillTests.
     * @param {hardSkillTestsDeleteManyArgs} args - Arguments to filter HardSkillTests to delete.
     * @example
     * // Delete a few HardSkillTests
     * const { count } = await prisma.hardSkillTests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends hardSkillTestsDeleteManyArgs>(args?: SelectSubset<T, hardSkillTestsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HardSkillTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hardSkillTestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends hardSkillTestsUpdateManyArgs>(args: SelectSubset<T, hardSkillTestsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HardSkillTests.
     * @param {hardSkillTestsUpsertArgs} args - Arguments to update or create a HardSkillTests.
     * @example
     * // Update or create a HardSkillTests
     * const hardSkillTests = await prisma.hardSkillTests.upsert({
     *   create: {
     *     // ... data to create a HardSkillTests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HardSkillTests we want to update
     *   }
     * })
     */
    upsert<T extends hardSkillTestsUpsertArgs>(args: SelectSubset<T, hardSkillTestsUpsertArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HardSkillTests that matches the filter.
     * @param {hardSkillTestsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const hardSkillTests = await prisma.hardSkillTests.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: hardSkillTestsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a HardSkillTests.
     * @param {hardSkillTestsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const hardSkillTests = await prisma.hardSkillTests.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: hardSkillTestsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of HardSkillTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hardSkillTestsCountArgs} args - Arguments to filter HardSkillTests to count.
     * @example
     * // Count the number of HardSkillTests
     * const count = await prisma.hardSkillTests.count({
     *   where: {
     *     // ... the filter for the HardSkillTests we want to count
     *   }
     * })
    **/
    count<T extends hardSkillTestsCountArgs>(
      args?: Subset<T, hardSkillTestsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HardSkillTestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HardSkillTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardSkillTestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HardSkillTestsAggregateArgs>(args: Subset<T, HardSkillTestsAggregateArgs>): Prisma.PrismaPromise<GetHardSkillTestsAggregateType<T>>

    /**
     * Group by HardSkillTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hardSkillTestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends hardSkillTestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: hardSkillTestsGroupByArgs['orderBy'] }
        : { orderBy?: hardSkillTestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, hardSkillTestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHardSkillTestsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the hardSkillTests model
   */
  readonly fields: hardSkillTestsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for hardSkillTests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__hardSkillTestsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tests<T extends hardSkillTests$testsArgs<ExtArgs> = {}>(args?: Subset<T, hardSkillTests$testsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the hardSkillTests model
   */
  interface hardSkillTestsFieldRefs {
    readonly id: FieldRef<"hardSkillTests", 'String'>
    readonly name: FieldRef<"hardSkillTests", 'String'>
    readonly hardSkillNumber: FieldRef<"hardSkillTests", 'Int'>
    readonly company_id: FieldRef<"hardSkillTests", 'String'>
    readonly createdAt: FieldRef<"hardSkillTests", 'DateTime'>
    readonly updatedAt: FieldRef<"hardSkillTests", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * hardSkillTests findUnique
   */
  export type hardSkillTestsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * Filter, which hardSkillTests to fetch.
     */
    where: hardSkillTestsWhereUniqueInput
  }

  /**
   * hardSkillTests findUniqueOrThrow
   */
  export type hardSkillTestsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * Filter, which hardSkillTests to fetch.
     */
    where: hardSkillTestsWhereUniqueInput
  }

  /**
   * hardSkillTests findFirst
   */
  export type hardSkillTestsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * Filter, which hardSkillTests to fetch.
     */
    where?: hardSkillTestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hardSkillTests to fetch.
     */
    orderBy?: hardSkillTestsOrderByWithRelationInput | hardSkillTestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hardSkillTests.
     */
    cursor?: hardSkillTestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hardSkillTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hardSkillTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hardSkillTests.
     */
    distinct?: HardSkillTestsScalarFieldEnum | HardSkillTestsScalarFieldEnum[]
  }

  /**
   * hardSkillTests findFirstOrThrow
   */
  export type hardSkillTestsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * Filter, which hardSkillTests to fetch.
     */
    where?: hardSkillTestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hardSkillTests to fetch.
     */
    orderBy?: hardSkillTestsOrderByWithRelationInput | hardSkillTestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hardSkillTests.
     */
    cursor?: hardSkillTestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hardSkillTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hardSkillTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hardSkillTests.
     */
    distinct?: HardSkillTestsScalarFieldEnum | HardSkillTestsScalarFieldEnum[]
  }

  /**
   * hardSkillTests findMany
   */
  export type hardSkillTestsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * Filter, which hardSkillTests to fetch.
     */
    where?: hardSkillTestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hardSkillTests to fetch.
     */
    orderBy?: hardSkillTestsOrderByWithRelationInput | hardSkillTestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hardSkillTests.
     */
    cursor?: hardSkillTestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hardSkillTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hardSkillTests.
     */
    skip?: number
    distinct?: HardSkillTestsScalarFieldEnum | HardSkillTestsScalarFieldEnum[]
  }

  /**
   * hardSkillTests create
   */
  export type hardSkillTestsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * The data needed to create a hardSkillTests.
     */
    data: XOR<hardSkillTestsCreateInput, hardSkillTestsUncheckedCreateInput>
  }

  /**
   * hardSkillTests createMany
   */
  export type hardSkillTestsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many hardSkillTests.
     */
    data: hardSkillTestsCreateManyInput | hardSkillTestsCreateManyInput[]
  }

  /**
   * hardSkillTests update
   */
  export type hardSkillTestsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * The data needed to update a hardSkillTests.
     */
    data: XOR<hardSkillTestsUpdateInput, hardSkillTestsUncheckedUpdateInput>
    /**
     * Choose, which hardSkillTests to update.
     */
    where: hardSkillTestsWhereUniqueInput
  }

  /**
   * hardSkillTests updateMany
   */
  export type hardSkillTestsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update hardSkillTests.
     */
    data: XOR<hardSkillTestsUpdateManyMutationInput, hardSkillTestsUncheckedUpdateManyInput>
    /**
     * Filter which hardSkillTests to update
     */
    where?: hardSkillTestsWhereInput
    /**
     * Limit how many hardSkillTests to update.
     */
    limit?: number
  }

  /**
   * hardSkillTests upsert
   */
  export type hardSkillTestsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * The filter to search for the hardSkillTests to update in case it exists.
     */
    where: hardSkillTestsWhereUniqueInput
    /**
     * In case the hardSkillTests found by the `where` argument doesn't exist, create a new hardSkillTests with this data.
     */
    create: XOR<hardSkillTestsCreateInput, hardSkillTestsUncheckedCreateInput>
    /**
     * In case the hardSkillTests was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hardSkillTestsUpdateInput, hardSkillTestsUncheckedUpdateInput>
  }

  /**
   * hardSkillTests delete
   */
  export type hardSkillTestsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
    /**
     * Filter which hardSkillTests to delete.
     */
    where: hardSkillTestsWhereUniqueInput
  }

  /**
   * hardSkillTests deleteMany
   */
  export type hardSkillTestsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hardSkillTests to delete
     */
    where?: hardSkillTestsWhereInput
    /**
     * Limit how many hardSkillTests to delete.
     */
    limit?: number
  }

  /**
   * hardSkillTests findRaw
   */
  export type hardSkillTestsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * hardSkillTests aggregateRaw
   */
  export type hardSkillTestsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * hardSkillTests.tests
   */
  export type hardSkillTests$testsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    where?: TestItemWhereInput
    orderBy?: TestItemOrderByWithRelationInput | TestItemOrderByWithRelationInput[]
    cursor?: TestItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestItemScalarFieldEnum | TestItemScalarFieldEnum[]
  }

  /**
   * hardSkillTests without action
   */
  export type hardSkillTestsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hardSkillTests
     */
    select?: hardSkillTestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the hardSkillTests
     */
    omit?: hardSkillTestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hardSkillTestsInclude<ExtArgs> | null
  }


  /**
   * Model TestItem
   */

  export type AggregateTestItem = {
    _count: TestItemCountAggregateOutputType | null
    _avg: TestItemAvgAggregateOutputType | null
    _sum: TestItemSumAggregateOutputType | null
    _min: TestItemMinAggregateOutputType | null
    _max: TestItemMaxAggregateOutputType | null
  }

  export type TestItemAvgAggregateOutputType = {
    correctAnswer: number | null
  }

  export type TestItemSumAggregateOutputType = {
    correctAnswer: number | null
  }

  export type TestItemMinAggregateOutputType = {
    id: string | null
    question: string | null
    correctAnswer: number | null
    hardSkillTestsId: string | null
  }

  export type TestItemMaxAggregateOutputType = {
    id: string | null
    question: string | null
    correctAnswer: number | null
    hardSkillTestsId: string | null
  }

  export type TestItemCountAggregateOutputType = {
    id: number
    question: number
    options: number
    correctAnswer: number
    hardSkillTestsId: number
    _all: number
  }


  export type TestItemAvgAggregateInputType = {
    correctAnswer?: true
  }

  export type TestItemSumAggregateInputType = {
    correctAnswer?: true
  }

  export type TestItemMinAggregateInputType = {
    id?: true
    question?: true
    correctAnswer?: true
    hardSkillTestsId?: true
  }

  export type TestItemMaxAggregateInputType = {
    id?: true
    question?: true
    correctAnswer?: true
    hardSkillTestsId?: true
  }

  export type TestItemCountAggregateInputType = {
    id?: true
    question?: true
    options?: true
    correctAnswer?: true
    hardSkillTestsId?: true
    _all?: true
  }

  export type TestItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestItem to aggregate.
     */
    where?: TestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestItems to fetch.
     */
    orderBy?: TestItemOrderByWithRelationInput | TestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestItems
    **/
    _count?: true | TestItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestItemMaxAggregateInputType
  }

  export type GetTestItemAggregateType<T extends TestItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTestItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestItem[P]>
      : GetScalarType<T[P], AggregateTestItem[P]>
  }




  export type TestItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestItemWhereInput
    orderBy?: TestItemOrderByWithAggregationInput | TestItemOrderByWithAggregationInput[]
    by: TestItemScalarFieldEnum[] | TestItemScalarFieldEnum
    having?: TestItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestItemCountAggregateInputType | true
    _avg?: TestItemAvgAggregateInputType
    _sum?: TestItemSumAggregateInputType
    _min?: TestItemMinAggregateInputType
    _max?: TestItemMaxAggregateInputType
  }

  export type TestItemGroupByOutputType = {
    id: string
    question: string
    options: string[]
    correctAnswer: number
    hardSkillTestsId: string
    _count: TestItemCountAggregateOutputType | null
    _avg: TestItemAvgAggregateOutputType | null
    _sum: TestItemSumAggregateOutputType | null
    _min: TestItemMinAggregateOutputType | null
    _max: TestItemMaxAggregateOutputType | null
  }

  type GetTestItemGroupByPayload<T extends TestItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestItemGroupByOutputType[P]>
            : GetScalarType<T[P], TestItemGroupByOutputType[P]>
        }
      >
    >


  export type TestItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    options?: boolean
    correctAnswer?: boolean
    hardSkillTestsId?: boolean
    test?: boolean | hardSkillTestsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testItem"]>



  export type TestItemSelectScalar = {
    id?: boolean
    question?: boolean
    options?: boolean
    correctAnswer?: boolean
    hardSkillTestsId?: boolean
  }

  export type TestItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question" | "options" | "correctAnswer" | "hardSkillTestsId", ExtArgs["result"]["testItem"]>
  export type TestItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | hardSkillTestsDefaultArgs<ExtArgs>
  }

  export type $TestItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestItem"
    objects: {
      test: Prisma.$hardSkillTestsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      options: string[]
      correctAnswer: number
      hardSkillTestsId: string
    }, ExtArgs["result"]["testItem"]>
    composites: {}
  }

  type TestItemGetPayload<S extends boolean | null | undefined | TestItemDefaultArgs> = $Result.GetResult<Prisma.$TestItemPayload, S>

  type TestItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestItemCountAggregateInputType | true
    }

  export interface TestItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestItem'], meta: { name: 'TestItem' } }
    /**
     * Find zero or one TestItem that matches the filter.
     * @param {TestItemFindUniqueArgs} args - Arguments to find a TestItem
     * @example
     * // Get one TestItem
     * const testItem = await prisma.testItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestItemFindUniqueArgs>(args: SelectSubset<T, TestItemFindUniqueArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestItemFindUniqueOrThrowArgs} args - Arguments to find a TestItem
     * @example
     * // Get one TestItem
     * const testItem = await prisma.testItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestItemFindUniqueOrThrowArgs>(args: SelectSubset<T, TestItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemFindFirstArgs} args - Arguments to find a TestItem
     * @example
     * // Get one TestItem
     * const testItem = await prisma.testItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestItemFindFirstArgs>(args?: SelectSubset<T, TestItemFindFirstArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemFindFirstOrThrowArgs} args - Arguments to find a TestItem
     * @example
     * // Get one TestItem
     * const testItem = await prisma.testItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestItemFindFirstOrThrowArgs>(args?: SelectSubset<T, TestItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestItems
     * const testItems = await prisma.testItem.findMany()
     * 
     * // Get first 10 TestItems
     * const testItems = await prisma.testItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testItemWithIdOnly = await prisma.testItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestItemFindManyArgs>(args?: SelectSubset<T, TestItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestItem.
     * @param {TestItemCreateArgs} args - Arguments to create a TestItem.
     * @example
     * // Create one TestItem
     * const TestItem = await prisma.testItem.create({
     *   data: {
     *     // ... data to create a TestItem
     *   }
     * })
     * 
     */
    create<T extends TestItemCreateArgs>(args: SelectSubset<T, TestItemCreateArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestItems.
     * @param {TestItemCreateManyArgs} args - Arguments to create many TestItems.
     * @example
     * // Create many TestItems
     * const testItem = await prisma.testItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestItemCreateManyArgs>(args?: SelectSubset<T, TestItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TestItem.
     * @param {TestItemDeleteArgs} args - Arguments to delete one TestItem.
     * @example
     * // Delete one TestItem
     * const TestItem = await prisma.testItem.delete({
     *   where: {
     *     // ... filter to delete one TestItem
     *   }
     * })
     * 
     */
    delete<T extends TestItemDeleteArgs>(args: SelectSubset<T, TestItemDeleteArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestItem.
     * @param {TestItemUpdateArgs} args - Arguments to update one TestItem.
     * @example
     * // Update one TestItem
     * const testItem = await prisma.testItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestItemUpdateArgs>(args: SelectSubset<T, TestItemUpdateArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestItems.
     * @param {TestItemDeleteManyArgs} args - Arguments to filter TestItems to delete.
     * @example
     * // Delete a few TestItems
     * const { count } = await prisma.testItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestItemDeleteManyArgs>(args?: SelectSubset<T, TestItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestItems
     * const testItem = await prisma.testItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestItemUpdateManyArgs>(args: SelectSubset<T, TestItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestItem.
     * @param {TestItemUpsertArgs} args - Arguments to update or create a TestItem.
     * @example
     * // Update or create a TestItem
     * const testItem = await prisma.testItem.upsert({
     *   create: {
     *     // ... data to create a TestItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestItem we want to update
     *   }
     * })
     */
    upsert<T extends TestItemUpsertArgs>(args: SelectSubset<T, TestItemUpsertArgs<ExtArgs>>): Prisma__TestItemClient<$Result.GetResult<Prisma.$TestItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestItems that matches the filter.
     * @param {TestItemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const testItem = await prisma.testItem.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TestItemFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TestItem.
     * @param {TestItemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const testItem = await prisma.testItem.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TestItemAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TestItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemCountArgs} args - Arguments to filter TestItems to count.
     * @example
     * // Count the number of TestItems
     * const count = await prisma.testItem.count({
     *   where: {
     *     // ... the filter for the TestItems we want to count
     *   }
     * })
    **/
    count<T extends TestItemCountArgs>(
      args?: Subset<T, TestItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestItemAggregateArgs>(args: Subset<T, TestItemAggregateArgs>): Prisma.PrismaPromise<GetTestItemAggregateType<T>>

    /**
     * Group by TestItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestItemGroupByArgs['orderBy'] }
        : { orderBy?: TestItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestItem model
   */
  readonly fields: TestItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends hardSkillTestsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, hardSkillTestsDefaultArgs<ExtArgs>>): Prisma__hardSkillTestsClient<$Result.GetResult<Prisma.$hardSkillTestsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestItem model
   */
  interface TestItemFieldRefs {
    readonly id: FieldRef<"TestItem", 'String'>
    readonly question: FieldRef<"TestItem", 'String'>
    readonly options: FieldRef<"TestItem", 'String[]'>
    readonly correctAnswer: FieldRef<"TestItem", 'Int'>
    readonly hardSkillTestsId: FieldRef<"TestItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TestItem findUnique
   */
  export type TestItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * Filter, which TestItem to fetch.
     */
    where: TestItemWhereUniqueInput
  }

  /**
   * TestItem findUniqueOrThrow
   */
  export type TestItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * Filter, which TestItem to fetch.
     */
    where: TestItemWhereUniqueInput
  }

  /**
   * TestItem findFirst
   */
  export type TestItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * Filter, which TestItem to fetch.
     */
    where?: TestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestItems to fetch.
     */
    orderBy?: TestItemOrderByWithRelationInput | TestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestItems.
     */
    cursor?: TestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestItems.
     */
    distinct?: TestItemScalarFieldEnum | TestItemScalarFieldEnum[]
  }

  /**
   * TestItem findFirstOrThrow
   */
  export type TestItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * Filter, which TestItem to fetch.
     */
    where?: TestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestItems to fetch.
     */
    orderBy?: TestItemOrderByWithRelationInput | TestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestItems.
     */
    cursor?: TestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestItems.
     */
    distinct?: TestItemScalarFieldEnum | TestItemScalarFieldEnum[]
  }

  /**
   * TestItem findMany
   */
  export type TestItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * Filter, which TestItems to fetch.
     */
    where?: TestItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestItems to fetch.
     */
    orderBy?: TestItemOrderByWithRelationInput | TestItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestItems.
     */
    cursor?: TestItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestItems.
     */
    skip?: number
    distinct?: TestItemScalarFieldEnum | TestItemScalarFieldEnum[]
  }

  /**
   * TestItem create
   */
  export type TestItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * The data needed to create a TestItem.
     */
    data: XOR<TestItemCreateInput, TestItemUncheckedCreateInput>
  }

  /**
   * TestItem createMany
   */
  export type TestItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestItems.
     */
    data: TestItemCreateManyInput | TestItemCreateManyInput[]
  }

  /**
   * TestItem update
   */
  export type TestItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * The data needed to update a TestItem.
     */
    data: XOR<TestItemUpdateInput, TestItemUncheckedUpdateInput>
    /**
     * Choose, which TestItem to update.
     */
    where: TestItemWhereUniqueInput
  }

  /**
   * TestItem updateMany
   */
  export type TestItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestItems.
     */
    data: XOR<TestItemUpdateManyMutationInput, TestItemUncheckedUpdateManyInput>
    /**
     * Filter which TestItems to update
     */
    where?: TestItemWhereInput
    /**
     * Limit how many TestItems to update.
     */
    limit?: number
  }

  /**
   * TestItem upsert
   */
  export type TestItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * The filter to search for the TestItem to update in case it exists.
     */
    where: TestItemWhereUniqueInput
    /**
     * In case the TestItem found by the `where` argument doesn't exist, create a new TestItem with this data.
     */
    create: XOR<TestItemCreateInput, TestItemUncheckedCreateInput>
    /**
     * In case the TestItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestItemUpdateInput, TestItemUncheckedUpdateInput>
  }

  /**
   * TestItem delete
   */
  export type TestItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
    /**
     * Filter which TestItem to delete.
     */
    where: TestItemWhereUniqueInput
  }

  /**
   * TestItem deleteMany
   */
  export type TestItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestItems to delete
     */
    where?: TestItemWhereInput
    /**
     * Limit how many TestItems to delete.
     */
    limit?: number
  }

  /**
   * TestItem findRaw
   */
  export type TestItemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TestItem aggregateRaw
   */
  export type TestItemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TestItem without action
   */
  export type TestItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestItem
     */
    select?: TestItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestItem
     */
    omit?: TestItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    profile_img: 'profile_img',
    hard_skills: 'hard_skills',
    soft_skills: 'soft_skills',
    position: 'position',
    about: 'about',
    location: 'location',
    experience: 'experience',
    role: 'role',
    level: 'level',
    education: 'education',
    projects: 'projects',
    certificates: 'certificates',
    languages: 'languages',
    social_medias: 'social_medias',
    messages: 'messages',
    submitted_vacancies: 'submitted_vacancies',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    messageText: 'messageText',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    degree: 'degree',
    field_of_study: 'field_of_study',
    institution: 'institution',
    description: 'description',
    startDate: 'startDate',
    type_of_education: 'type_of_education',
    endDate: 'endDate'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const ProjectsOfUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    project_title: 'project_title',
    description: 'description',
    used_technologies: 'used_technologies'
  };

  export type ProjectsOfUserScalarFieldEnum = (typeof ProjectsOfUserScalarFieldEnum)[keyof typeof ProjectsOfUserScalarFieldEnum]


  export const SoftSkillsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type'
  };

  export type SoftSkillsScalarFieldEnum = (typeof SoftSkillsScalarFieldEnum)[keyof typeof SoftSkillsScalarFieldEnum]


  export const HardSkillsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type'
  };

  export type HardSkillsScalarFieldEnum = (typeof HardSkillsScalarFieldEnum)[keyof typeof HardSkillsScalarFieldEnum]


  export const CertificatesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    certificate_title: 'certificate_title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type CertificatesScalarFieldEnum = (typeof CertificatesScalarFieldEnum)[keyof typeof CertificatesScalarFieldEnum]


  export const LanguageScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    level: 'level',
    language: 'language'
  };

  export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


  export const SocialMediaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    platform: 'platform',
    profile_link: 'profile_link'
  };

  export type SocialMediaScalarFieldEnum = (typeof SocialMediaScalarFieldEnum)[keyof typeof SocialMediaScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    phone_number: 'phone_number',
    location: 'location',
    company_name: 'company_name',
    role: 'role',
    company_logo: 'company_logo',
    workers_number: 'workers_number',
    organized_year: 'organized_year',
    social_networks: 'social_networks',
    vacancies: 'vacancies',
    projects: 'projects',
    partners: 'partners',
    messages: 'messages',
    hard_skill_tests: 'hard_skill_tests',
    company_description: 'company_description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const SocialNetworksScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    platform: 'platform',
    profile_link: 'profile_link'
  };

  export type SocialNetworksScalarFieldEnum = (typeof SocialNetworksScalarFieldEnum)[keyof typeof SocialNetworksScalarFieldEnum]


  export const VacansiesScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    position: 'position',
    level: 'level',
    submitted_candidates: 'submitted_candidates',
    passedToHardSkills: 'passedToHardSkills',
    passedToSoftSkills: 'passedToSoftSkills',
    hard_requirements: 'hard_requirements',
    soft_requirements: 'soft_requirements',
    work_start_hour: 'work_start_hour',
    work_end_hour: 'work_end_hour',
    description: 'description',
    language_requirements: 'language_requirements',
    hard_skill_tests: 'hard_skill_tests',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VacansiesScalarFieldEnum = (typeof VacansiesScalarFieldEnum)[keyof typeof VacansiesScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    project_title: 'project_title',
    start_date: 'start_date',
    end_date: 'end_date',
    project_price: 'project_price',
    project_link: 'project_link',
    project_desc: 'project_desc'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const PartnersScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    partner_name: 'partner_name',
    description: 'description'
  };

  export type PartnersScalarFieldEnum = (typeof PartnersScalarFieldEnum)[keyof typeof PartnersScalarFieldEnum]


  export const HardSkillTestsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    hardSkillNumber: 'hardSkillNumber',
    company_id: 'company_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HardSkillTestsScalarFieldEnum = (typeof HardSkillTestsScalarFieldEnum)[keyof typeof HardSkillTestsScalarFieldEnum]


  export const TestItemScalarFieldEnum: {
    id: 'id',
    question: 'question',
    options: 'options',
    correctAnswer: 'correctAnswer',
    hardSkillTestsId: 'hardSkillTestsId'
  };

  export type TestItemScalarFieldEnum = (typeof TestItemScalarFieldEnum)[keyof typeof TestItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'UserLevel'
   */
  export type EnumUserLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserLevel'>
    


  /**
   * Reference to a field of type 'UserLevel[]'
   */
  export type ListEnumUserLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserLevel[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Level'
   */
  export type EnumLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Level'>
    


  /**
   * Reference to a field of type 'Level[]'
   */
  export type ListEnumLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Level[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profile_img?: StringNullableFilter<"User"> | string | null
    hard_skills?: StringNullableListFilter<"User">
    soft_skills?: StringNullableListFilter<"User">
    position?: StringFilter<"User"> | string
    about?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    experience?: IntNullableFilter<"User"> | number | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    level?: EnumUserLevelFilter<"User"> | $Enums.UserLevel
    education?: StringNullableListFilter<"User">
    projects?: StringNullableListFilter<"User">
    certificates?: StringNullableListFilter<"User">
    languages?: StringNullableListFilter<"User">
    social_medias?: StringNullableListFilter<"User">
    messages?: StringNullableListFilter<"User">
    submitted_vacancies?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_img?: SortOrder
    hard_skills?: SortOrder
    soft_skills?: SortOrder
    position?: SortOrder
    about?: SortOrder
    location?: SortOrder
    experience?: SortOrder
    role?: SortOrder
    level?: SortOrder
    education?: SortOrder
    projects?: SortOrder
    certificates?: SortOrder
    languages?: SortOrder
    social_medias?: SortOrder
    messages?: SortOrder
    submitted_vacancies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profile_img?: StringNullableFilter<"User"> | string | null
    hard_skills?: StringNullableListFilter<"User">
    soft_skills?: StringNullableListFilter<"User">
    position?: StringFilter<"User"> | string
    about?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    experience?: IntNullableFilter<"User"> | number | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    level?: EnumUserLevelFilter<"User"> | $Enums.UserLevel
    education?: StringNullableListFilter<"User">
    projects?: StringNullableListFilter<"User">
    certificates?: StringNullableListFilter<"User">
    languages?: StringNullableListFilter<"User">
    social_medias?: StringNullableListFilter<"User">
    messages?: StringNullableListFilter<"User">
    submitted_vacancies?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_img?: SortOrder
    hard_skills?: SortOrder
    soft_skills?: SortOrder
    position?: SortOrder
    about?: SortOrder
    location?: SortOrder
    experience?: SortOrder
    role?: SortOrder
    level?: SortOrder
    education?: SortOrder
    projects?: SortOrder
    certificates?: SortOrder
    languages?: SortOrder
    social_medias?: SortOrder
    messages?: SortOrder
    submitted_vacancies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    profile_img?: StringNullableWithAggregatesFilter<"User"> | string | null
    hard_skills?: StringNullableListFilter<"User">
    soft_skills?: StringNullableListFilter<"User">
    position?: StringWithAggregatesFilter<"User"> | string
    about?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    experience?: IntNullableWithAggregatesFilter<"User"> | number | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    level?: EnumUserLevelWithAggregatesFilter<"User"> | $Enums.UserLevel
    education?: StringNullableListFilter<"User">
    projects?: StringNullableListFilter<"User">
    certificates?: StringNullableListFilter<"User">
    languages?: StringNullableListFilter<"User">
    social_medias?: StringNullableListFilter<"User">
    messages?: StringNullableListFilter<"User">
    submitted_vacancies?: StringNullableListFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    messageText?: StringFilter<"Message"> | string
    imageUrl?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    messageText?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    messageText?: StringFilter<"Message"> | string
    imageUrl?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    messageText?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    receiverId?: StringWithAggregatesFilter<"Message"> | string
    messageText?: StringWithAggregatesFilter<"Message"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Message"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    id?: StringFilter<"Education"> | string
    userId?: StringFilter<"Education"> | string
    degree?: StringFilter<"Education"> | string
    field_of_study?: StringFilter<"Education"> | string
    institution?: StringFilter<"Education"> | string
    description?: StringNullableFilter<"Education"> | string | null
    startDate?: StringFilter<"Education"> | string
    type_of_education?: StringNullableFilter<"Education"> | string | null
    endDate?: StringNullableFilter<"Education"> | string | null
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    degree?: SortOrder
    field_of_study?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    type_of_education?: SortOrder
    endDate?: SortOrder
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    userId?: StringFilter<"Education"> | string
    degree?: StringFilter<"Education"> | string
    field_of_study?: StringFilter<"Education"> | string
    institution?: StringFilter<"Education"> | string
    description?: StringNullableFilter<"Education"> | string | null
    startDate?: StringFilter<"Education"> | string
    type_of_education?: StringNullableFilter<"Education"> | string | null
    endDate?: StringNullableFilter<"Education"> | string | null
  }, "id">

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    degree?: SortOrder
    field_of_study?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    type_of_education?: SortOrder
    endDate?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Education"> | string
    userId?: StringWithAggregatesFilter<"Education"> | string
    degree?: StringWithAggregatesFilter<"Education"> | string
    field_of_study?: StringWithAggregatesFilter<"Education"> | string
    institution?: StringWithAggregatesFilter<"Education"> | string
    description?: StringNullableWithAggregatesFilter<"Education"> | string | null
    startDate?: StringWithAggregatesFilter<"Education"> | string
    type_of_education?: StringNullableWithAggregatesFilter<"Education"> | string | null
    endDate?: StringNullableWithAggregatesFilter<"Education"> | string | null
  }

  export type ProjectsOfUserWhereInput = {
    AND?: ProjectsOfUserWhereInput | ProjectsOfUserWhereInput[]
    OR?: ProjectsOfUserWhereInput[]
    NOT?: ProjectsOfUserWhereInput | ProjectsOfUserWhereInput[]
    id?: StringFilter<"ProjectsOfUser"> | string
    userId?: StringFilter<"ProjectsOfUser"> | string
    project_title?: StringFilter<"ProjectsOfUser"> | string
    description?: StringFilter<"ProjectsOfUser"> | string
    used_technologies?: StringNullableListFilter<"ProjectsOfUser">
  }

  export type ProjectsOfUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    project_title?: SortOrder
    description?: SortOrder
    used_technologies?: SortOrder
  }

  export type ProjectsOfUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectsOfUserWhereInput | ProjectsOfUserWhereInput[]
    OR?: ProjectsOfUserWhereInput[]
    NOT?: ProjectsOfUserWhereInput | ProjectsOfUserWhereInput[]
    userId?: StringFilter<"ProjectsOfUser"> | string
    project_title?: StringFilter<"ProjectsOfUser"> | string
    description?: StringFilter<"ProjectsOfUser"> | string
    used_technologies?: StringNullableListFilter<"ProjectsOfUser">
  }, "id">

  export type ProjectsOfUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    project_title?: SortOrder
    description?: SortOrder
    used_technologies?: SortOrder
    _count?: ProjectsOfUserCountOrderByAggregateInput
    _max?: ProjectsOfUserMaxOrderByAggregateInput
    _min?: ProjectsOfUserMinOrderByAggregateInput
  }

  export type ProjectsOfUserScalarWhereWithAggregatesInput = {
    AND?: ProjectsOfUserScalarWhereWithAggregatesInput | ProjectsOfUserScalarWhereWithAggregatesInput[]
    OR?: ProjectsOfUserScalarWhereWithAggregatesInput[]
    NOT?: ProjectsOfUserScalarWhereWithAggregatesInput | ProjectsOfUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectsOfUser"> | string
    userId?: StringWithAggregatesFilter<"ProjectsOfUser"> | string
    project_title?: StringWithAggregatesFilter<"ProjectsOfUser"> | string
    description?: StringWithAggregatesFilter<"ProjectsOfUser"> | string
    used_technologies?: StringNullableListFilter<"ProjectsOfUser">
  }

  export type SoftSkillsWhereInput = {
    AND?: SoftSkillsWhereInput | SoftSkillsWhereInput[]
    OR?: SoftSkillsWhereInput[]
    NOT?: SoftSkillsWhereInput | SoftSkillsWhereInput[]
    id?: StringFilter<"SoftSkills"> | string
    userId?: StringFilter<"SoftSkills"> | string
    type?: StringNullableListFilter<"SoftSkills">
  }

  export type SoftSkillsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
  }

  export type SoftSkillsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoftSkillsWhereInput | SoftSkillsWhereInput[]
    OR?: SoftSkillsWhereInput[]
    NOT?: SoftSkillsWhereInput | SoftSkillsWhereInput[]
    userId?: StringFilter<"SoftSkills"> | string
    type?: StringNullableListFilter<"SoftSkills">
  }, "id">

  export type SoftSkillsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    _count?: SoftSkillsCountOrderByAggregateInput
    _max?: SoftSkillsMaxOrderByAggregateInput
    _min?: SoftSkillsMinOrderByAggregateInput
  }

  export type SoftSkillsScalarWhereWithAggregatesInput = {
    AND?: SoftSkillsScalarWhereWithAggregatesInput | SoftSkillsScalarWhereWithAggregatesInput[]
    OR?: SoftSkillsScalarWhereWithAggregatesInput[]
    NOT?: SoftSkillsScalarWhereWithAggregatesInput | SoftSkillsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SoftSkills"> | string
    userId?: StringWithAggregatesFilter<"SoftSkills"> | string
    type?: StringNullableListFilter<"SoftSkills">
  }

  export type HardSkillsWhereInput = {
    AND?: HardSkillsWhereInput | HardSkillsWhereInput[]
    OR?: HardSkillsWhereInput[]
    NOT?: HardSkillsWhereInput | HardSkillsWhereInput[]
    id?: StringFilter<"HardSkills"> | string
    userId?: StringFilter<"HardSkills"> | string
    type?: StringNullableListFilter<"HardSkills">
  }

  export type HardSkillsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
  }

  export type HardSkillsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HardSkillsWhereInput | HardSkillsWhereInput[]
    OR?: HardSkillsWhereInput[]
    NOT?: HardSkillsWhereInput | HardSkillsWhereInput[]
    userId?: StringFilter<"HardSkills"> | string
    type?: StringNullableListFilter<"HardSkills">
  }, "id">

  export type HardSkillsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    _count?: HardSkillsCountOrderByAggregateInput
    _max?: HardSkillsMaxOrderByAggregateInput
    _min?: HardSkillsMinOrderByAggregateInput
  }

  export type HardSkillsScalarWhereWithAggregatesInput = {
    AND?: HardSkillsScalarWhereWithAggregatesInput | HardSkillsScalarWhereWithAggregatesInput[]
    OR?: HardSkillsScalarWhereWithAggregatesInput[]
    NOT?: HardSkillsScalarWhereWithAggregatesInput | HardSkillsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HardSkills"> | string
    userId?: StringWithAggregatesFilter<"HardSkills"> | string
    type?: StringNullableListFilter<"HardSkills">
  }

  export type CertificatesWhereInput = {
    AND?: CertificatesWhereInput | CertificatesWhereInput[]
    OR?: CertificatesWhereInput[]
    NOT?: CertificatesWhereInput | CertificatesWhereInput[]
    id?: StringFilter<"Certificates"> | string
    userId?: StringFilter<"Certificates"> | string
    certificate_title?: StringFilter<"Certificates"> | string
    description?: StringNullableFilter<"Certificates"> | string | null
    startDate?: DateTimeFilter<"Certificates"> | Date | string
    endDate?: DateTimeNullableFilter<"Certificates"> | Date | string | null
  }

  export type CertificatesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    certificate_title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type CertificatesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CertificatesWhereInput | CertificatesWhereInput[]
    OR?: CertificatesWhereInput[]
    NOT?: CertificatesWhereInput | CertificatesWhereInput[]
    userId?: StringFilter<"Certificates"> | string
    certificate_title?: StringFilter<"Certificates"> | string
    description?: StringNullableFilter<"Certificates"> | string | null
    startDate?: DateTimeFilter<"Certificates"> | Date | string
    endDate?: DateTimeNullableFilter<"Certificates"> | Date | string | null
  }, "id">

  export type CertificatesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    certificate_title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    _count?: CertificatesCountOrderByAggregateInput
    _max?: CertificatesMaxOrderByAggregateInput
    _min?: CertificatesMinOrderByAggregateInput
  }

  export type CertificatesScalarWhereWithAggregatesInput = {
    AND?: CertificatesScalarWhereWithAggregatesInput | CertificatesScalarWhereWithAggregatesInput[]
    OR?: CertificatesScalarWhereWithAggregatesInput[]
    NOT?: CertificatesScalarWhereWithAggregatesInput | CertificatesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Certificates"> | string
    userId?: StringWithAggregatesFilter<"Certificates"> | string
    certificate_title?: StringWithAggregatesFilter<"Certificates"> | string
    description?: StringNullableWithAggregatesFilter<"Certificates"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Certificates"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Certificates"> | Date | string | null
  }

  export type LanguageWhereInput = {
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    id?: StringFilter<"Language"> | string
    userId?: StringFilter<"Language"> | string
    level?: StringFilter<"Language"> | string
    language?: StringFilter<"Language"> | string
  }

  export type LanguageOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    language?: SortOrder
  }

  export type LanguageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    userId?: StringFilter<"Language"> | string
    level?: StringFilter<"Language"> | string
    language?: StringFilter<"Language"> | string
  }, "id">

  export type LanguageOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    language?: SortOrder
    _count?: LanguageCountOrderByAggregateInput
    _max?: LanguageMaxOrderByAggregateInput
    _min?: LanguageMinOrderByAggregateInput
  }

  export type LanguageScalarWhereWithAggregatesInput = {
    AND?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    OR?: LanguageScalarWhereWithAggregatesInput[]
    NOT?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Language"> | string
    userId?: StringWithAggregatesFilter<"Language"> | string
    level?: StringWithAggregatesFilter<"Language"> | string
    language?: StringWithAggregatesFilter<"Language"> | string
  }

  export type SocialMediaWhereInput = {
    AND?: SocialMediaWhereInput | SocialMediaWhereInput[]
    OR?: SocialMediaWhereInput[]
    NOT?: SocialMediaWhereInput | SocialMediaWhereInput[]
    id?: StringFilter<"SocialMedia"> | string
    userId?: StringFilter<"SocialMedia"> | string
    platform?: StringFilter<"SocialMedia"> | string
    profile_link?: StringFilter<"SocialMedia"> | string
  }

  export type SocialMediaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type SocialMediaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SocialMediaWhereInput | SocialMediaWhereInput[]
    OR?: SocialMediaWhereInput[]
    NOT?: SocialMediaWhereInput | SocialMediaWhereInput[]
    userId?: StringFilter<"SocialMedia"> | string
    platform?: StringFilter<"SocialMedia"> | string
    profile_link?: StringFilter<"SocialMedia"> | string
  }, "id">

  export type SocialMediaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
    _count?: SocialMediaCountOrderByAggregateInput
    _max?: SocialMediaMaxOrderByAggregateInput
    _min?: SocialMediaMinOrderByAggregateInput
  }

  export type SocialMediaScalarWhereWithAggregatesInput = {
    AND?: SocialMediaScalarWhereWithAggregatesInput | SocialMediaScalarWhereWithAggregatesInput[]
    OR?: SocialMediaScalarWhereWithAggregatesInput[]
    NOT?: SocialMediaScalarWhereWithAggregatesInput | SocialMediaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialMedia"> | string
    userId?: StringWithAggregatesFilter<"SocialMedia"> | string
    platform?: StringWithAggregatesFilter<"SocialMedia"> | string
    profile_link?: StringWithAggregatesFilter<"SocialMedia"> | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    email?: StringFilter<"Company"> | string
    password?: StringFilter<"Company"> | string
    phone_number?: StringFilter<"Company"> | string
    location?: StringFilter<"Company"> | string
    company_name?: StringFilter<"Company"> | string
    role?: EnumRoleFilter<"Company"> | $Enums.Role
    company_logo?: StringNullableListFilter<"Company">
    workers_number?: IntNullableFilter<"Company"> | number | null
    organized_year?: IntNullableFilter<"Company"> | number | null
    social_networks?: StringNullableListFilter<"Company">
    vacancies?: StringNullableListFilter<"Company">
    projects?: StringNullableListFilter<"Company">
    partners?: StringNullableListFilter<"Company">
    messages?: StringNullableListFilter<"Company">
    hard_skill_tests?: StringNullableListFilter<"Company">
    company_description?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    location?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    company_logo?: SortOrder
    workers_number?: SortOrder
    organized_year?: SortOrder
    social_networks?: SortOrder
    vacancies?: SortOrder
    projects?: SortOrder
    partners?: SortOrder
    messages?: SortOrder
    hard_skill_tests?: SortOrder
    company_description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    company_name?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    password?: StringFilter<"Company"> | string
    phone_number?: StringFilter<"Company"> | string
    location?: StringFilter<"Company"> | string
    role?: EnumRoleFilter<"Company"> | $Enums.Role
    company_logo?: StringNullableListFilter<"Company">
    workers_number?: IntNullableFilter<"Company"> | number | null
    organized_year?: IntNullableFilter<"Company"> | number | null
    social_networks?: StringNullableListFilter<"Company">
    vacancies?: StringNullableListFilter<"Company">
    projects?: StringNullableListFilter<"Company">
    partners?: StringNullableListFilter<"Company">
    messages?: StringNullableListFilter<"Company">
    hard_skill_tests?: StringNullableListFilter<"Company">
    company_description?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }, "id" | "email" | "company_name">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    location?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    company_logo?: SortOrder
    workers_number?: SortOrder
    organized_year?: SortOrder
    social_networks?: SortOrder
    vacancies?: SortOrder
    projects?: SortOrder
    partners?: SortOrder
    messages?: SortOrder
    hard_skill_tests?: SortOrder
    company_description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    email?: StringWithAggregatesFilter<"Company"> | string
    password?: StringWithAggregatesFilter<"Company"> | string
    phone_number?: StringWithAggregatesFilter<"Company"> | string
    location?: StringWithAggregatesFilter<"Company"> | string
    company_name?: StringWithAggregatesFilter<"Company"> | string
    role?: EnumRoleWithAggregatesFilter<"Company"> | $Enums.Role
    company_logo?: StringNullableListFilter<"Company">
    workers_number?: IntNullableWithAggregatesFilter<"Company"> | number | null
    organized_year?: IntNullableWithAggregatesFilter<"Company"> | number | null
    social_networks?: StringNullableListFilter<"Company">
    vacancies?: StringNullableListFilter<"Company">
    projects?: StringNullableListFilter<"Company">
    partners?: StringNullableListFilter<"Company">
    messages?: StringNullableListFilter<"Company">
    hard_skill_tests?: StringNullableListFilter<"Company">
    company_description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type SocialNetworksWhereInput = {
    AND?: SocialNetworksWhereInput | SocialNetworksWhereInput[]
    OR?: SocialNetworksWhereInput[]
    NOT?: SocialNetworksWhereInput | SocialNetworksWhereInput[]
    id?: StringFilter<"SocialNetworks"> | string
    company_id?: StringFilter<"SocialNetworks"> | string
    platform?: StringNullableFilter<"SocialNetworks"> | string | null
    profile_link?: StringFilter<"SocialNetworks"> | string
  }

  export type SocialNetworksOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type SocialNetworksWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SocialNetworksWhereInput | SocialNetworksWhereInput[]
    OR?: SocialNetworksWhereInput[]
    NOT?: SocialNetworksWhereInput | SocialNetworksWhereInput[]
    company_id?: StringFilter<"SocialNetworks"> | string
    platform?: StringNullableFilter<"SocialNetworks"> | string | null
    profile_link?: StringFilter<"SocialNetworks"> | string
  }, "id">

  export type SocialNetworksOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
    _count?: SocialNetworksCountOrderByAggregateInput
    _max?: SocialNetworksMaxOrderByAggregateInput
    _min?: SocialNetworksMinOrderByAggregateInput
  }

  export type SocialNetworksScalarWhereWithAggregatesInput = {
    AND?: SocialNetworksScalarWhereWithAggregatesInput | SocialNetworksScalarWhereWithAggregatesInput[]
    OR?: SocialNetworksScalarWhereWithAggregatesInput[]
    NOT?: SocialNetworksScalarWhereWithAggregatesInput | SocialNetworksScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialNetworks"> | string
    company_id?: StringWithAggregatesFilter<"SocialNetworks"> | string
    platform?: StringNullableWithAggregatesFilter<"SocialNetworks"> | string | null
    profile_link?: StringWithAggregatesFilter<"SocialNetworks"> | string
  }

  export type VacansiesWhereInput = {
    AND?: VacansiesWhereInput | VacansiesWhereInput[]
    OR?: VacansiesWhereInput[]
    NOT?: VacansiesWhereInput | VacansiesWhereInput[]
    id?: StringFilter<"Vacansies"> | string
    company_id?: StringFilter<"Vacansies"> | string
    position?: StringFilter<"Vacansies"> | string
    level?: EnumLevelNullableFilter<"Vacansies"> | $Enums.Level | null
    submitted_candidates?: StringNullableListFilter<"Vacansies">
    passedToHardSkills?: StringNullableListFilter<"Vacansies">
    passedToSoftSkills?: StringNullableListFilter<"Vacansies">
    hard_requirements?: StringNullableListFilter<"Vacansies">
    soft_requirements?: StringNullableListFilter<"Vacansies">
    work_start_hour?: StringFilter<"Vacansies"> | string
    work_end_hour?: StringFilter<"Vacansies"> | string
    description?: StringNullableFilter<"Vacansies"> | string | null
    language_requirements?: StringNullableListFilter<"Vacansies">
    hard_skill_tests?: IntFilter<"Vacansies"> | number
    createdAt?: DateTimeFilter<"Vacansies"> | Date | string
    updatedAt?: DateTimeFilter<"Vacansies"> | Date | string
  }

  export type VacansiesOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    position?: SortOrder
    level?: SortOrder
    submitted_candidates?: SortOrder
    passedToHardSkills?: SortOrder
    passedToSoftSkills?: SortOrder
    hard_requirements?: SortOrder
    soft_requirements?: SortOrder
    work_start_hour?: SortOrder
    work_end_hour?: SortOrder
    description?: SortOrder
    language_requirements?: SortOrder
    hard_skill_tests?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VacansiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VacansiesWhereInput | VacansiesWhereInput[]
    OR?: VacansiesWhereInput[]
    NOT?: VacansiesWhereInput | VacansiesWhereInput[]
    company_id?: StringFilter<"Vacansies"> | string
    position?: StringFilter<"Vacansies"> | string
    level?: EnumLevelNullableFilter<"Vacansies"> | $Enums.Level | null
    submitted_candidates?: StringNullableListFilter<"Vacansies">
    passedToHardSkills?: StringNullableListFilter<"Vacansies">
    passedToSoftSkills?: StringNullableListFilter<"Vacansies">
    hard_requirements?: StringNullableListFilter<"Vacansies">
    soft_requirements?: StringNullableListFilter<"Vacansies">
    work_start_hour?: StringFilter<"Vacansies"> | string
    work_end_hour?: StringFilter<"Vacansies"> | string
    description?: StringNullableFilter<"Vacansies"> | string | null
    language_requirements?: StringNullableListFilter<"Vacansies">
    hard_skill_tests?: IntFilter<"Vacansies"> | number
    createdAt?: DateTimeFilter<"Vacansies"> | Date | string
    updatedAt?: DateTimeFilter<"Vacansies"> | Date | string
  }, "id">

  export type VacansiesOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    position?: SortOrder
    level?: SortOrder
    submitted_candidates?: SortOrder
    passedToHardSkills?: SortOrder
    passedToSoftSkills?: SortOrder
    hard_requirements?: SortOrder
    soft_requirements?: SortOrder
    work_start_hour?: SortOrder
    work_end_hour?: SortOrder
    description?: SortOrder
    language_requirements?: SortOrder
    hard_skill_tests?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VacansiesCountOrderByAggregateInput
    _avg?: VacansiesAvgOrderByAggregateInput
    _max?: VacansiesMaxOrderByAggregateInput
    _min?: VacansiesMinOrderByAggregateInput
    _sum?: VacansiesSumOrderByAggregateInput
  }

  export type VacansiesScalarWhereWithAggregatesInput = {
    AND?: VacansiesScalarWhereWithAggregatesInput | VacansiesScalarWhereWithAggregatesInput[]
    OR?: VacansiesScalarWhereWithAggregatesInput[]
    NOT?: VacansiesScalarWhereWithAggregatesInput | VacansiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vacansies"> | string
    company_id?: StringWithAggregatesFilter<"Vacansies"> | string
    position?: StringWithAggregatesFilter<"Vacansies"> | string
    level?: EnumLevelNullableWithAggregatesFilter<"Vacansies"> | $Enums.Level | null
    submitted_candidates?: StringNullableListFilter<"Vacansies">
    passedToHardSkills?: StringNullableListFilter<"Vacansies">
    passedToSoftSkills?: StringNullableListFilter<"Vacansies">
    hard_requirements?: StringNullableListFilter<"Vacansies">
    soft_requirements?: StringNullableListFilter<"Vacansies">
    work_start_hour?: StringWithAggregatesFilter<"Vacansies"> | string
    work_end_hour?: StringWithAggregatesFilter<"Vacansies"> | string
    description?: StringNullableWithAggregatesFilter<"Vacansies"> | string | null
    language_requirements?: StringNullableListFilter<"Vacansies">
    hard_skill_tests?: IntWithAggregatesFilter<"Vacansies"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Vacansies"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vacansies"> | Date | string
  }

  export type ProjectsWhereInput = {
    AND?: ProjectsWhereInput | ProjectsWhereInput[]
    OR?: ProjectsWhereInput[]
    NOT?: ProjectsWhereInput | ProjectsWhereInput[]
    id?: StringFilter<"Projects"> | string
    company_id?: StringFilter<"Projects"> | string
    project_title?: StringFilter<"Projects"> | string
    start_date?: DateTimeFilter<"Projects"> | Date | string
    end_date?: DateTimeFilter<"Projects"> | Date | string
    project_price?: FloatNullableFilter<"Projects"> | number | null
    project_link?: StringNullableFilter<"Projects"> | string | null
    project_desc?: StringNullableFilter<"Projects"> | string | null
  }

  export type ProjectsOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    project_title?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    project_price?: SortOrder
    project_link?: SortOrder
    project_desc?: SortOrder
  }

  export type ProjectsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectsWhereInput | ProjectsWhereInput[]
    OR?: ProjectsWhereInput[]
    NOT?: ProjectsWhereInput | ProjectsWhereInput[]
    company_id?: StringFilter<"Projects"> | string
    project_title?: StringFilter<"Projects"> | string
    start_date?: DateTimeFilter<"Projects"> | Date | string
    end_date?: DateTimeFilter<"Projects"> | Date | string
    project_price?: FloatNullableFilter<"Projects"> | number | null
    project_link?: StringNullableFilter<"Projects"> | string | null
    project_desc?: StringNullableFilter<"Projects"> | string | null
  }, "id">

  export type ProjectsOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    project_title?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    project_price?: SortOrder
    project_link?: SortOrder
    project_desc?: SortOrder
    _count?: ProjectsCountOrderByAggregateInput
    _avg?: ProjectsAvgOrderByAggregateInput
    _max?: ProjectsMaxOrderByAggregateInput
    _min?: ProjectsMinOrderByAggregateInput
    _sum?: ProjectsSumOrderByAggregateInput
  }

  export type ProjectsScalarWhereWithAggregatesInput = {
    AND?: ProjectsScalarWhereWithAggregatesInput | ProjectsScalarWhereWithAggregatesInput[]
    OR?: ProjectsScalarWhereWithAggregatesInput[]
    NOT?: ProjectsScalarWhereWithAggregatesInput | ProjectsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Projects"> | string
    company_id?: StringWithAggregatesFilter<"Projects"> | string
    project_title?: StringWithAggregatesFilter<"Projects"> | string
    start_date?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    project_price?: FloatNullableWithAggregatesFilter<"Projects"> | number | null
    project_link?: StringNullableWithAggregatesFilter<"Projects"> | string | null
    project_desc?: StringNullableWithAggregatesFilter<"Projects"> | string | null
  }

  export type PartnersWhereInput = {
    AND?: PartnersWhereInput | PartnersWhereInput[]
    OR?: PartnersWhereInput[]
    NOT?: PartnersWhereInput | PartnersWhereInput[]
    id?: StringFilter<"Partners"> | string
    company_id?: StringFilter<"Partners"> | string
    partner_name?: StringFilter<"Partners"> | string
    description?: StringFilter<"Partners"> | string
  }

  export type PartnersOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    partner_name?: SortOrder
    description?: SortOrder
  }

  export type PartnersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartnersWhereInput | PartnersWhereInput[]
    OR?: PartnersWhereInput[]
    NOT?: PartnersWhereInput | PartnersWhereInput[]
    company_id?: StringFilter<"Partners"> | string
    partner_name?: StringFilter<"Partners"> | string
    description?: StringFilter<"Partners"> | string
  }, "id">

  export type PartnersOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    partner_name?: SortOrder
    description?: SortOrder
    _count?: PartnersCountOrderByAggregateInput
    _max?: PartnersMaxOrderByAggregateInput
    _min?: PartnersMinOrderByAggregateInput
  }

  export type PartnersScalarWhereWithAggregatesInput = {
    AND?: PartnersScalarWhereWithAggregatesInput | PartnersScalarWhereWithAggregatesInput[]
    OR?: PartnersScalarWhereWithAggregatesInput[]
    NOT?: PartnersScalarWhereWithAggregatesInput | PartnersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partners"> | string
    company_id?: StringWithAggregatesFilter<"Partners"> | string
    partner_name?: StringWithAggregatesFilter<"Partners"> | string
    description?: StringWithAggregatesFilter<"Partners"> | string
  }

  export type hardSkillTestsWhereInput = {
    AND?: hardSkillTestsWhereInput | hardSkillTestsWhereInput[]
    OR?: hardSkillTestsWhereInput[]
    NOT?: hardSkillTestsWhereInput | hardSkillTestsWhereInput[]
    id?: StringFilter<"hardSkillTests"> | string
    name?: StringFilter<"hardSkillTests"> | string
    hardSkillNumber?: IntFilter<"hardSkillTests"> | number
    company_id?: StringFilter<"hardSkillTests"> | string
    createdAt?: DateTimeFilter<"hardSkillTests"> | Date | string
    updatedAt?: DateTimeFilter<"hardSkillTests"> | Date | string
    tests?: TestItemListRelationFilter
  }

  export type hardSkillTestsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    hardSkillNumber?: SortOrder
    company_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tests?: TestItemOrderByRelationAggregateInput
  }

  export type hardSkillTestsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    company_id_hardSkillNumber?: hardSkillTestsCompany_idHardSkillNumberCompoundUniqueInput
    AND?: hardSkillTestsWhereInput | hardSkillTestsWhereInput[]
    OR?: hardSkillTestsWhereInput[]
    NOT?: hardSkillTestsWhereInput | hardSkillTestsWhereInput[]
    name?: StringFilter<"hardSkillTests"> | string
    hardSkillNumber?: IntFilter<"hardSkillTests"> | number
    company_id?: StringFilter<"hardSkillTests"> | string
    createdAt?: DateTimeFilter<"hardSkillTests"> | Date | string
    updatedAt?: DateTimeFilter<"hardSkillTests"> | Date | string
    tests?: TestItemListRelationFilter
  }, "id" | "company_id_hardSkillNumber">

  export type hardSkillTestsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    hardSkillNumber?: SortOrder
    company_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: hardSkillTestsCountOrderByAggregateInput
    _avg?: hardSkillTestsAvgOrderByAggregateInput
    _max?: hardSkillTestsMaxOrderByAggregateInput
    _min?: hardSkillTestsMinOrderByAggregateInput
    _sum?: hardSkillTestsSumOrderByAggregateInput
  }

  export type hardSkillTestsScalarWhereWithAggregatesInput = {
    AND?: hardSkillTestsScalarWhereWithAggregatesInput | hardSkillTestsScalarWhereWithAggregatesInput[]
    OR?: hardSkillTestsScalarWhereWithAggregatesInput[]
    NOT?: hardSkillTestsScalarWhereWithAggregatesInput | hardSkillTestsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"hardSkillTests"> | string
    name?: StringWithAggregatesFilter<"hardSkillTests"> | string
    hardSkillNumber?: IntWithAggregatesFilter<"hardSkillTests"> | number
    company_id?: StringWithAggregatesFilter<"hardSkillTests"> | string
    createdAt?: DateTimeWithAggregatesFilter<"hardSkillTests"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"hardSkillTests"> | Date | string
  }

  export type TestItemWhereInput = {
    AND?: TestItemWhereInput | TestItemWhereInput[]
    OR?: TestItemWhereInput[]
    NOT?: TestItemWhereInput | TestItemWhereInput[]
    id?: StringFilter<"TestItem"> | string
    question?: StringFilter<"TestItem"> | string
    options?: StringNullableListFilter<"TestItem">
    correctAnswer?: IntFilter<"TestItem"> | number
    hardSkillTestsId?: StringFilter<"TestItem"> | string
    test?: XOR<HardSkillTestsScalarRelationFilter, hardSkillTestsWhereInput>
  }

  export type TestItemOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    hardSkillTestsId?: SortOrder
    test?: hardSkillTestsOrderByWithRelationInput
  }

  export type TestItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestItemWhereInput | TestItemWhereInput[]
    OR?: TestItemWhereInput[]
    NOT?: TestItemWhereInput | TestItemWhereInput[]
    question?: StringFilter<"TestItem"> | string
    options?: StringNullableListFilter<"TestItem">
    correctAnswer?: IntFilter<"TestItem"> | number
    hardSkillTestsId?: StringFilter<"TestItem"> | string
    test?: XOR<HardSkillTestsScalarRelationFilter, hardSkillTestsWhereInput>
  }, "id">

  export type TestItemOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    hardSkillTestsId?: SortOrder
    _count?: TestItemCountOrderByAggregateInput
    _avg?: TestItemAvgOrderByAggregateInput
    _max?: TestItemMaxOrderByAggregateInput
    _min?: TestItemMinOrderByAggregateInput
    _sum?: TestItemSumOrderByAggregateInput
  }

  export type TestItemScalarWhereWithAggregatesInput = {
    AND?: TestItemScalarWhereWithAggregatesInput | TestItemScalarWhereWithAggregatesInput[]
    OR?: TestItemScalarWhereWithAggregatesInput[]
    NOT?: TestItemScalarWhereWithAggregatesInput | TestItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestItem"> | string
    question?: StringWithAggregatesFilter<"TestItem"> | string
    options?: StringNullableListFilter<"TestItem">
    correctAnswer?: IntWithAggregatesFilter<"TestItem"> | number
    hardSkillTestsId?: StringWithAggregatesFilter<"TestItem"> | string
  }

  export type UserCreateInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profile_img?: string | null
    hard_skills?: UserCreatehard_skillsInput | string[]
    soft_skills?: UserCreatesoft_skillsInput | string[]
    position: string
    about?: string | null
    location?: string | null
    experience?: number | null
    role?: $Enums.Role
    level?: $Enums.UserLevel
    education?: UserCreateeducationInput | string[]
    projects?: UserCreateprojectsInput | string[]
    certificates?: UserCreatecertificatesInput | string[]
    languages?: UserCreatelanguagesInput | string[]
    social_medias?: UserCreatesocial_mediasInput | string[]
    messages?: UserCreatemessagesInput | string[]
    submitted_vacancies?: UserCreatesubmitted_vacanciesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profile_img?: string | null
    hard_skills?: UserCreatehard_skillsInput | string[]
    soft_skills?: UserCreatesoft_skillsInput | string[]
    position: string
    about?: string | null
    location?: string | null
    experience?: number | null
    role?: $Enums.Role
    level?: $Enums.UserLevel
    education?: UserCreateeducationInput | string[]
    projects?: UserCreateprojectsInput | string[]
    certificates?: UserCreatecertificatesInput | string[]
    languages?: UserCreatelanguagesInput | string[]
    social_medias?: UserCreatesocial_mediasInput | string[]
    messages?: UserCreatemessagesInput | string[]
    submitted_vacancies?: UserCreatesubmitted_vacanciesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img?: NullableStringFieldUpdateOperationsInput | string | null
    hard_skills?: UserUpdatehard_skillsInput | string[]
    soft_skills?: UserUpdatesoft_skillsInput | string[]
    position?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumUserLevelFieldUpdateOperationsInput | $Enums.UserLevel
    education?: UserUpdateeducationInput | string[]
    projects?: UserUpdateprojectsInput | string[]
    certificates?: UserUpdatecertificatesInput | string[]
    languages?: UserUpdatelanguagesInput | string[]
    social_medias?: UserUpdatesocial_mediasInput | string[]
    messages?: UserUpdatemessagesInput | string[]
    submitted_vacancies?: UserUpdatesubmitted_vacanciesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img?: NullableStringFieldUpdateOperationsInput | string | null
    hard_skills?: UserUpdatehard_skillsInput | string[]
    soft_skills?: UserUpdatesoft_skillsInput | string[]
    position?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumUserLevelFieldUpdateOperationsInput | $Enums.UserLevel
    education?: UserUpdateeducationInput | string[]
    projects?: UserUpdateprojectsInput | string[]
    certificates?: UserUpdatecertificatesInput | string[]
    languages?: UserUpdatelanguagesInput | string[]
    social_medias?: UserUpdatesocial_mediasInput | string[]
    messages?: UserUpdatemessagesInput | string[]
    submitted_vacancies?: UserUpdatesubmitted_vacanciesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profile_img?: string | null
    hard_skills?: UserCreatehard_skillsInput | string[]
    soft_skills?: UserCreatesoft_skillsInput | string[]
    position: string
    about?: string | null
    location?: string | null
    experience?: number | null
    role?: $Enums.Role
    level?: $Enums.UserLevel
    education?: UserCreateeducationInput | string[]
    projects?: UserCreateprojectsInput | string[]
    certificates?: UserCreatecertificatesInput | string[]
    languages?: UserCreatelanguagesInput | string[]
    social_medias?: UserCreatesocial_mediasInput | string[]
    messages?: UserCreatemessagesInput | string[]
    submitted_vacancies?: UserCreatesubmitted_vacanciesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img?: NullableStringFieldUpdateOperationsInput | string | null
    hard_skills?: UserUpdatehard_skillsInput | string[]
    soft_skills?: UserUpdatesoft_skillsInput | string[]
    position?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumUserLevelFieldUpdateOperationsInput | $Enums.UserLevel
    education?: UserUpdateeducationInput | string[]
    projects?: UserUpdateprojectsInput | string[]
    certificates?: UserUpdatecertificatesInput | string[]
    languages?: UserUpdatelanguagesInput | string[]
    social_medias?: UserUpdatesocial_mediasInput | string[]
    messages?: UserUpdatemessagesInput | string[]
    submitted_vacancies?: UserUpdatesubmitted_vacanciesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_img?: NullableStringFieldUpdateOperationsInput | string | null
    hard_skills?: UserUpdatehard_skillsInput | string[]
    soft_skills?: UserUpdatesoft_skillsInput | string[]
    position?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    level?: EnumUserLevelFieldUpdateOperationsInput | $Enums.UserLevel
    education?: UserUpdateeducationInput | string[]
    projects?: UserUpdateprojectsInput | string[]
    certificates?: UserUpdatecertificatesInput | string[]
    languages?: UserUpdatelanguagesInput | string[]
    social_medias?: UserUpdatesocial_mediasInput | string[]
    messages?: UserUpdatemessagesInput | string[]
    submitted_vacancies?: UserUpdatesubmitted_vacanciesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    messageText: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    messageText: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    messageText?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    messageText?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    senderId: string
    receiverId: string
    messageText: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    messageText?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    messageText?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationCreateInput = {
    id?: string
    userId: string
    degree: string
    field_of_study: string
    institution: string
    description?: string | null
    startDate: string
    type_of_education?: string | null
    endDate?: string | null
  }

  export type EducationUncheckedCreateInput = {
    id?: string
    userId: string
    degree: string
    field_of_study: string
    institution: string
    description?: string | null
    startDate: string
    type_of_education?: string | null
    endDate?: string | null
  }

  export type EducationUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    field_of_study?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: StringFieldUpdateOperationsInput | string
    type_of_education?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    field_of_study?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: StringFieldUpdateOperationsInput | string
    type_of_education?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationCreateManyInput = {
    id?: string
    userId: string
    degree: string
    field_of_study: string
    institution: string
    description?: string | null
    startDate: string
    type_of_education?: string | null
    endDate?: string | null
  }

  export type EducationUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    field_of_study?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: StringFieldUpdateOperationsInput | string
    type_of_education?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    field_of_study?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: StringFieldUpdateOperationsInput | string
    type_of_education?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectsOfUserCreateInput = {
    id?: string
    userId: string
    project_title: string
    description: string
    used_technologies?: ProjectsOfUserCreateused_technologiesInput | string[]
  }

  export type ProjectsOfUserUncheckedCreateInput = {
    id?: string
    userId: string
    project_title: string
    description: string
    used_technologies?: ProjectsOfUserCreateused_technologiesInput | string[]
  }

  export type ProjectsOfUserUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    used_technologies?: ProjectsOfUserUpdateused_technologiesInput | string[]
  }

  export type ProjectsOfUserUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    used_technologies?: ProjectsOfUserUpdateused_technologiesInput | string[]
  }

  export type ProjectsOfUserCreateManyInput = {
    id?: string
    userId: string
    project_title: string
    description: string
    used_technologies?: ProjectsOfUserCreateused_technologiesInput | string[]
  }

  export type ProjectsOfUserUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    used_technologies?: ProjectsOfUserUpdateused_technologiesInput | string[]
  }

  export type ProjectsOfUserUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    used_technologies?: ProjectsOfUserUpdateused_technologiesInput | string[]
  }

  export type SoftSkillsCreateInput = {
    id?: string
    userId: string
    type?: SoftSkillsCreatetypeInput | string[]
  }

  export type SoftSkillsUncheckedCreateInput = {
    id?: string
    userId: string
    type?: SoftSkillsCreatetypeInput | string[]
  }

  export type SoftSkillsUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: SoftSkillsUpdatetypeInput | string[]
  }

  export type SoftSkillsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: SoftSkillsUpdatetypeInput | string[]
  }

  export type SoftSkillsCreateManyInput = {
    id?: string
    userId: string
    type?: SoftSkillsCreatetypeInput | string[]
  }

  export type SoftSkillsUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: SoftSkillsUpdatetypeInput | string[]
  }

  export type SoftSkillsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: SoftSkillsUpdatetypeInput | string[]
  }

  export type HardSkillsCreateInput = {
    id?: string
    userId: string
    type?: HardSkillsCreatetypeInput | string[]
  }

  export type HardSkillsUncheckedCreateInput = {
    id?: string
    userId: string
    type?: HardSkillsCreatetypeInput | string[]
  }

  export type HardSkillsUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: HardSkillsUpdatetypeInput | string[]
  }

  export type HardSkillsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: HardSkillsUpdatetypeInput | string[]
  }

  export type HardSkillsCreateManyInput = {
    id?: string
    userId: string
    type?: HardSkillsCreatetypeInput | string[]
  }

  export type HardSkillsUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: HardSkillsUpdatetypeInput | string[]
  }

  export type HardSkillsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: HardSkillsUpdatetypeInput | string[]
  }

  export type CertificatesCreateInput = {
    id?: string
    userId: string
    certificate_title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type CertificatesUncheckedCreateInput = {
    id?: string
    userId: string
    certificate_title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type CertificatesUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    certificate_title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificatesUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    certificate_title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificatesCreateManyInput = {
    id?: string
    userId: string
    certificate_title: string
    description?: string | null
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type CertificatesUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    certificate_title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CertificatesUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    certificate_title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LanguageCreateInput = {
    id?: string
    userId: string
    level: string
    language: string
  }

  export type LanguageUncheckedCreateInput = {
    id?: string
    userId: string
    level: string
    language: string
  }

  export type LanguageUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type LanguageUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type LanguageCreateManyInput = {
    id?: string
    userId: string
    level: string
    language: string
  }

  export type LanguageUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type LanguageUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediaCreateInput = {
    id?: string
    userId: string
    platform: string
    profile_link: string
  }

  export type SocialMediaUncheckedCreateInput = {
    id?: string
    userId: string
    platform: string
    profile_link: string
  }

  export type SocialMediaUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediaUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediaCreateManyInput = {
    id?: string
    userId: string
    platform: string
    profile_link: string
  }

  export type SocialMediaUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediaUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyCreateInput = {
    id?: string
    email: string
    password: string
    phone_number: string
    location: string
    company_name: string
    role?: $Enums.Role
    company_logo?: CompanyCreatecompany_logoInput | string[]
    workers_number?: number | null
    organized_year?: number | null
    social_networks?: CompanyCreatesocial_networksInput | string[]
    vacancies?: CompanyCreatevacanciesInput | string[]
    projects?: CompanyCreateprojectsInput | string[]
    partners?: CompanyCreatepartnersInput | string[]
    messages?: CompanyCreatemessagesInput | string[]
    hard_skill_tests?: CompanyCreatehard_skill_testsInput | string[]
    company_description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    phone_number: string
    location: string
    company_name: string
    role?: $Enums.Role
    company_logo?: CompanyCreatecompany_logoInput | string[]
    workers_number?: number | null
    organized_year?: number | null
    social_networks?: CompanyCreatesocial_networksInput | string[]
    vacancies?: CompanyCreatevacanciesInput | string[]
    projects?: CompanyCreateprojectsInput | string[]
    partners?: CompanyCreatepartnersInput | string[]
    messages?: CompanyCreatemessagesInput | string[]
    hard_skill_tests?: CompanyCreatehard_skill_testsInput | string[]
    company_description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    company_logo?: CompanyUpdatecompany_logoInput | string[]
    workers_number?: NullableIntFieldUpdateOperationsInput | number | null
    organized_year?: NullableIntFieldUpdateOperationsInput | number | null
    social_networks?: CompanyUpdatesocial_networksInput | string[]
    vacancies?: CompanyUpdatevacanciesInput | string[]
    projects?: CompanyUpdateprojectsInput | string[]
    partners?: CompanyUpdatepartnersInput | string[]
    messages?: CompanyUpdatemessagesInput | string[]
    hard_skill_tests?: CompanyUpdatehard_skill_testsInput | string[]
    company_description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    company_logo?: CompanyUpdatecompany_logoInput | string[]
    workers_number?: NullableIntFieldUpdateOperationsInput | number | null
    organized_year?: NullableIntFieldUpdateOperationsInput | number | null
    social_networks?: CompanyUpdatesocial_networksInput | string[]
    vacancies?: CompanyUpdatevacanciesInput | string[]
    projects?: CompanyUpdateprojectsInput | string[]
    partners?: CompanyUpdatepartnersInput | string[]
    messages?: CompanyUpdatemessagesInput | string[]
    hard_skill_tests?: CompanyUpdatehard_skill_testsInput | string[]
    company_description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateManyInput = {
    id?: string
    email: string
    password: string
    phone_number: string
    location: string
    company_name: string
    role?: $Enums.Role
    company_logo?: CompanyCreatecompany_logoInput | string[]
    workers_number?: number | null
    organized_year?: number | null
    social_networks?: CompanyCreatesocial_networksInput | string[]
    vacancies?: CompanyCreatevacanciesInput | string[]
    projects?: CompanyCreateprojectsInput | string[]
    partners?: CompanyCreatepartnersInput | string[]
    messages?: CompanyCreatemessagesInput | string[]
    hard_skill_tests?: CompanyCreatehard_skill_testsInput | string[]
    company_description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    company_logo?: CompanyUpdatecompany_logoInput | string[]
    workers_number?: NullableIntFieldUpdateOperationsInput | number | null
    organized_year?: NullableIntFieldUpdateOperationsInput | number | null
    social_networks?: CompanyUpdatesocial_networksInput | string[]
    vacancies?: CompanyUpdatevacanciesInput | string[]
    projects?: CompanyUpdateprojectsInput | string[]
    partners?: CompanyUpdatepartnersInput | string[]
    messages?: CompanyUpdatemessagesInput | string[]
    hard_skill_tests?: CompanyUpdatehard_skill_testsInput | string[]
    company_description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    company_logo?: CompanyUpdatecompany_logoInput | string[]
    workers_number?: NullableIntFieldUpdateOperationsInput | number | null
    organized_year?: NullableIntFieldUpdateOperationsInput | number | null
    social_networks?: CompanyUpdatesocial_networksInput | string[]
    vacancies?: CompanyUpdatevacanciesInput | string[]
    projects?: CompanyUpdateprojectsInput | string[]
    partners?: CompanyUpdatepartnersInput | string[]
    messages?: CompanyUpdatemessagesInput | string[]
    hard_skill_tests?: CompanyUpdatehard_skill_testsInput | string[]
    company_description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialNetworksCreateInput = {
    id?: string
    company_id: string
    platform?: string | null
    profile_link: string
  }

  export type SocialNetworksUncheckedCreateInput = {
    id?: string
    company_id: string
    platform?: string | null
    profile_link: string
  }

  export type SocialNetworksUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type SocialNetworksUncheckedUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type SocialNetworksCreateManyInput = {
    id?: string
    company_id: string
    platform?: string | null
    profile_link: string
  }

  export type SocialNetworksUpdateManyMutationInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type SocialNetworksUncheckedUpdateManyInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    profile_link?: StringFieldUpdateOperationsInput | string
  }

  export type VacansiesCreateInput = {
    id?: string
    company_id: string
    position: string
    level?: $Enums.Level | null
    submitted_candidates?: VacansiesCreatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesCreatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesCreatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesCreatehard_requirementsInput | string[]
    soft_requirements?: VacansiesCreatesoft_requirementsInput | string[]
    work_start_hour: string
    work_end_hour: string
    description?: string | null
    language_requirements?: VacansiesCreatelanguage_requirementsInput | string[]
    hard_skill_tests: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VacansiesUncheckedCreateInput = {
    id?: string
    company_id: string
    position: string
    level?: $Enums.Level | null
    submitted_candidates?: VacansiesCreatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesCreatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesCreatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesCreatehard_requirementsInput | string[]
    soft_requirements?: VacansiesCreatesoft_requirementsInput | string[]
    work_start_hour: string
    work_end_hour: string
    description?: string | null
    language_requirements?: VacansiesCreatelanguage_requirementsInput | string[]
    hard_skill_tests: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VacansiesUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    level?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    submitted_candidates?: VacansiesUpdatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesUpdatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesUpdatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesUpdatehard_requirementsInput | string[]
    soft_requirements?: VacansiesUpdatesoft_requirementsInput | string[]
    work_start_hour?: StringFieldUpdateOperationsInput | string
    work_end_hour?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    language_requirements?: VacansiesUpdatelanguage_requirementsInput | string[]
    hard_skill_tests?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VacansiesUncheckedUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    level?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    submitted_candidates?: VacansiesUpdatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesUpdatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesUpdatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesUpdatehard_requirementsInput | string[]
    soft_requirements?: VacansiesUpdatesoft_requirementsInput | string[]
    work_start_hour?: StringFieldUpdateOperationsInput | string
    work_end_hour?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    language_requirements?: VacansiesUpdatelanguage_requirementsInput | string[]
    hard_skill_tests?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VacansiesCreateManyInput = {
    id?: string
    company_id: string
    position: string
    level?: $Enums.Level | null
    submitted_candidates?: VacansiesCreatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesCreatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesCreatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesCreatehard_requirementsInput | string[]
    soft_requirements?: VacansiesCreatesoft_requirementsInput | string[]
    work_start_hour: string
    work_end_hour: string
    description?: string | null
    language_requirements?: VacansiesCreatelanguage_requirementsInput | string[]
    hard_skill_tests: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VacansiesUpdateManyMutationInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    level?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    submitted_candidates?: VacansiesUpdatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesUpdatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesUpdatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesUpdatehard_requirementsInput | string[]
    soft_requirements?: VacansiesUpdatesoft_requirementsInput | string[]
    work_start_hour?: StringFieldUpdateOperationsInput | string
    work_end_hour?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    language_requirements?: VacansiesUpdatelanguage_requirementsInput | string[]
    hard_skill_tests?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VacansiesUncheckedUpdateManyInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    level?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    submitted_candidates?: VacansiesUpdatesubmitted_candidatesInput | string[]
    passedToHardSkills?: VacansiesUpdatepassedToHardSkillsInput | string[]
    passedToSoftSkills?: VacansiesUpdatepassedToSoftSkillsInput | string[]
    hard_requirements?: VacansiesUpdatehard_requirementsInput | string[]
    soft_requirements?: VacansiesUpdatesoft_requirementsInput | string[]
    work_start_hour?: StringFieldUpdateOperationsInput | string
    work_end_hour?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    language_requirements?: VacansiesUpdatelanguage_requirementsInput | string[]
    hard_skill_tests?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsCreateInput = {
    id?: string
    company_id: string
    project_title: string
    start_date: Date | string
    end_date?: Date | string
    project_price?: number | null
    project_link?: string | null
    project_desc?: string | null
  }

  export type ProjectsUncheckedCreateInput = {
    id?: string
    company_id: string
    project_title: string
    start_date: Date | string
    end_date?: Date | string
    project_price?: number | null
    project_link?: string | null
    project_desc?: string | null
  }

  export type ProjectsUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_price?: NullableFloatFieldUpdateOperationsInput | number | null
    project_link?: NullableStringFieldUpdateOperationsInput | string | null
    project_desc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectsUncheckedUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_price?: NullableFloatFieldUpdateOperationsInput | number | null
    project_link?: NullableStringFieldUpdateOperationsInput | string | null
    project_desc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectsCreateManyInput = {
    id?: string
    company_id: string
    project_title: string
    start_date: Date | string
    end_date?: Date | string
    project_price?: number | null
    project_link?: string | null
    project_desc?: string | null
  }

  export type ProjectsUpdateManyMutationInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_price?: NullableFloatFieldUpdateOperationsInput | number | null
    project_link?: NullableStringFieldUpdateOperationsInput | string | null
    project_desc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectsUncheckedUpdateManyInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    project_title?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    project_price?: NullableFloatFieldUpdateOperationsInput | number | null
    project_link?: NullableStringFieldUpdateOperationsInput | string | null
    project_desc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PartnersCreateInput = {
    id?: string
    company_id: string
    partner_name: string
    description: string
  }

  export type PartnersUncheckedCreateInput = {
    id?: string
    company_id: string
    partner_name: string
    description: string
  }

  export type PartnersUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    partner_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersUncheckedUpdateInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    partner_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersCreateManyInput = {
    id?: string
    company_id: string
    partner_name: string
    description: string
  }

  export type PartnersUpdateManyMutationInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    partner_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersUncheckedUpdateManyInput = {
    company_id?: StringFieldUpdateOperationsInput | string
    partner_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type hardSkillTestsCreateInput = {
    id?: string
    name: string
    hardSkillNumber: number
    company_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tests?: TestItemCreateNestedManyWithoutTestInput
  }

  export type hardSkillTestsUncheckedCreateInput = {
    id?: string
    name: string
    hardSkillNumber: number
    company_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tests?: TestItemUncheckedCreateNestedManyWithoutTestInput
  }

  export type hardSkillTestsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    hardSkillNumber?: IntFieldUpdateOperationsInput | number
    company_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tests?: TestItemUpdateManyWithoutTestNestedInput
  }

  export type hardSkillTestsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    hardSkillNumber?: IntFieldUpdateOperationsInput | number
    company_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tests?: TestItemUncheckedUpdateManyWithoutTestNestedInput
  }

  export type hardSkillTestsCreateManyInput = {
    id?: string
    name: string
    hardSkillNumber: number
    company_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type hardSkillTestsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    hardSkillNumber?: IntFieldUpdateOperationsInput | number
    company_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type hardSkillTestsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    hardSkillNumber?: IntFieldUpdateOperationsInput | number
    company_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestItemCreateInput = {
    id?: string
    question: string
    options?: TestItemCreateoptionsInput | string[]
    correctAnswer: number
    test: hardSkillTestsCreateNestedOneWithoutTestsInput
  }

  export type TestItemUncheckedCreateInput = {
    id?: string
    question: string
    options?: TestItemCreateoptionsInput | string[]
    correctAnswer: number
    hardSkillTestsId: string
  }

  export type TestItemUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
    test?: hardSkillTestsUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestItemUncheckedUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
    hardSkillTestsId?: StringFieldUpdateOperationsInput | string
  }

  export type TestItemCreateManyInput = {
    id?: string
    question: string
    options?: TestItemCreateoptionsInput | string[]
    correctAnswer: number
    hardSkillTestsId: string
  }

  export type TestItemUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
  }

  export type TestItemUncheckedUpdateManyInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
    hardSkillTestsId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumUserLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.UserLevel | EnumUserLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUserLevelFilter<$PrismaModel> | $Enums.UserLevel
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_img?: SortOrder
    hard_skills?: SortOrder
    soft_skills?: SortOrder
    position?: SortOrder
    about?: SortOrder
    location?: SortOrder
    experience?: SortOrder
    role?: SortOrder
    level?: SortOrder
    education?: SortOrder
    projects?: SortOrder
    certificates?: SortOrder
    languages?: SortOrder
    social_medias?: SortOrder
    messages?: SortOrder
    submitted_vacancies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    experience?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_img?: SortOrder
    position?: SortOrder
    about?: SortOrder
    location?: SortOrder
    experience?: SortOrder
    role?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_img?: SortOrder
    position?: SortOrder
    about?: SortOrder
    location?: SortOrder
    experience?: SortOrder
    role?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    experience?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumUserLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserLevel | EnumUserLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUserLevelWithAggregatesFilter<$PrismaModel> | $Enums.UserLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserLevelFilter<$PrismaModel>
    _max?: NestedEnumUserLevelFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    messageText?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    messageText?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    messageText?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    degree?: SortOrder
    field_of_study?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    type_of_education?: SortOrder
    endDate?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    degree?: SortOrder
    field_of_study?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    type_of_education?: SortOrder
    endDate?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    degree?: SortOrder
    field_of_study?: SortOrder
    institution?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    type_of_education?: SortOrder
    endDate?: SortOrder
  }

  export type ProjectsOfUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    project_title?: SortOrder
    description?: SortOrder
    used_technologies?: SortOrder
  }

  export type ProjectsOfUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    project_title?: SortOrder
    description?: SortOrder
  }

  export type ProjectsOfUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    project_title?: SortOrder
    description?: SortOrder
  }

  export type SoftSkillsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
  }

  export type SoftSkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SoftSkillsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HardSkillsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
  }

  export type HardSkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HardSkillsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type CertificatesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    certificate_title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type CertificatesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    certificate_title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type CertificatesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    certificate_title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type LanguageCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    language?: SortOrder
  }

  export type LanguageMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    language?: SortOrder
  }

  export type LanguageMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    language?: SortOrder
  }

  export type SocialMediaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type SocialMediaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type SocialMediaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    location?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    company_logo?: SortOrder
    workers_number?: SortOrder
    organized_year?: SortOrder
    social_networks?: SortOrder
    vacancies?: SortOrder
    projects?: SortOrder
    partners?: SortOrder
    messages?: SortOrder
    hard_skill_tests?: SortOrder
    company_description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    workers_number?: SortOrder
    organized_year?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    location?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    workers_number?: SortOrder
    organized_year?: SortOrder
    company_description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    location?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    workers_number?: SortOrder
    organized_year?: SortOrder
    company_description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    workers_number?: SortOrder
    organized_year?: SortOrder
  }

  export type SocialNetworksCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type SocialNetworksMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type SocialNetworksMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    platform?: SortOrder
    profile_link?: SortOrder
  }

  export type EnumLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableFilter<$PrismaModel> | $Enums.Level | null
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type VacansiesCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    position?: SortOrder
    level?: SortOrder
    submitted_candidates?: SortOrder
    passedToHardSkills?: SortOrder
    passedToSoftSkills?: SortOrder
    hard_requirements?: SortOrder
    soft_requirements?: SortOrder
    work_start_hour?: SortOrder
    work_end_hour?: SortOrder
    description?: SortOrder
    language_requirements?: SortOrder
    hard_skill_tests?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VacansiesAvgOrderByAggregateInput = {
    hard_skill_tests?: SortOrder
  }

  export type VacansiesMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    position?: SortOrder
    level?: SortOrder
    work_start_hour?: SortOrder
    work_end_hour?: SortOrder
    description?: SortOrder
    hard_skill_tests?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VacansiesMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    position?: SortOrder
    level?: SortOrder
    work_start_hour?: SortOrder
    work_end_hour?: SortOrder
    description?: SortOrder
    hard_skill_tests?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VacansiesSumOrderByAggregateInput = {
    hard_skill_tests?: SortOrder
  }

  export type EnumLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.Level | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumLevelNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type ProjectsCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    project_title?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    project_price?: SortOrder
    project_link?: SortOrder
    project_desc?: SortOrder
  }

  export type ProjectsAvgOrderByAggregateInput = {
    project_price?: SortOrder
  }

  export type ProjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    project_title?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    project_price?: SortOrder
    project_link?: SortOrder
    project_desc?: SortOrder
  }

  export type ProjectsMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    project_title?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    project_price?: SortOrder
    project_link?: SortOrder
    project_desc?: SortOrder
  }

  export type ProjectsSumOrderByAggregateInput = {
    project_price?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type PartnersCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    partner_name?: SortOrder
    description?: SortOrder
  }

  export type PartnersMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    partner_name?: SortOrder
    description?: SortOrder
  }

  export type PartnersMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    partner_name?: SortOrder
    description?: SortOrder
  }

  export type TestItemListRelationFilter = {
    every?: TestItemWhereInput
    some?: TestItemWhereInput
    none?: TestItemWhereInput
  }

  export type TestItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type hardSkillTestsCompany_idHardSkillNumberCompoundUniqueInput = {
    company_id: string
    hardSkillNumber: number
  }

  export type hardSkillTestsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hardSkillNumber?: SortOrder
    company_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type hardSkillTestsAvgOrderByAggregateInput = {
    hardSkillNumber?: SortOrder
  }

  export type hardSkillTestsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hardSkillNumber?: SortOrder
    company_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type hardSkillTestsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hardSkillNumber?: SortOrder
    company_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type hardSkillTestsSumOrderByAggregateInput = {
    hardSkillNumber?: SortOrder
  }

  export type HardSkillTestsScalarRelationFilter = {
    is?: hardSkillTestsWhereInput
    isNot?: hardSkillTestsWhereInput
  }

  export type TestItemCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    options?: SortOrder
    correctAnswer?: SortOrder
    hardSkillTestsId?: SortOrder
  }

  export type TestItemAvgOrderByAggregateInput = {
    correctAnswer?: SortOrder
  }

  export type TestItemMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    hardSkillTestsId?: SortOrder
  }

  export type TestItemMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    hardSkillTestsId?: SortOrder
  }

  export type TestItemSumOrderByAggregateInput = {
    correctAnswer?: SortOrder
  }

  export type UserCreatehard_skillsInput = {
    set: string[]
  }

  export type UserCreatesoft_skillsInput = {
    set: string[]
  }

  export type UserCreateeducationInput = {
    set: string[]
  }

  export type UserCreateprojectsInput = {
    set: string[]
  }

  export type UserCreatecertificatesInput = {
    set: string[]
  }

  export type UserCreatelanguagesInput = {
    set: string[]
  }

  export type UserCreatesocial_mediasInput = {
    set: string[]
  }

  export type UserCreatemessagesInput = {
    set: string[]
  }

  export type UserCreatesubmitted_vacanciesInput = {
    set: string[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type UserUpdatehard_skillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatesoft_skillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumUserLevelFieldUpdateOperationsInput = {
    set?: $Enums.UserLevel
  }

  export type UserUpdateeducationInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateprojectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatecertificatesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatelanguagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatesocial_mediasInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatemessagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdatesubmitted_vacanciesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProjectsOfUserCreateused_technologiesInput = {
    set: string[]
  }

  export type ProjectsOfUserUpdateused_technologiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SoftSkillsCreatetypeInput = {
    set: string[]
  }

  export type SoftSkillsUpdatetypeInput = {
    set?: string[]
    push?: string | string[]
  }

  export type HardSkillsCreatetypeInput = {
    set: string[]
  }

  export type HardSkillsUpdatetypeInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type CompanyCreatecompany_logoInput = {
    set: string[]
  }

  export type CompanyCreatesocial_networksInput = {
    set: string[]
  }

  export type CompanyCreatevacanciesInput = {
    set: string[]
  }

  export type CompanyCreateprojectsInput = {
    set: string[]
  }

  export type CompanyCreatepartnersInput = {
    set: string[]
  }

  export type CompanyCreatemessagesInput = {
    set: string[]
  }

  export type CompanyCreatehard_skill_testsInput = {
    set: string[]
  }

  export type CompanyUpdatecompany_logoInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdatesocial_networksInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdatevacanciesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdateprojectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdatepartnersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdatemessagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdatehard_skill_testsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VacansiesCreatesubmitted_candidatesInput = {
    set: string[]
  }

  export type VacansiesCreatepassedToHardSkillsInput = {
    set: string[]
  }

  export type VacansiesCreatepassedToSoftSkillsInput = {
    set: string[]
  }

  export type VacansiesCreatehard_requirementsInput = {
    set: string[]
  }

  export type VacansiesCreatesoft_requirementsInput = {
    set: string[]
  }

  export type VacansiesCreatelanguage_requirementsInput = {
    set: string[]
  }

  export type NullableEnumLevelFieldUpdateOperationsInput = {
    set?: $Enums.Level | null
    unset?: boolean
  }

  export type VacansiesUpdatesubmitted_candidatesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VacansiesUpdatepassedToHardSkillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VacansiesUpdatepassedToSoftSkillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VacansiesUpdatehard_requirementsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VacansiesUpdatesoft_requirementsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VacansiesUpdatelanguage_requirementsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type TestItemCreateNestedManyWithoutTestInput = {
    create?: XOR<TestItemCreateWithoutTestInput, TestItemUncheckedCreateWithoutTestInput> | TestItemCreateWithoutTestInput[] | TestItemUncheckedCreateWithoutTestInput[]
    connectOrCreate?: TestItemCreateOrConnectWithoutTestInput | TestItemCreateOrConnectWithoutTestInput[]
    createMany?: TestItemCreateManyTestInputEnvelope
    connect?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
  }

  export type TestItemUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<TestItemCreateWithoutTestInput, TestItemUncheckedCreateWithoutTestInput> | TestItemCreateWithoutTestInput[] | TestItemUncheckedCreateWithoutTestInput[]
    connectOrCreate?: TestItemCreateOrConnectWithoutTestInput | TestItemCreateOrConnectWithoutTestInput[]
    createMany?: TestItemCreateManyTestInputEnvelope
    connect?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
  }

  export type TestItemUpdateManyWithoutTestNestedInput = {
    create?: XOR<TestItemCreateWithoutTestInput, TestItemUncheckedCreateWithoutTestInput> | TestItemCreateWithoutTestInput[] | TestItemUncheckedCreateWithoutTestInput[]
    connectOrCreate?: TestItemCreateOrConnectWithoutTestInput | TestItemCreateOrConnectWithoutTestInput[]
    upsert?: TestItemUpsertWithWhereUniqueWithoutTestInput | TestItemUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: TestItemCreateManyTestInputEnvelope
    set?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    disconnect?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    delete?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    connect?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    update?: TestItemUpdateWithWhereUniqueWithoutTestInput | TestItemUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: TestItemUpdateManyWithWhereWithoutTestInput | TestItemUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: TestItemScalarWhereInput | TestItemScalarWhereInput[]
  }

  export type TestItemUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<TestItemCreateWithoutTestInput, TestItemUncheckedCreateWithoutTestInput> | TestItemCreateWithoutTestInput[] | TestItemUncheckedCreateWithoutTestInput[]
    connectOrCreate?: TestItemCreateOrConnectWithoutTestInput | TestItemCreateOrConnectWithoutTestInput[]
    upsert?: TestItemUpsertWithWhereUniqueWithoutTestInput | TestItemUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: TestItemCreateManyTestInputEnvelope
    set?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    disconnect?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    delete?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    connect?: TestItemWhereUniqueInput | TestItemWhereUniqueInput[]
    update?: TestItemUpdateWithWhereUniqueWithoutTestInput | TestItemUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: TestItemUpdateManyWithWhereWithoutTestInput | TestItemUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: TestItemScalarWhereInput | TestItemScalarWhereInput[]
  }

  export type TestItemCreateoptionsInput = {
    set: string[]
  }

  export type hardSkillTestsCreateNestedOneWithoutTestsInput = {
    create?: XOR<hardSkillTestsCreateWithoutTestsInput, hardSkillTestsUncheckedCreateWithoutTestsInput>
    connectOrCreate?: hardSkillTestsCreateOrConnectWithoutTestsInput
    connect?: hardSkillTestsWhereUniqueInput
  }

  export type TestItemUpdateoptionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type hardSkillTestsUpdateOneRequiredWithoutTestsNestedInput = {
    create?: XOR<hardSkillTestsCreateWithoutTestsInput, hardSkillTestsUncheckedCreateWithoutTestsInput>
    connectOrCreate?: hardSkillTestsCreateOrConnectWithoutTestsInput
    upsert?: hardSkillTestsUpsertWithoutTestsInput
    connect?: hardSkillTestsWhereUniqueInput
    update?: XOR<XOR<hardSkillTestsUpdateToOneWithWhereWithoutTestsInput, hardSkillTestsUpdateWithoutTestsInput>, hardSkillTestsUncheckedUpdateWithoutTestsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumUserLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.UserLevel | EnumUserLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUserLevelFilter<$PrismaModel> | $Enums.UserLevel
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserLevel | EnumUserLevelFieldRefInput<$PrismaModel>
    in?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserLevel[] | ListEnumUserLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumUserLevelWithAggregatesFilter<$PrismaModel> | $Enums.UserLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserLevelFilter<$PrismaModel>
    _max?: NestedEnumUserLevelFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedEnumLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableFilter<$PrismaModel> | $Enums.Level | null
    isSet?: boolean
  }

  export type NestedEnumLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.Level | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumLevelNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type TestItemCreateWithoutTestInput = {
    id?: string
    question: string
    options?: TestItemCreateoptionsInput | string[]
    correctAnswer: number
  }

  export type TestItemUncheckedCreateWithoutTestInput = {
    id?: string
    question: string
    options?: TestItemCreateoptionsInput | string[]
    correctAnswer: number
  }

  export type TestItemCreateOrConnectWithoutTestInput = {
    where: TestItemWhereUniqueInput
    create: XOR<TestItemCreateWithoutTestInput, TestItemUncheckedCreateWithoutTestInput>
  }

  export type TestItemCreateManyTestInputEnvelope = {
    data: TestItemCreateManyTestInput | TestItemCreateManyTestInput[]
  }

  export type TestItemUpsertWithWhereUniqueWithoutTestInput = {
    where: TestItemWhereUniqueInput
    update: XOR<TestItemUpdateWithoutTestInput, TestItemUncheckedUpdateWithoutTestInput>
    create: XOR<TestItemCreateWithoutTestInput, TestItemUncheckedCreateWithoutTestInput>
  }

  export type TestItemUpdateWithWhereUniqueWithoutTestInput = {
    where: TestItemWhereUniqueInput
    data: XOR<TestItemUpdateWithoutTestInput, TestItemUncheckedUpdateWithoutTestInput>
  }

  export type TestItemUpdateManyWithWhereWithoutTestInput = {
    where: TestItemScalarWhereInput
    data: XOR<TestItemUpdateManyMutationInput, TestItemUncheckedUpdateManyWithoutTestInput>
  }

  export type TestItemScalarWhereInput = {
    AND?: TestItemScalarWhereInput | TestItemScalarWhereInput[]
    OR?: TestItemScalarWhereInput[]
    NOT?: TestItemScalarWhereInput | TestItemScalarWhereInput[]
    id?: StringFilter<"TestItem"> | string
    question?: StringFilter<"TestItem"> | string
    options?: StringNullableListFilter<"TestItem">
    correctAnswer?: IntFilter<"TestItem"> | number
    hardSkillTestsId?: StringFilter<"TestItem"> | string
  }

  export type hardSkillTestsCreateWithoutTestsInput = {
    id?: string
    name: string
    hardSkillNumber: number
    company_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type hardSkillTestsUncheckedCreateWithoutTestsInput = {
    id?: string
    name: string
    hardSkillNumber: number
    company_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type hardSkillTestsCreateOrConnectWithoutTestsInput = {
    where: hardSkillTestsWhereUniqueInput
    create: XOR<hardSkillTestsCreateWithoutTestsInput, hardSkillTestsUncheckedCreateWithoutTestsInput>
  }

  export type hardSkillTestsUpsertWithoutTestsInput = {
    update: XOR<hardSkillTestsUpdateWithoutTestsInput, hardSkillTestsUncheckedUpdateWithoutTestsInput>
    create: XOR<hardSkillTestsCreateWithoutTestsInput, hardSkillTestsUncheckedCreateWithoutTestsInput>
    where?: hardSkillTestsWhereInput
  }

  export type hardSkillTestsUpdateToOneWithWhereWithoutTestsInput = {
    where?: hardSkillTestsWhereInput
    data: XOR<hardSkillTestsUpdateWithoutTestsInput, hardSkillTestsUncheckedUpdateWithoutTestsInput>
  }

  export type hardSkillTestsUpdateWithoutTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    hardSkillNumber?: IntFieldUpdateOperationsInput | number
    company_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type hardSkillTestsUncheckedUpdateWithoutTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    hardSkillNumber?: IntFieldUpdateOperationsInput | number
    company_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestItemCreateManyTestInput = {
    id?: string
    question: string
    options?: TestItemCreateoptionsInput | string[]
    correctAnswer: number
  }

  export type TestItemUpdateWithoutTestInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
  }

  export type TestItemUncheckedUpdateWithoutTestInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
  }

  export type TestItemUncheckedUpdateManyWithoutTestInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: TestItemUpdateoptionsInput | string[]
    correctAnswer?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}